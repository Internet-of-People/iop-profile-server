// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopProfileServer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Profileserver {

  /// <summary>Holder for reflection information generated from IopProfileServer.proto</summary>
  public static partial class IopProfileServerReflection {

    #region Descriptor
    /// <summary>File descriptor for IopProfileServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopProfileServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZJb3BQcm9maWxlU2VydmVyLnByb3RvEhFpb3AucHJvZmlsZXNlcnZlchoP",
            "SW9wU2hhcmVkLnByb3RvGgxJb3BDYW4ucHJvdG8iTQoRTWVzc2FnZVdpdGhI",
            "ZWFkZXISDgoGaGVhZGVyGAEgASgHEigKBGJvZHkYAiABKAsyGi5pb3AucHJv",
            "ZmlsZXNlcnZlci5NZXNzYWdlIoQBCgdNZXNzYWdlEgoKAmlkGAEgASgNEi0K",
            "B3JlcXVlc3QYAiABKAsyGi5pb3AucHJvZmlsZXNlcnZlci5SZXF1ZXN0SAAS",
            "LwoIcmVzcG9uc2UYAyABKAsyGy5pb3AucHJvZmlsZXNlcnZlci5SZXNwb25z",
            "ZUgAQg0KC01lc3NhZ2VUeXBlIqEBCgdSZXF1ZXN0EjoKDnNpbmdsZV9yZXF1",
            "ZXN0GAEgASgLMiAuaW9wLnByb2ZpbGVzZXJ2ZXIuU2luZ2xlUmVxdWVzdEgA",
            "EkYKFGNvbnZlcnNhdGlvbl9yZXF1ZXN0GAIgASgLMiYuaW9wLnByb2ZpbGVz",
            "ZXJ2ZXIuQ29udmVyc2F0aW9uUmVxdWVzdEgAQhIKEENvbnZlcnNhdGlvblR5",
            "cGUi7gEKCFJlc3BvbnNlEiIKBnN0YXR1cxgBIAEoDjISLmlvcC5zaGFyZWQu",
            "U3RhdHVzEhEKCXRpbWVzdGFtcBgCIAEoEhIPCgdkZXRhaWxzGAMgASgJEjwK",
            "D3NpbmdsZV9yZXNwb25zZRgIIAEoCzIhLmlvcC5wcm9maWxlc2VydmVyLlNp",
            "bmdsZVJlc3BvbnNlSAASSAoVY29udmVyc2F0aW9uX3Jlc3BvbnNlGAkgASgL",
            "MicuaW9wLnByb2ZpbGVzZXJ2ZXIuQ29udmVyc2F0aW9uUmVzcG9uc2VIAEIS",
            "ChBDb252ZXJzYXRpb25UeXBlIqIHCg1TaW5nbGVSZXF1ZXN0Eg8KB3ZlcnNp",
            "b24YASABKAwSLgoEcGluZxgCIAEoCzIeLmlvcC5wcm9maWxlc2VydmVyLlBp",
            "bmdSZXF1ZXN0SAASOQoKbGlzdF9yb2xlcxgDIAEoCzIjLmlvcC5wcm9maWxl",
            "c2VydmVyLkxpc3RSb2xlc1JlcXVlc3RIABJIChJsaXN0X2hvc3RpbmdfcGxh",
            "bnMYBCABKAsyKi5pb3AucHJvZmlsZXNlcnZlci5MaXN0SG9zdGluZ1BsYW5z",
            "UmVxdWVzdEgAElIKF2dldF9wcm9maWxlX2luZm9ybWF0aW9uGAUgASgLMi8u",
            "aW9wLnByb2ZpbGVzZXJ2ZXIuR2V0UHJvZmlsZUluZm9ybWF0aW9uUmVxdWVz",
            "dEgAEkEKDnByb2ZpbGVfc2VhcmNoGAYgASgLMicuaW9wLnByb2ZpbGVzZXJ2",
            "ZXIuUHJvZmlsZVNlYXJjaFJlcXVlc3RIABJKChNwcm9maWxlX3NlYXJjaF9w",
            "YXJ0GAcgASgLMisuaW9wLnByb2ZpbGVzZXJ2ZXIuUHJvZmlsZVNlYXJjaFBh",
            "cnRSZXF1ZXN0SAASYwogYXBwbGljYXRpb25fc2VydmljZV9zZW5kX21lc3Nh",
            "Z2UYCCABKAsyNy5pb3AucHJvZmlsZXNlcnZlci5BcHBsaWNhdGlvblNlcnZp",
            "Y2VTZW5kTWVzc2FnZVJlcXVlc3RIABKGAQowYXBwbGljYXRpb25fc2Vydmlj",
            "ZV9yZWNlaXZlX21lc3NhZ2Vfbm90aWZpY2F0aW9uGAkgASgLMkYuaW9wLnBy",
            "b2ZpbGVzZXJ2ZXIuQXBwbGljYXRpb25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VO",
            "b3RpZmljYXRpb25SZXF1ZXN0QgIYAUgAEj8KDXByb2ZpbGVfc3RhdHMYCiAB",
            "KAsyJi5pb3AucHJvZmlsZXNlcnZlci5Qcm9maWxlU3RhdHNSZXF1ZXN0SAAS",
            "bwomZ2V0X2lkZW50aXR5X3JlbGF0aW9uc2hpcHNfaW5mb3JtYXRpb24YCyAB",
            "KAsyPS5pb3AucHJvZmlsZXNlcnZlci5HZXRJZGVudGl0eVJlbGF0aW9uc2hp",
            "cHNJbmZvcm1hdGlvblJlcXVlc3RIABI5CgpjbG9zZV9jYWxsGAwgASgLMiMu",
            "aW9wLnByb2ZpbGVzZXJ2ZXIuQ2xvc2VDYWxsUmVxdWVzdEgAQg0KC1JlcXVl",
            "c3RUeXBlIq8HCg5TaW5nbGVSZXNwb25zZRIPCgd2ZXJzaW9uGAEgASgMEi8K",
            "BHBpbmcYAiABKAsyHy5pb3AucHJvZmlsZXNlcnZlci5QaW5nUmVzcG9uc2VI",
            "ABI6CgpsaXN0X3JvbGVzGAMgASgLMiQuaW9wLnByb2ZpbGVzZXJ2ZXIuTGlz",
            "dFJvbGVzUmVzcG9uc2VIABJJChJsaXN0X2hvc3RpbmdfcGxhbnMYBCABKAsy",
            "Ky5pb3AucHJvZmlsZXNlcnZlci5MaXN0SG9zdGluZ1BsYW5zUmVzcG9uc2VI",
            "ABJTChdnZXRfcHJvZmlsZV9pbmZvcm1hdGlvbhgFIAEoCzIwLmlvcC5wcm9m",
            "aWxlc2VydmVyLkdldFByb2ZpbGVJbmZvcm1hdGlvblJlc3BvbnNlSAASQgoO",
            "cHJvZmlsZV9zZWFyY2gYBiABKAsyKC5pb3AucHJvZmlsZXNlcnZlci5Qcm9m",
            "aWxlU2VhcmNoUmVzcG9uc2VIABJLChNwcm9maWxlX3NlYXJjaF9wYXJ0GAcg",
            "ASgLMiwuaW9wLnByb2ZpbGVzZXJ2ZXIuUHJvZmlsZVNlYXJjaFBhcnRSZXNw",
            "b25zZUgAEmQKIGFwcGxpY2F0aW9uX3NlcnZpY2Vfc2VuZF9tZXNzYWdlGAgg",
            "ASgLMjguaW9wLnByb2ZpbGVzZXJ2ZXIuQXBwbGljYXRpb25TZXJ2aWNlU2Vu",
            "ZE1lc3NhZ2VSZXNwb25zZUgAEocBCjBhcHBsaWNhdGlvbl9zZXJ2aWNlX3Jl",
            "Y2VpdmVfbWVzc2FnZV9ub3RpZmljYXRpb24YCSABKAsyRy5pb3AucHJvZmls",
            "ZXNlcnZlci5BcHBsaWNhdGlvblNlcnZpY2VSZWNlaXZlTWVzc2FnZU5vdGlm",
            "aWNhdGlvblJlc3BvbnNlQgIYAUgAEkAKDXByb2ZpbGVfc3RhdHMYCiABKAsy",
            "Jy5pb3AucHJvZmlsZXNlcnZlci5Qcm9maWxlU3RhdHNSZXNwb25zZUgAEnAK",
            "JmdldF9pZGVudGl0eV9yZWxhdGlvbnNoaXBzX2luZm9ybWF0aW9uGAsgASgL",
            "Mj4uaW9wLnByb2ZpbGVzZXJ2ZXIuR2V0SWRlbnRpdHlSZWxhdGlvbnNoaXBz",
            "SW5mb3JtYXRpb25SZXNwb25zZUgAEjoKCmNsb3NlX2NhbGwYDCABKAsyJC5p",
            "b3AucHJvZmlsZXNlcnZlci5DbG9zZUNhbGxSZXNwb25zZUgAQg4KDFJlc3Bv",
            "bnNlVHlwZSKKDAoTQ29udmVyc2F0aW9uUmVxdWVzdBIRCglzaWduYXR1cmUY",
            "ASABKAwSPAoFc3RhcnQYAiABKAsyKy5pb3AucHJvZmlsZXNlcnZlci5TdGFy",
            "dENvbnZlcnNhdGlvblJlcXVlc3RIABJFChByZWdpc3Rlcl9ob3N0aW5nGAMg",
            "ASgLMikuaW9wLnByb2ZpbGVzZXJ2ZXIuUmVnaXN0ZXJIb3N0aW5nUmVxdWVz",
            "dEgAEjUKCGNoZWNrX2luGAQgASgLMiEuaW9wLnByb2ZpbGVzZXJ2ZXIuQ2hl",
            "Y2tJblJlcXVlc3RIABJDCg92ZXJpZnlfaWRlbnRpdHkYBSABKAsyKC5pb3Au",
            "cHJvZmlsZXNlcnZlci5WZXJpZnlJZGVudGl0eVJlcXVlc3RIABJBCg51cGRh",
            "dGVfcHJvZmlsZRgGIAEoCzInLmlvcC5wcm9maWxlc2VydmVyLlVwZGF0ZVBy",
            "b2ZpbGVSZXF1ZXN0SAASVAoYY2FuY2VsX2hvc3RpbmdfYWdyZWVtZW50GAcg",
            "ASgLMjAuaW9wLnByb2ZpbGVzZXJ2ZXIuQ2FuY2VsSG9zdGluZ0FncmVlbWVu",
            "dFJlcXVlc3RIABJSChdhcHBsaWNhdGlvbl9zZXJ2aWNlX2FkZBgIIAEoCzIv",
            "LmlvcC5wcm9maWxlc2VydmVyLkFwcGxpY2F0aW9uU2VydmljZUFkZFJlcXVl",
            "c3RIABJYChphcHBsaWNhdGlvbl9zZXJ2aWNlX3JlbW92ZRgJIAEoCzIyLmlv",
            "cC5wcm9maWxlc2VydmVyLkFwcGxpY2F0aW9uU2VydmljZVJlbW92ZVJlcXVl",
            "c3RIABJlCiFjYWxsX2lkZW50aXR5X2FwcGxpY2F0aW9uX3NlcnZpY2UYCiAB",
            "KAsyOC5pb3AucHJvZmlsZXNlcnZlci5DYWxsSWRlbnRpdHlBcHBsaWNhdGlv",
            "blNlcnZpY2VSZXF1ZXN0SAASWAoaaW5jb21pbmdfY2FsbF9ub3RpZmljYXRp",
            "b24YCyABKAsyMi5pb3AucHJvZmlsZXNlcnZlci5JbmNvbWluZ0NhbGxOb3Rp",
            "ZmljYXRpb25SZXF1ZXN0SAASTAoUYWRkX3JlbGF0ZWRfaWRlbnRpdHkYDCAB",
            "KAsyLC5pb3AucHJvZmlsZXNlcnZlci5BZGRSZWxhdGVkSWRlbnRpdHlSZXF1",
            "ZXN0SAASUgoXcmVtb3ZlX3JlbGF0ZWRfaWRlbnRpdHkYDSABKAsyLy5pb3Au",
            "cHJvZmlsZXNlcnZlci5SZW1vdmVSZWxhdGVkSWRlbnRpdHlSZXF1ZXN0SAAS",
            "Zgohc3RhcnRfbmVpZ2hib3Job29kX2luaXRpYWxpemF0aW9uGA4gASgLMjku",
            "aW9wLnByb2ZpbGVzZXJ2ZXIuU3RhcnROZWlnaGJvcmhvb2RJbml0aWFsaXph",
            "dGlvblJlcXVlc3RIABJoCiJmaW5pc2hfbmVpZ2hib3Job29kX2luaXRpYWxp",
            "emF0aW9uGA8gASgLMjouaW9wLnByb2ZpbGVzZXJ2ZXIuRmluaXNoTmVpZ2hi",
            "b3Job29kSW5pdGlhbGl6YXRpb25SZXF1ZXN0SAASZwoibmVpZ2hib3Job29k",
            "X3NoYXJlZF9wcm9maWxlX3VwZGF0ZRgQIAEoCzI5LmlvcC5wcm9maWxlc2Vy",
            "dmVyLk5laWdoYm9yaG9vZFNoYXJlZFByb2ZpbGVVcGRhdGVSZXF1ZXN0SAAS",
            "VgoZc3RvcF9uZWlnaGJvcmhvb2RfdXBkYXRlcxgRIAEoCzIxLmlvcC5wcm9m",
            "aWxlc2VydmVyLlN0b3BOZWlnaGJvcmhvb2RVcGRhdGVzUmVxdWVzdEgAEkAK",
            "DmNhbl9zdG9yZV9kYXRhGBIgASgLMiYuaW9wLnByb2ZpbGVzZXJ2ZXIuQ2Fu",
            "U3RvcmVEYXRhUmVxdWVzdEgAElEKF2Nhbl9wdWJsaXNoX2lwbnNfcmVjb3Jk",
            "GBMgASgLMi4uaW9wLnByb2ZpbGVzZXJ2ZXIuQ2FuUHVibGlzaElwbnNSZWNv",
            "cmRSZXF1ZXN0SABCDQoLUmVxdWVzdFR5cGUingwKFENvbnZlcnNhdGlvblJl",
            "c3BvbnNlEhEKCXNpZ25hdHVyZRgBIAEoDBI9CgVzdGFydBgCIAEoCzIsLmlv",
            "cC5wcm9maWxlc2VydmVyLlN0YXJ0Q29udmVyc2F0aW9uUmVzcG9uc2VIABJG",
            "ChByZWdpc3Rlcl9ob3N0aW5nGAMgASgLMiouaW9wLnByb2ZpbGVzZXJ2ZXIu",
            "UmVnaXN0ZXJIb3N0aW5nUmVzcG9uc2VIABI2CghjaGVja19pbhgEIAEoCzIi",
            "LmlvcC5wcm9maWxlc2VydmVyLkNoZWNrSW5SZXNwb25zZUgAEkQKD3Zlcmlm",
            "eV9pZGVudGl0eRgFIAEoCzIpLmlvcC5wcm9maWxlc2VydmVyLlZlcmlmeUlk",
            "ZW50aXR5UmVzcG9uc2VIABJCCg51cGRhdGVfcHJvZmlsZRgGIAEoCzIoLmlv",
            "cC5wcm9maWxlc2VydmVyLlVwZGF0ZVByb2ZpbGVSZXNwb25zZUgAElUKGGNh",
            "bmNlbF9ob3N0aW5nX2FncmVlbWVudBgHIAEoCzIxLmlvcC5wcm9maWxlc2Vy",
            "dmVyLkNhbmNlbEhvc3RpbmdBZ3JlZW1lbnRSZXNwb25zZUgAElMKF2FwcGxp",
            "Y2F0aW9uX3NlcnZpY2VfYWRkGAggASgLMjAuaW9wLnByb2ZpbGVzZXJ2ZXIu",
            "QXBwbGljYXRpb25TZXJ2aWNlQWRkUmVzcG9uc2VIABJZChphcHBsaWNhdGlv",
            "bl9zZXJ2aWNlX3JlbW92ZRgJIAEoCzIzLmlvcC5wcm9maWxlc2VydmVyLkFw",
            "cGxpY2F0aW9uU2VydmljZVJlbW92ZVJlc3BvbnNlSAASZgohY2FsbF9pZGVu",
            "dGl0eV9hcHBsaWNhdGlvbl9zZXJ2aWNlGAogASgLMjkuaW9wLnByb2ZpbGVz",
            "ZXJ2ZXIuQ2FsbElkZW50aXR5QXBwbGljYXRpb25TZXJ2aWNlUmVzcG9uc2VI",
            "ABJZChppbmNvbWluZ19jYWxsX25vdGlmaWNhdGlvbhgLIAEoCzIzLmlvcC5w",
            "cm9maWxlc2VydmVyLkluY29taW5nQ2FsbE5vdGlmaWNhdGlvblJlc3BvbnNl",
            "SAASTQoUYWRkX3JlbGF0ZWRfaWRlbnRpdHkYDCABKAsyLS5pb3AucHJvZmls",
            "ZXNlcnZlci5BZGRSZWxhdGVkSWRlbnRpdHlSZXNwb25zZUgAElMKF3JlbW92",
            "ZV9yZWxhdGVkX2lkZW50aXR5GA0gASgLMjAuaW9wLnByb2ZpbGVzZXJ2ZXIu",
            "UmVtb3ZlUmVsYXRlZElkZW50aXR5UmVzcG9uc2VIABJnCiFzdGFydF9uZWln",
            "aGJvcmhvb2RfaW5pdGlhbGl6YXRpb24YDiABKAsyOi5pb3AucHJvZmlsZXNl",
            "cnZlci5TdGFydE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVzcG9uc2VI",
            "ABJpCiJmaW5pc2hfbmVpZ2hib3Job29kX2luaXRpYWxpemF0aW9uGA8gASgL",
            "MjsuaW9wLnByb2ZpbGVzZXJ2ZXIuRmluaXNoTmVpZ2hib3Job29kSW5pdGlh",
            "bGl6YXRpb25SZXNwb25zZUgAEmgKIm5laWdoYm9yaG9vZF9zaGFyZWRfcHJv",
            "ZmlsZV91cGRhdGUYECABKAsyOi5pb3AucHJvZmlsZXNlcnZlci5OZWlnaGJv",
            "cmhvb2RTaGFyZWRQcm9maWxlVXBkYXRlUmVzcG9uc2VIABJXChlzdG9wX25l",
            "aWdoYm9yaG9vZF91cGRhdGVzGBEgASgLMjIuaW9wLnByb2ZpbGVzZXJ2ZXIu",
            "U3RvcE5laWdoYm9yaG9vZFVwZGF0ZXNSZXNwb25zZUgAEkEKDmNhbl9zdG9y",
            "ZV9kYXRhGBIgASgLMicuaW9wLnByb2ZpbGVzZXJ2ZXIuQ2FuU3RvcmVEYXRh",
            "UmVzcG9uc2VIABJSChdjYW5fcHVibGlzaF9pcG5zX3JlY29yZBgTIAEoCzIv",
            "LmlvcC5wcm9maWxlc2VydmVyLkNhblB1Ymxpc2hJcG5zUmVjb3JkUmVzcG9u",
            "c2VIAEIOCgxSZXNwb25zZVR5cGUiHgoLUGluZ1JlcXVlc3QSDwoHcGF5bG9h",
            "ZBgBIAEoDCIuCgxQaW5nUmVzcG9uc2USDwoHcGF5bG9hZBgBIAEoDBINCgVj",
            "bG9jaxgCIAEoEiISChBMaXN0Um9sZXNSZXF1ZXN0IkEKEUxpc3RSb2xlc1Jl",
            "c3BvbnNlEiwKBXJvbGVzGAEgAygLMh0uaW9wLnByb2ZpbGVzZXJ2ZXIuU2Vy",
            "dmVyUm9sZSJrCgpTZXJ2ZXJSb2xlEi8KBHJvbGUYASABKA4yIS5pb3AucHJv",
            "ZmlsZXNlcnZlci5TZXJ2ZXJSb2xlVHlwZRIMCgRwb3J0GAIgASgNEg4KBmlz",
            "X3RjcBgDIAEoCBIOCgZpc190bHMYBCABKAgiMAoXTGlzdEhvc3RpbmdQbGFu",
            "c1JlcXVlc3QSFQoNaWRlbnRpdHlfdHlwZRgBIAEoCSJJChhMaXN0SG9zdGlu",
            "Z1BsYW5zUmVzcG9uc2USLQoFcGxhbnMYASADKAsyHi5pb3AucHJvZmlsZXNl",
            "cnZlci5Ib3N0aW5nUGxhbiK+AQoLSG9zdGluZ1BsYW4SDwoHcGxhbl9pZBgB",
            "IAEoDBIZChFzZXJ2ZXJfbmV0d29ya19pZBgCIAEoDBIVCg1pZGVudGl0eV90",
            "eXBlGAMgASgJEgsKA2ZlZRgEIAEoBBIeChZiaWxsaW5nX3BlcmlvZF9zZWNv",
            "bmRzGAUgASgNEj8KD3BsYW5fcGFyYW1ldGVycxgJIAMoCzImLmlvcC5wcm9m",
            "aWxlc2VydmVyLk5hbWVTdHJpbmdWYWx1ZVBhaXIiMgoTTmFtZVN0cmluZ1Zh",
            "bHVlUGFpchIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJImQKGFN0YXJ0",
            "Q29udmVyc2F0aW9uUmVxdWVzdBIaChJzdXBwb3J0ZWRfdmVyc2lvbnMYASAD",
            "KAwSEgoKcHVibGljX2tleRgCIAEoDBIYChBjbGllbnRfY2hhbGxlbmdlGAMg",
            "ASgMIm0KGVN0YXJ0Q29udmVyc2F0aW9uUmVzcG9uc2USDwoHdmVyc2lvbhgB",
            "IAEoDBISCgpwdWJsaWNfa2V5GAIgASgMEhEKCWNoYWxsZW5nZRgDIAEoDBIY",
            "ChBjbGllbnRfY2hhbGxlbmdlGAQgASgMIlIKFlJlZ2lzdGVySG9zdGluZ1Jl",
            "cXVlc3QSOAoIY29udHJhY3QYASABKAsyJi5pb3AucHJvZmlsZXNlcnZlci5I",
            "b3N0aW5nUGxhbkNvbnRyYWN0IlMKF1JlZ2lzdGVySG9zdGluZ1Jlc3BvbnNl",
            "EjgKCGNvbnRyYWN0GAEgASgLMiYuaW9wLnByb2ZpbGVzZXJ2ZXIuSG9zdGlu",
            "Z1BsYW5Db250cmFjdCJuChNIb3N0aW5nUGxhbkNvbnRyYWN0Eg8KB3BsYW5f",
            "aWQYASABKAwSGwoTaWRlbnRpdHlfcHVibGljX2tleRgCIAEoDBISCgpzdGFy",
            "dF90aW1lGAMgASgSEhUKDWlkZW50aXR5X3R5cGUYBCABKAkiIwoOQ2hlY2tJ",
            "blJlcXVlc3QSEQoJY2hhbGxlbmdlGAEgASgMIhEKD0NoZWNrSW5SZXNwb25z",
            "ZSIqChVWZXJpZnlJZGVudGl0eVJlcXVlc3QSEQoJY2hhbGxlbmdlGAEgASgM",
            "IhgKFlZlcmlmeUlkZW50aXR5UmVzcG9uc2UilgEKFFVwZGF0ZVByb2ZpbGVS",
            "ZXF1ZXN0EjYKB3Byb2ZpbGUYASABKAsyJS5pb3AucHJvZmlsZXNlcnZlci5Q",
            "cm9maWxlSW5mb3JtYXRpb24SFQoNcHJvZmlsZV9pbWFnZRgCIAEoDBIXCg90",
            "aHVtYm5haWxfaW1hZ2UYAyABKAwSFgoObm9fcHJvcGFnYXRpb24YBCABKAgi",
            "FwoVVXBkYXRlUHJvZmlsZVJlc3BvbnNlIsgBChJQcm9maWxlSW5mb3JtYXRp",
            "b24SDwoHdmVyc2lvbhgBIAEoDBISCgpwdWJsaWNfa2V5GAIgASgMEgwKBHR5",
            "cGUYAyABKAkSDAoEbmFtZRgEIAEoCRIQCghsYXRpdHVkZRgFIAEoDxIRCgls",
            "b25naXR1ZGUYBiABKA8SEgoKZXh0cmFfZGF0YRgHIAEoCRIaChJwcm9maWxl",
            "X2ltYWdlX2hhc2gYCCABKAwSHAoUdGh1bWJuYWlsX2ltYWdlX2hhc2gYCSAB",
            "KAwiZQoYU2lnbmVkUHJvZmlsZUluZm9ybWF0aW9uEjYKB3Byb2ZpbGUYASAB",
            "KAsyJS5pb3AucHJvZmlsZXNlcnZlci5Qcm9maWxlSW5mb3JtYXRpb24SEQoJ",
            "c2lnbmF0dXJlGAIgASgMIm4KHUNhbmNlbEhvc3RpbmdBZ3JlZW1lbnRSZXF1",
            "ZXN0EiYKHnJlZGlyZWN0X3RvX25ld19wcm9maWxlX3NlcnZlchgBIAEoCBIl",
            "Ch1uZXdfcHJvZmlsZV9zZXJ2ZXJfbmV0d29ya19pZBgCIAEoDCIgCh5DYW5j",
            "ZWxIb3N0aW5nQWdyZWVtZW50UmVzcG9uc2UiNQocQXBwbGljYXRpb25TZXJ2",
            "aWNlQWRkUmVxdWVzdBIVCg1zZXJ2aWNlX25hbWVzGAEgAygJIh8KHUFwcGxp",
            "Y2F0aW9uU2VydmljZUFkZFJlc3BvbnNlIjcKH0FwcGxpY2F0aW9uU2Vydmlj",
            "ZVJlbW92ZVJlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJIiIKIEFwcGxp",
            "Y2F0aW9uU2VydmljZVJlbW92ZVJlc3BvbnNlIqEBChxHZXRQcm9maWxlSW5m",
            "b3JtYXRpb25SZXF1ZXN0EhsKE2lkZW50aXR5X25ldHdvcmtfaWQYASABKAwS",
            "HQoVaW5jbHVkZV9wcm9maWxlX2ltYWdlGAIgASgIEh8KF2luY2x1ZGVfdGh1",
            "bWJuYWlsX2ltYWdlGAMgASgIEiQKHGluY2x1ZGVfYXBwbGljYXRpb25fc2Vy",
            "dmljZXMYBCABKAgiqgIKHUdldFByb2ZpbGVJbmZvcm1hdGlvblJlc3BvbnNl",
            "EhEKCWlzX2hvc3RlZBgBIAEoCBImCh5pc190YXJnZXRfcHJvZmlsZV9zZXJ2",
            "ZXJfa25vd24YAiABKAgSKAogdGFyZ2V0X3Byb2ZpbGVfc2VydmVyX25ldHdv",
            "cmtfaWQYAyABKAwSEQoJaXNfb25saW5lGAQgASgIEkMKDnNpZ25lZF9wcm9m",
            "aWxlGAUgASgLMisuaW9wLnByb2ZpbGVzZXJ2ZXIuU2lnbmVkUHJvZmlsZUlu",
            "Zm9ybWF0aW9uEhUKDXByb2ZpbGVfaW1hZ2UYBiABKAwSFwoPdGh1bWJuYWls",
            "X2ltYWdlGAcgASgMEhwKFGFwcGxpY2F0aW9uX3NlcnZpY2VzGAggAygJIloK",
            "JUNhbGxJZGVudGl0eUFwcGxpY2F0aW9uU2VydmljZVJlcXVlc3QSGwoTaWRl",
            "bnRpdHlfbmV0d29ya19pZBgBIAEoDBIUCgxzZXJ2aWNlX25hbWUYAiABKAki",
            "PgomQ2FsbElkZW50aXR5QXBwbGljYXRpb25TZXJ2aWNlUmVzcG9uc2USFAoM",
            "Y2FsbGVyX3Rva2VuGAEgASgMImgKH0luY29taW5nQ2FsbE5vdGlmaWNhdGlv",
            "blJlcXVlc3QSGQoRY2FsbGVyX3B1YmxpY19rZXkYASABKAwSFAoMc2Vydmlj",
            "ZV9uYW1lGAIgASgJEhQKDGNhbGxlZV90b2tlbhgDIAEoDCIiCiBJbmNvbWlu",
            "Z0NhbGxOb3RpZmljYXRpb25SZXNwb25zZSJGCiRBcHBsaWNhdGlvblNlcnZp",
            "Y2VTZW5kTWVzc2FnZVJlcXVlc3QSDQoFdG9rZW4YASABKAwSDwoHbWVzc2Fn",
            "ZRgCIAEoDCI2CiVBcHBsaWNhdGlvblNlcnZpY2VTZW5kTWVzc2FnZVJlc3Bv",
            "bnNlEg0KBXRva2VuGAEgASgMIiEKEENsb3NlQ2FsbFJlcXVlc3QSDQoFdG9r",
            "ZW4YASABKAwiIgoRQ2xvc2VDYWxsUmVzcG9uc2USDQoFdG9rZW4YASABKAwi",
            "SgozQXBwbGljYXRpb25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3RpZmljYXRp",
            "b25SZXF1ZXN0Eg8KB21lc3NhZ2UYASABKAw6AhgBIjoKNEFwcGxpY2F0aW9u",
            "U2VydmljZVJlY2VpdmVNZXNzYWdlTm90aWZpY2F0aW9uUmVzcG9uc2U6AhgB",
            "IhUKE1Byb2ZpbGVTdGF0c1JlcXVlc3QiSgoUUHJvZmlsZVN0YXRzUmVzcG9u",
            "c2USMgoFc3RhdHMYASADKAsyIy5pb3AucHJvZmlsZXNlcnZlci5Qcm9maWxl",
            "U3RhdHNJdGVtIjgKEFByb2ZpbGVTdGF0c0l0ZW0SFQoNaWRlbnRpdHlfdHlw",
            "ZRgBIAEoCRINCgVjb3VudBgCIAEoDSL9AQoUUHJvZmlsZVNlYXJjaFJlcXVl",
            "c3QSGwoTaW5jbHVkZV9ob3N0ZWRfb25seRgBIAEoCBIgChhpbmNsdWRlX3Ro",
            "dW1ibmFpbF9pbWFnZXMYAiABKAgSIQoZbWF4X3Jlc3BvbnNlX3JlY29yZF9j",
            "b3VudBgDIAEoDRIeChZtYXhfdG90YWxfcmVjb3JkX2NvdW50GAQgASgNEgwK",
            "BHR5cGUYBSABKAkSDAoEbmFtZRgGIAEoCRIQCghsYXRpdHVkZRgHIAEoDxIR",
            "Cglsb25naXR1ZGUYCCABKA8SDgoGcmFkaXVzGAkgASgNEhIKCmV4dHJhX2Rh",
            "dGEYCiABKAkirQEKFVByb2ZpbGVTZWFyY2hSZXNwb25zZRIaChJ0b3RhbF9y",
            "ZWNvcmRfY291bnQYASABKA0SIQoZbWF4X3Jlc3BvbnNlX3JlY29yZF9jb3Vu",
            "dBgCIAEoDRIXCg9jb3ZlcmVkX3NlcnZlcnMYAyADKAwSPAoIcHJvZmlsZXMY",
            "BCADKAsyKi5pb3AucHJvZmlsZXNlcnZlci5Qcm9maWxlUXVlcnlJbmZvcm1h",
            "dGlvbiLAAQoXUHJvZmlsZVF1ZXJ5SW5mb3JtYXRpb24SEQoJaXNfaG9zdGVk",
            "GAEgASgIEiEKGWhvc3Rpbmdfc2VydmVyX25ldHdvcmtfaWQYAiABKAwSEQoJ",
            "aXNfb25saW5lGAMgASgIEkMKDnNpZ25lZF9wcm9maWxlGAQgASgLMisuaW9w",
            "LnByb2ZpbGVzZXJ2ZXIuU2lnbmVkUHJvZmlsZUluZm9ybWF0aW9uEhcKD3Ro",
            "dW1ibmFpbF9pbWFnZRgFIAEoDCJGChhQcm9maWxlU2VhcmNoUGFydFJlcXVl",
            "c3QSFAoMcmVjb3JkX2luZGV4GAEgASgNEhQKDHJlY29yZF9jb3VudBgCIAEo",
            "DSKFAQoZUHJvZmlsZVNlYXJjaFBhcnRSZXNwb25zZRIUCgxyZWNvcmRfaW5k",
            "ZXgYASABKA0SFAoMcmVjb3JkX2NvdW50GAIgASgNEjwKCHByb2ZpbGVzGAMg",
            "AygLMiouaW9wLnByb2ZpbGVzZXJ2ZXIuUHJvZmlsZVF1ZXJ5SW5mb3JtYXRp",
            "b24ipAEKGUFkZFJlbGF0ZWRJZGVudGl0eVJlcXVlc3QSRwoQY2FyZF9hcHBs",
            "aWNhdGlvbhgBIAEoCzItLmlvcC5wcm9maWxlc2VydmVyLkNhcmRBcHBsaWNh",
            "dGlvbkluZm9ybWF0aW9uEj4KC3NpZ25lZF9jYXJkGAIgASgLMikuaW9wLnBy",
            "b2ZpbGVzZXJ2ZXIuU2lnbmVkUmVsYXRpb25zaGlwQ2FyZCIcChpBZGRSZWxh",
            "dGVkSWRlbnRpdHlSZXNwb25zZSI2ChxSZW1vdmVSZWxhdGVkSWRlbnRpdHlS",
            "ZXF1ZXN0EhYKDmFwcGxpY2F0aW9uX2lkGAEgASgMIh8KHVJlbW92ZVJlbGF0",
            "ZWRJZGVudGl0eVJlc3BvbnNlIkUKGkNhcmRBcHBsaWNhdGlvbkluZm9ybWF0",
            "aW9uEg8KB2NhcmRfaWQYASABKAwSFgoOYXBwbGljYXRpb25faWQYAiABKAwi",
            "ZQoWU2lnbmVkUmVsYXRpb25zaGlwQ2FyZBIxCgRjYXJkGAEgASgLMiMuaW9w",
            "LnByb2ZpbGVzZXJ2ZXIuUmVsYXRpb25zaGlwQ2FyZBIYChBpc3N1ZXJfc2ln",
            "bmF0dXJlGAIgASgMIqEBChBSZWxhdGlvbnNoaXBDYXJkEg8KB2NhcmRfaWQY",
            "ASABKAwSDwoHdmVyc2lvbhgCIAEoDBIMCgR0eXBlGAMgASgJEhIKCnZhbGlk",
            "X2Zyb20YBCABKBISEAoIdmFsaWRfdG8YBSABKBISGQoRaXNzdWVyX3B1Ymxp",
            "Y19rZXkYBiABKAwSHAoUcmVjaXBpZW50X3B1YmxpY19rZXkYByABKAwipAEK",
            "KkdldElkZW50aXR5UmVsYXRpb25zaGlwc0luZm9ybWF0aW9uUmVxdWVzdBIb",
            "ChNpZGVudGl0eV9uZXR3b3JrX2lkGAEgASgMEhcKD2luY2x1ZGVfaW52YWxp",
            "ZBgCIAEoCBIMCgR0eXBlGAMgASgJEhcKD3NwZWNpZmljX2lzc3VlchgEIAEo",
            "CBIZChFpc3N1ZXJfbmV0d29ya19pZBgFIAEoDCJtCitHZXRJZGVudGl0eVJl",
            "bGF0aW9uc2hpcHNJbmZvcm1hdGlvblJlc3BvbnNlEj4KDXJlbGF0aW9uc2hp",
            "cHMYASADKAsyJy5pb3AucHJvZmlsZXNlcnZlci5JZGVudGl0eVJlbGF0aW9u",
            "c2hpcCK8AQoUSWRlbnRpdHlSZWxhdGlvbnNoaXASRwoQY2FyZF9hcHBsaWNh",
            "dGlvbhgBIAEoCzItLmlvcC5wcm9maWxlc2VydmVyLkNhcmRBcHBsaWNhdGlv",
            "bkluZm9ybWF0aW9uEiIKGmNhcmRfYXBwbGljYXRpb25fc2lnbmF0dXJlGAIg",
            "ASgMEjcKBGNhcmQYAyABKAsyKS5pb3AucHJvZmlsZXNlcnZlci5TaWduZWRS",
            "ZWxhdGlvbnNoaXBDYXJkImwKJlN0YXJ0TmVpZ2hib3Job29kSW5pdGlhbGl6",
            "YXRpb25SZXF1ZXN0EhQKDHByaW1hcnlfcG9ydBgBIAEoDRIYChBzcl9uZWln",
            "aGJvcl9wb3J0GAIgASgNEhIKCmlwX2FkZHJlc3MYAyABKAwiKQonU3RhcnRO",
            "ZWlnaGJvcmhvb2RJbml0aWFsaXphdGlvblJlc3BvbnNlIikKJ0ZpbmlzaE5l",
            "aWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVxdWVzdCIqCihGaW5pc2hOZWln",
            "aGJvcmhvb2RJbml0aWFsaXphdGlvblJlc3BvbnNlImMKJk5laWdoYm9yaG9v",
            "ZFNoYXJlZFByb2ZpbGVVcGRhdGVSZXF1ZXN0EjkKBWl0ZW1zGAEgAygLMiou",
            "aW9wLnByb2ZpbGVzZXJ2ZXIuU2hhcmVkUHJvZmlsZVVwZGF0ZUl0ZW0iKQon",
            "TmVpZ2hib3Job29kU2hhcmVkUHJvZmlsZVVwZGF0ZVJlc3BvbnNlIp4CChdT",
            "aGFyZWRQcm9maWxlVXBkYXRlSXRlbRI2CgNhZGQYASABKAsyJy5pb3AucHJv",
            "ZmlsZXNlcnZlci5TaGFyZWRQcm9maWxlQWRkSXRlbUgAEjwKBmNoYW5nZRgC",
            "IAEoCzIqLmlvcC5wcm9maWxlc2VydmVyLlNoYXJlZFByb2ZpbGVDaGFuZ2VJ",
            "dGVtSAASPAoGZGVsZXRlGAMgASgLMiouaW9wLnByb2ZpbGVzZXJ2ZXIuU2hh",
            "cmVkUHJvZmlsZURlbGV0ZUl0ZW1IABJBCgdyZWZyZXNoGAQgASgLMi4uaW9w",
            "LnByb2ZpbGVzZXJ2ZXIuU2hhcmVkUHJvZmlsZVJlZnJlc2hBbGxJdGVtSABC",
            "DAoKQWN0aW9uVHlwZSJ0ChRTaGFyZWRQcm9maWxlQWRkSXRlbRJDCg5zaWdu",
            "ZWRfcHJvZmlsZRgBIAEoCzIrLmlvcC5wcm9maWxlc2VydmVyLlNpZ25lZFBy",
            "b2ZpbGVJbmZvcm1hdGlvbhIXCg90aHVtYm5haWxfaW1hZ2UYAiABKAwidwoX",
            "U2hhcmVkUHJvZmlsZUNoYW5nZUl0ZW0SQwoOc2lnbmVkX3Byb2ZpbGUYASAB",
            "KAsyKy5pb3AucHJvZmlsZXNlcnZlci5TaWduZWRQcm9maWxlSW5mb3JtYXRp",
            "b24SFwoPdGh1bWJuYWlsX2ltYWdlGAIgASgMIjYKF1NoYXJlZFByb2ZpbGVE",
            "ZWxldGVJdGVtEhsKE2lkZW50aXR5X25ldHdvcmtfaWQYASABKAwiHQobU2hh",
            "cmVkUHJvZmlsZVJlZnJlc2hBbGxJdGVtIiAKHlN0b3BOZWlnaGJvcmhvb2RV",
            "cGRhdGVzUmVxdWVzdCIhCh9TdG9wTmVpZ2hib3Job29kVXBkYXRlc1Jlc3Bv",
            "bnNlIlcKF0NhblByb2ZpbGVTZXJ2ZXJDb250YWN0EhIKCnB1YmxpY19rZXkY",
            "ASABKAwSEgoKaXBfYWRkcmVzcxgCIAEoDBIUCgxwcmltYXJ5X3BvcnQYAyAB",
            "KA0iZAoPQ2FuSWRlbnRpdHlEYXRhEhkKEWhvc3Rpbmdfc2VydmVyX2lkGAEg",
            "ASgMEjYKDmtleV92YWx1ZV9saXN0GAIgAygLMh4uaW9wLnByb2ZpbGVzZXJ2",
            "ZXIuQ2FuS2V5VmFsdWUitQEKC0NhbktleVZhbHVlEgsKA2tleRgBIAEoCRIW",
            "CgxiaW5hcnlfdmFsdWUYAiABKAxIABIWCgx1aW50MzJfdmFsdWUYAyABKAVI",
            "ABIWCgx1aW50NjRfdmFsdWUYBCABKANIABIWCgxkb3VibGVfdmFsdWUYBSAB",
            "KAFIABIUCgpib29sX3ZhbHVlGAYgASgISAASFgoMc3RyaW5nX3ZhbHVlGAcg",
            "ASgJSABCCwoJVmFsdWVUeXBlIkcKE0NhblN0b3JlRGF0YVJlcXVlc3QSMAoE",
            "ZGF0YRgBIAEoCzIiLmlvcC5wcm9maWxlc2VydmVyLkNhbklkZW50aXR5RGF0",
            "YSIkChRDYW5TdG9yZURhdGFSZXNwb25zZRIMCgRoYXNoGAEgASgMIkQKG0Nh",
            "blB1Ymxpc2hJcG5zUmVjb3JkUmVxdWVzdBIlCgZyZWNvcmQYASABKAsyFS5p",
            "b3AuY2FuLkNhbklwbnNFbnRyeSIeChxDYW5QdWJsaXNoSXBuc1JlY29yZFJl",
            "c3BvbnNlKmwKDlNlcnZlclJvbGVUeXBlEgsKB1BSSU1BUlkQABIPCgtTUl9O",
            "RUlHSEJPUhACEhMKD0NMX05PTl9DVVNUT01FUhAGEg8KC0NMX0NVU1RPTUVS",
            "EAcSFgoOQ0xfQVBQX1NFUlZJQ0UQCRoCCAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Iop.Shared.IopSharedReflection.Descriptor, global::Iop.Can.IopCanReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Profileserver.ServerRoleType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.MessageWithHeader), global::Iop.Profileserver.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.Message), global::Iop.Profileserver.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.Request), global::Iop.Profileserver.Request.Parser, new[]{ "SingleRequest", "ConversationRequest" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.Response), global::Iop.Profileserver.Response.Parser, new[]{ "Status", "Timestamp", "Details", "SingleResponse", "ConversationResponse" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SingleRequest), global::Iop.Profileserver.SingleRequest.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHostingPlans", "GetProfileInformation", "ProfileSearch", "ProfileSearchPart", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification", "ProfileStats", "GetIdentityRelationshipsInformation", "CloseCall" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SingleResponse), global::Iop.Profileserver.SingleResponse.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHostingPlans", "GetProfileInformation", "ProfileSearch", "ProfileSearchPart", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification", "ProfileStats", "GetIdentityRelationshipsInformation", "CloseCall" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ConversationRequest), global::Iop.Profileserver.ConversationRequest.Parser, new[]{ "Signature", "Start", "RegisterHosting", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHostingAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification", "AddRelatedIdentity", "RemoveRelatedIdentity", "StartNeighborhoodInitialization", "FinishNeighborhoodInitialization", "NeighborhoodSharedProfileUpdate", "StopNeighborhoodUpdates", "CanStoreData", "CanPublishIpnsRecord" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ConversationResponse), global::Iop.Profileserver.ConversationResponse.Parser, new[]{ "Signature", "Start", "RegisterHosting", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHostingAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification", "AddRelatedIdentity", "RemoveRelatedIdentity", "StartNeighborhoodInitialization", "FinishNeighborhoodInitialization", "NeighborhoodSharedProfileUpdate", "StopNeighborhoodUpdates", "CanStoreData", "CanPublishIpnsRecord" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.PingRequest), global::Iop.Profileserver.PingRequest.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.PingResponse), global::Iop.Profileserver.PingResponse.Parser, new[]{ "Payload", "Clock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ListRolesRequest), global::Iop.Profileserver.ListRolesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ListRolesResponse), global::Iop.Profileserver.ListRolesResponse.Parser, new[]{ "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ServerRole), global::Iop.Profileserver.ServerRole.Parser, new[]{ "Role", "Port", "IsTcp", "IsTls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ListHostingPlansRequest), global::Iop.Profileserver.ListHostingPlansRequest.Parser, new[]{ "IdentityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ListHostingPlansResponse), global::Iop.Profileserver.ListHostingPlansResponse.Parser, new[]{ "Plans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.HostingPlan), global::Iop.Profileserver.HostingPlan.Parser, new[]{ "PlanId", "ServerNetworkId", "IdentityType", "Fee", "BillingPeriodSeconds", "PlanParameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.NameStringValuePair), global::Iop.Profileserver.NameStringValuePair.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StartConversationRequest), global::Iop.Profileserver.StartConversationRequest.Parser, new[]{ "SupportedVersions", "PublicKey", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StartConversationResponse), global::Iop.Profileserver.StartConversationResponse.Parser, new[]{ "Version", "PublicKey", "Challenge", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.RegisterHostingRequest), global::Iop.Profileserver.RegisterHostingRequest.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.RegisterHostingResponse), global::Iop.Profileserver.RegisterHostingResponse.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.HostingPlanContract), global::Iop.Profileserver.HostingPlanContract.Parser, new[]{ "PlanId", "IdentityPublicKey", "StartTime", "IdentityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CheckInRequest), global::Iop.Profileserver.CheckInRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CheckInResponse), global::Iop.Profileserver.CheckInResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.VerifyIdentityRequest), global::Iop.Profileserver.VerifyIdentityRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.VerifyIdentityResponse), global::Iop.Profileserver.VerifyIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.UpdateProfileRequest), global::Iop.Profileserver.UpdateProfileRequest.Parser, new[]{ "Profile", "ProfileImage", "ThumbnailImage", "NoPropagation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.UpdateProfileResponse), global::Iop.Profileserver.UpdateProfileResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileInformation), global::Iop.Profileserver.ProfileInformation.Parser, new[]{ "Version", "PublicKey", "Type", "Name", "Latitude", "Longitude", "ExtraData", "ProfileImageHash", "ThumbnailImageHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SignedProfileInformation), global::Iop.Profileserver.SignedProfileInformation.Parser, new[]{ "Profile", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CancelHostingAgreementRequest), global::Iop.Profileserver.CancelHostingAgreementRequest.Parser, new[]{ "RedirectToNewProfileServer", "NewProfileServerNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CancelHostingAgreementResponse), global::Iop.Profileserver.CancelHostingAgreementResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceAddRequest), global::Iop.Profileserver.ApplicationServiceAddRequest.Parser, new[]{ "ServiceNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceAddResponse), global::Iop.Profileserver.ApplicationServiceAddResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceRemoveRequest), global::Iop.Profileserver.ApplicationServiceRemoveRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceRemoveResponse), global::Iop.Profileserver.ApplicationServiceRemoveResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.GetProfileInformationRequest), global::Iop.Profileserver.GetProfileInformationRequest.Parser, new[]{ "IdentityNetworkId", "IncludeProfileImage", "IncludeThumbnailImage", "IncludeApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.GetProfileInformationResponse), global::Iop.Profileserver.GetProfileInformationResponse.Parser, new[]{ "IsHosted", "IsTargetProfileServerKnown", "TargetProfileServerNetworkId", "IsOnline", "SignedProfile", "ProfileImage", "ThumbnailImage", "ApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CallIdentityApplicationServiceRequest), global::Iop.Profileserver.CallIdentityApplicationServiceRequest.Parser, new[]{ "IdentityNetworkId", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CallIdentityApplicationServiceResponse), global::Iop.Profileserver.CallIdentityApplicationServiceResponse.Parser, new[]{ "CallerToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.IncomingCallNotificationRequest), global::Iop.Profileserver.IncomingCallNotificationRequest.Parser, new[]{ "CallerPublicKey", "ServiceName", "CalleeToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.IncomingCallNotificationResponse), global::Iop.Profileserver.IncomingCallNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceSendMessageRequest), global::Iop.Profileserver.ApplicationServiceSendMessageRequest.Parser, new[]{ "Token", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceSendMessageResponse), global::Iop.Profileserver.ApplicationServiceSendMessageResponse.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CloseCallRequest), global::Iop.Profileserver.CloseCallRequest.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CloseCallResponse), global::Iop.Profileserver.CloseCallResponse.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest), global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse), global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileStatsRequest), global::Iop.Profileserver.ProfileStatsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileStatsResponse), global::Iop.Profileserver.ProfileStatsResponse.Parser, new[]{ "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileStatsItem), global::Iop.Profileserver.ProfileStatsItem.Parser, new[]{ "IdentityType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileSearchRequest), global::Iop.Profileserver.ProfileSearchRequest.Parser, new[]{ "IncludeHostedOnly", "IncludeThumbnailImages", "MaxResponseRecordCount", "MaxTotalRecordCount", "Type", "Name", "Latitude", "Longitude", "Radius", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileSearchResponse), global::Iop.Profileserver.ProfileSearchResponse.Parser, new[]{ "TotalRecordCount", "MaxResponseRecordCount", "CoveredServers", "Profiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileQueryInformation), global::Iop.Profileserver.ProfileQueryInformation.Parser, new[]{ "IsHosted", "HostingServerNetworkId", "IsOnline", "SignedProfile", "ThumbnailImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileSearchPartRequest), global::Iop.Profileserver.ProfileSearchPartRequest.Parser, new[]{ "RecordIndex", "RecordCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.ProfileSearchPartResponse), global::Iop.Profileserver.ProfileSearchPartResponse.Parser, new[]{ "RecordIndex", "RecordCount", "Profiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.AddRelatedIdentityRequest), global::Iop.Profileserver.AddRelatedIdentityRequest.Parser, new[]{ "CardApplication", "SignedCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.AddRelatedIdentityResponse), global::Iop.Profileserver.AddRelatedIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.RemoveRelatedIdentityRequest), global::Iop.Profileserver.RemoveRelatedIdentityRequest.Parser, new[]{ "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.RemoveRelatedIdentityResponse), global::Iop.Profileserver.RemoveRelatedIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CardApplicationInformation), global::Iop.Profileserver.CardApplicationInformation.Parser, new[]{ "CardId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SignedRelationshipCard), global::Iop.Profileserver.SignedRelationshipCard.Parser, new[]{ "Card", "IssuerSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.RelationshipCard), global::Iop.Profileserver.RelationshipCard.Parser, new[]{ "CardId", "Version", "Type", "ValidFrom", "ValidTo", "IssuerPublicKey", "RecipientPublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest), global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest.Parser, new[]{ "IdentityNetworkId", "IncludeInvalid", "Type", "SpecificIssuer", "IssuerNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse), global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse.Parser, new[]{ "Relationships" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.IdentityRelationship), global::Iop.Profileserver.IdentityRelationship.Parser, new[]{ "CardApplication", "CardApplicationSignature", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StartNeighborhoodInitializationRequest), global::Iop.Profileserver.StartNeighborhoodInitializationRequest.Parser, new[]{ "PrimaryPort", "SrNeighborPort", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StartNeighborhoodInitializationResponse), global::Iop.Profileserver.StartNeighborhoodInitializationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.FinishNeighborhoodInitializationRequest), global::Iop.Profileserver.FinishNeighborhoodInitializationRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.FinishNeighborhoodInitializationResponse), global::Iop.Profileserver.FinishNeighborhoodInitializationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest), global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse), global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SharedProfileUpdateItem), global::Iop.Profileserver.SharedProfileUpdateItem.Parser, new[]{ "Add", "Change", "Delete", "Refresh" }, new[]{ "ActionType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SharedProfileAddItem), global::Iop.Profileserver.SharedProfileAddItem.Parser, new[]{ "SignedProfile", "ThumbnailImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SharedProfileChangeItem), global::Iop.Profileserver.SharedProfileChangeItem.Parser, new[]{ "SignedProfile", "ThumbnailImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SharedProfileDeleteItem), global::Iop.Profileserver.SharedProfileDeleteItem.Parser, new[]{ "IdentityNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.SharedProfileRefreshAllItem), global::Iop.Profileserver.SharedProfileRefreshAllItem.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StopNeighborhoodUpdatesRequest), global::Iop.Profileserver.StopNeighborhoodUpdatesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.StopNeighborhoodUpdatesResponse), global::Iop.Profileserver.StopNeighborhoodUpdatesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanProfileServerContact), global::Iop.Profileserver.CanProfileServerContact.Parser, new[]{ "PublicKey", "IpAddress", "PrimaryPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanIdentityData), global::Iop.Profileserver.CanIdentityData.Parser, new[]{ "HostingServerId", "KeyValueList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanKeyValue), global::Iop.Profileserver.CanKeyValue.Parser, new[]{ "Key", "BinaryValue", "Uint32Value", "Uint64Value", "DoubleValue", "BoolValue", "StringValue" }, new[]{ "ValueType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanStoreDataRequest), global::Iop.Profileserver.CanStoreDataRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanStoreDataResponse), global::Iop.Profileserver.CanStoreDataResponse.Parser, new[]{ "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanPublishIpnsRecordRequest), global::Iop.Profileserver.CanPublishIpnsRecordRequest.Parser, new[]{ "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Profileserver.CanPublishIpnsRecordResponse), global::Iop.Profileserver.CanPublishIpnsRecordResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Known server roles.
  /// </summary>
  public enum ServerRoleType {
    /// <summary>
    /// Primary Interface server role.
    /// </summary>
    [pbr::OriginalName("PRIMARY")] Primary = 0,
    /// <summary>
    /// Neighbors Interface server role.
    /// </summary>
    [pbr::OriginalName("SR_NEIGHBOR")] SrNeighbor = 2,
    /// <summary>
    /// Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_NON_CUSTOMER")] ClNonCustomer = 6,
    /// <summary>
    /// Non Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_CUSTOMER")] ClCustomer = 7,
    /// <summary>
    /// Application Service Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_APP_SERVICE")] ClAppService = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  /// There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  /// with body size 4,660 bytes would be:
  ///
  ///   0D 34 12 00 00
  ///
  /// where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  /// this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4,660 decimal.
  /// Thus the total number of bytes sent over the wire for this message would be 4,665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    /// Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Profileserver.Message body_;
    /// <summary>
    /// Maximum size of the whole message is 1,048,576 bytes, which means the maximal value in the header is 1,048,571.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Profileserver.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Profileserver.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    /// <summary>
    ///  * a new request,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Profileserver.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    /// <summary>
    ///  * or response to a previous request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Profileserver.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Profileserver.Request subBuilder = new global::Iop.Profileserver.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.Response subBuilder = new global::Iop.Profileserver.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Every conversation starts with a request of a requestor.
  /// This can be either a single request, for which it is expected to receive a single response,
  /// or this can be part of a longer conversation between the peers.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest.Clone();
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "single_request" field.</summary>
    public const int SingleRequestFieldNumber = 1;
    /// <summary>
    /// Single requests are requests that are supposed to be sent without further context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SingleRequest SingleRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest ? (global::Iop.Profileserver.SingleRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleRequest;
      }
    }

    /// <summary>Field number for the "conversation_request" field.</summary>
    public const int ConversationRequestFieldNumber = 2;
    /// <summary>
    /// Conversation requests form a session with a context that has to be maintained by peers in order to correctly interpret the messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ConversationRequest ConversationRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest ? (global::Iop.Profileserver.ConversationRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationRequest;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleRequest = 1,
      ConversationRequest = 2,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleRequest, other.SingleRequest)) return false;
      if (!object.Equals(ConversationRequest, other.ConversationRequest)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) hash ^= SingleRequest.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) hash ^= ConversationRequest.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ConversationRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest;
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Profileserver.SingleRequest subBuilder = new global::Iop.Profileserver.SingleRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
              subBuilder.MergeFrom(SingleRequest);
            }
            input.ReadMessage(subBuilder);
            SingleRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Profileserver.ConversationRequest subBuilder = new global::Iop.Profileserver.ConversationRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
              subBuilder.MergeFrom(ConversationRequest);
            }
            input.ReadMessage(subBuilder);
            ConversationRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse.Clone();
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Shared.Status status_ = 0;
    /// <summary>
    /// Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Shared.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    /// TimestampType. If status is ERROR_BANNED, this field specifies when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    /// In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_response" field.</summary>
    public const int SingleResponseFieldNumber = 8;
    /// <summary>
    /// Responses to single requests are sent as single responses,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SingleResponse SingleResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse ? (global::Iop.Profileserver.SingleResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleResponse;
      }
    }

    /// <summary>Field number for the "conversation_response" field.</summary>
    public const int ConversationResponseFieldNumber = 9;
    /// <summary>
    /// responses to conversation requests are sent as conversation responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ConversationResponse ConversationResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse ? (global::Iop.Profileserver.ConversationResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationResponse;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleResponse = 8,
      ConversationResponse = 9,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(SingleResponse, other.SingleResponse)) return false;
      if (!object.Equals(ConversationResponse, other.ConversationResponse)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) hash ^= SingleResponse.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) hash ^= ConversationResponse.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        output.WriteRawTag(74);
        output.WriteMessage(ConversationResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse;
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Shared.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 66: {
            global::Iop.Profileserver.SingleResponse subBuilder = new global::Iop.Profileserver.SingleResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
              subBuilder.MergeFrom(SingleResponse);
            }
            input.ReadMessage(subBuilder);
            SingleResponse = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Profileserver.ConversationResponse subBuilder = new global::Iop.Profileserver.ConversationResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
              subBuilder.MergeFrom(ConversationResponse);
            }
            input.ReadMessage(subBuilder);
            ConversationResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Single requests live on their own without any session or context. 
  /// It is always possible to process a single request without any additional informaiton.
  /// </summary>
  public sealed partial class SingleRequest : pb::IMessage<SingleRequest> {
    private static readonly pb::MessageParser<SingleRequest> _parser = new pb::MessageParser<SingleRequest>(() => new SingleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest(SingleRequest other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case RequestTypeOneofCase.ListHostingPlans:
          ListHostingPlans = other.ListHostingPlans.Clone();
          break;
        case RequestTypeOneofCase.GetProfileInformation:
          GetProfileInformation = other.GetProfileInformation.Clone();
          break;
        case RequestTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch.Clone();
          break;
        case RequestTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
        case RequestTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats.Clone();
          break;
        case RequestTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation.Clone();
          break;
        case RequestTypeOneofCase.CloseCall:
          CloseCall = other.CloseCall.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest Clone() {
      return new SingleRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    /// VersionType. Protocol version specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.PingRequest Ping {
      get { return requestTypeCase_ == RequestTypeOneofCase.Ping ? (global::Iop.Profileserver.PingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "list_roles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ListRolesRequest ListRoles {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListRoles ? (global::Iop.Profileserver.ListRolesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "list_hosting_plans" field.</summary>
    public const int ListHostingPlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ListHostingPlansRequest ListHostingPlans {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListHostingPlans ? (global::Iop.Profileserver.ListHostingPlansRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListHostingPlans;
      }
    }

    /// <summary>Field number for the "get_profile_information" field.</summary>
    public const int GetProfileInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.GetProfileInformationRequest GetProfileInformation {
      get { return requestTypeCase_ == RequestTypeOneofCase.GetProfileInformation ? (global::Iop.Profileserver.GetProfileInformationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.GetProfileInformation;
      }
    }

    /// <summary>Field number for the "profile_search" field.</summary>
    public const int ProfileSearchFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileSearchRequest ProfileSearch {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileSearch ? (global::Iop.Profileserver.ProfileSearchRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileSearch;
      }
    }

    /// <summary>Field number for the "profile_search_part" field.</summary>
    public const int ProfileSearchPartFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileSearchPartRequest ProfileSearchPart {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart ? (global::Iop.Profileserver.ProfileSearchPartRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileSearchPart;
      }
    }

    /// <summary>Field number for the "application_service_send_message" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceSendMessageRequest ApplicationServiceSendMessage {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Profileserver.ApplicationServiceSendMessageRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "application_service_receive_message_notification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 9;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest ApplicationServiceReceiveMessageNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    /// <summary>Field number for the "profile_stats" field.</summary>
    public const int ProfileStatsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileStatsRequest ProfileStats {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileStats ? (global::Iop.Profileserver.ProfileStatsRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileStats;
      }
    }

    /// <summary>Field number for the "get_identity_relationships_information" field.</summary>
    public const int GetIdentityRelationshipsInformationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest GetIdentityRelationshipsInformation {
      get { return requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation ? (global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.GetIdentityRelationshipsInformation;
      }
    }

    /// <summary>Field number for the "close_call" field.</summary>
    public const int CloseCallFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CloseCallRequest CloseCall {
      get { return requestTypeCase_ == RequestTypeOneofCase.CloseCall ? (global::Iop.Profileserver.CloseCallRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CloseCall;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHostingPlans = 4,
      GetProfileInformation = 5,
      ProfileSearch = 6,
      ProfileSearchPart = 7,
      ApplicationServiceSendMessage = 8,
      ApplicationServiceReceiveMessageNotification = 9,
      ProfileStats = 10,
      GetIdentityRelationshipsInformation = 11,
      CloseCall = 12,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHostingPlans, other.ListHostingPlans)) return false;
      if (!object.Equals(GetProfileInformation, other.GetProfileInformation)) return false;
      if (!object.Equals(ProfileSearch, other.ProfileSearch)) return false;
      if (!object.Equals(ProfileSearchPart, other.ProfileSearchPart)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (!object.Equals(ProfileStats, other.ProfileStats)) return false;
      if (!object.Equals(GetIdentityRelationshipsInformation, other.GetIdentityRelationshipsInformation)) return false;
      if (!object.Equals(CloseCall, other.CloseCall)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListHostingPlans) hash ^= ListHostingPlans.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.GetProfileInformation) hash ^= GetProfileInformation.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) hash ^= ProfileSearch.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) hash ^= ProfileSearchPart.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) hash ^= ProfileStats.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) hash ^= GetIdentityRelationshipsInformation.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CloseCall) hash ^= CloseCall.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHostingPlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHostingPlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetProfileInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetProfileInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
        output.WriteRawTag(50);
        output.WriteMessage(ProfileSearch);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
        output.WriteRawTag(58);
        output.WriteMessage(ProfileSearchPart);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
        output.WriteRawTag(82);
        output.WriteMessage(ProfileStats);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
        output.WriteRawTag(90);
        output.WriteMessage(GetIdentityRelationshipsInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CloseCall) {
        output.WriteRawTag(98);
        output.WriteMessage(CloseCall);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHostingPlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHostingPlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetProfileInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetProfileInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearch);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearchPart);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileStats);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityRelationshipsInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CloseCall) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseCall);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case RequestTypeOneofCase.ListHostingPlans:
          ListHostingPlans = other.ListHostingPlans;
          break;
        case RequestTypeOneofCase.GetProfileInformation:
          GetProfileInformation = other.GetProfileInformation;
          break;
        case RequestTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch;
          break;
        case RequestTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart;
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
        case RequestTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats;
          break;
        case RequestTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation;
          break;
        case RequestTypeOneofCase.CloseCall:
          CloseCall = other.CloseCall;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Profileserver.PingRequest subBuilder = new global::Iop.Profileserver.PingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.ListRolesRequest subBuilder = new global::Iop.Profileserver.ListRolesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Profileserver.ListHostingPlansRequest subBuilder = new global::Iop.Profileserver.ListHostingPlansRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListHostingPlans) {
              subBuilder.MergeFrom(ListHostingPlans);
            }
            input.ReadMessage(subBuilder);
            ListHostingPlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Profileserver.GetProfileInformationRequest subBuilder = new global::Iop.Profileserver.GetProfileInformationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.GetProfileInformation) {
              subBuilder.MergeFrom(GetProfileInformation);
            }
            input.ReadMessage(subBuilder);
            GetProfileInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Profileserver.ProfileSearchRequest subBuilder = new global::Iop.Profileserver.ProfileSearchRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
              subBuilder.MergeFrom(ProfileSearch);
            }
            input.ReadMessage(subBuilder);
            ProfileSearch = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Profileserver.ProfileSearchPartRequest subBuilder = new global::Iop.Profileserver.ProfileSearchPartRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
              subBuilder.MergeFrom(ProfileSearchPart);
            }
            input.ReadMessage(subBuilder);
            ProfileSearchPart = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Profileserver.ApplicationServiceSendMessageRequest subBuilder = new global::Iop.Profileserver.ApplicationServiceSendMessageRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest subBuilder = new global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Profileserver.ProfileStatsRequest subBuilder = new global::Iop.Profileserver.ProfileStatsRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
              subBuilder.MergeFrom(ProfileStats);
            }
            input.ReadMessage(subBuilder);
            ProfileStats = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest subBuilder = new global::Iop.Profileserver.GetIdentityRelationshipsInformationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
              subBuilder.MergeFrom(GetIdentityRelationshipsInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityRelationshipsInformation = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Profileserver.CloseCallRequest subBuilder = new global::Iop.Profileserver.CloseCallRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CloseCall) {
              subBuilder.MergeFrom(CloseCall);
            }
            input.ReadMessage(subBuilder);
            CloseCall = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Single response is a reaction to single request. 
  /// </summary>
  public sealed partial class SingleResponse : pb::IMessage<SingleResponse> {
    private static readonly pb::MessageParser<SingleResponse> _parser = new pb::MessageParser<SingleResponse>(() => new SingleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse(SingleResponse other) : this() {
      version_ = other.version_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case ResponseTypeOneofCase.ListHostingPlans:
          ListHostingPlans = other.ListHostingPlans.Clone();
          break;
        case ResponseTypeOneofCase.GetProfileInformation:
          GetProfileInformation = other.GetProfileInformation.Clone();
          break;
        case ResponseTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch.Clone();
          break;
        case ResponseTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
        case ResponseTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats.Clone();
          break;
        case ResponseTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation.Clone();
          break;
        case ResponseTypeOneofCase.CloseCall:
          CloseCall = other.CloseCall.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse Clone() {
      return new SingleResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    /// VersionType. See 'SingleRequest.version'. The version of response can be different than the version in request, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.PingResponse Ping {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Ping ? (global::Iop.Profileserver.PingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "list_roles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ListRolesResponse ListRoles {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListRoles ? (global::Iop.Profileserver.ListRolesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "list_hosting_plans" field.</summary>
    public const int ListHostingPlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ListHostingPlansResponse ListHostingPlans {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListHostingPlans ? (global::Iop.Profileserver.ListHostingPlansResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListHostingPlans;
      }
    }

    /// <summary>Field number for the "get_profile_information" field.</summary>
    public const int GetProfileInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.GetProfileInformationResponse GetProfileInformation {
      get { return responseTypeCase_ == ResponseTypeOneofCase.GetProfileInformation ? (global::Iop.Profileserver.GetProfileInformationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.GetProfileInformation;
      }
    }

    /// <summary>Field number for the "profile_search" field.</summary>
    public const int ProfileSearchFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileSearchResponse ProfileSearch {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch ? (global::Iop.Profileserver.ProfileSearchResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileSearch;
      }
    }

    /// <summary>Field number for the "profile_search_part" field.</summary>
    public const int ProfileSearchPartFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileSearchPartResponse ProfileSearchPart {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart ? (global::Iop.Profileserver.ProfileSearchPartResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileSearchPart;
      }
    }

    /// <summary>Field number for the "application_service_send_message" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceSendMessageResponse ApplicationServiceSendMessage {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Profileserver.ApplicationServiceSendMessageResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "application_service_receive_message_notification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 9;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse ApplicationServiceReceiveMessageNotification {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    /// <summary>Field number for the "profile_stats" field.</summary>
    public const int ProfileStatsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileStatsResponse ProfileStats {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileStats ? (global::Iop.Profileserver.ProfileStatsResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileStats;
      }
    }

    /// <summary>Field number for the "get_identity_relationships_information" field.</summary>
    public const int GetIdentityRelationshipsInformationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse GetIdentityRelationshipsInformation {
      get { return responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation ? (global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.GetIdentityRelationshipsInformation;
      }
    }

    /// <summary>Field number for the "close_call" field.</summary>
    public const int CloseCallFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CloseCallResponse CloseCall {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CloseCall ? (global::Iop.Profileserver.CloseCallResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CloseCall;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHostingPlans = 4,
      GetProfileInformation = 5,
      ProfileSearch = 6,
      ProfileSearchPart = 7,
      ApplicationServiceSendMessage = 8,
      ApplicationServiceReceiveMessageNotification = 9,
      ProfileStats = 10,
      GetIdentityRelationshipsInformation = 11,
      CloseCall = 12,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHostingPlans, other.ListHostingPlans)) return false;
      if (!object.Equals(GetProfileInformation, other.GetProfileInformation)) return false;
      if (!object.Equals(ProfileSearch, other.ProfileSearch)) return false;
      if (!object.Equals(ProfileSearchPart, other.ProfileSearchPart)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (!object.Equals(ProfileStats, other.ProfileStats)) return false;
      if (!object.Equals(GetIdentityRelationshipsInformation, other.GetIdentityRelationshipsInformation)) return false;
      if (!object.Equals(CloseCall, other.CloseCall)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHostingPlans) hash ^= ListHostingPlans.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.GetProfileInformation) hash ^= GetProfileInformation.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) hash ^= ProfileSearch.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) hash ^= ProfileSearchPart.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) hash ^= ProfileStats.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) hash ^= GetIdentityRelationshipsInformation.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CloseCall) hash ^= CloseCall.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHostingPlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHostingPlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetProfileInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetProfileInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
        output.WriteRawTag(50);
        output.WriteMessage(ProfileSearch);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
        output.WriteRawTag(58);
        output.WriteMessage(ProfileSearchPart);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
        output.WriteRawTag(82);
        output.WriteMessage(ProfileStats);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
        output.WriteRawTag(90);
        output.WriteMessage(GetIdentityRelationshipsInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CloseCall) {
        output.WriteRawTag(98);
        output.WriteMessage(CloseCall);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHostingPlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHostingPlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetProfileInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetProfileInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearch);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearchPart);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileStats);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityRelationshipsInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CloseCall) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseCall);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case ResponseTypeOneofCase.ListHostingPlans:
          ListHostingPlans = other.ListHostingPlans;
          break;
        case ResponseTypeOneofCase.GetProfileInformation:
          GetProfileInformation = other.GetProfileInformation;
          break;
        case ResponseTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch;
          break;
        case ResponseTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart;
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
        case ResponseTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats;
          break;
        case ResponseTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation;
          break;
        case ResponseTypeOneofCase.CloseCall:
          CloseCall = other.CloseCall;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Profileserver.PingResponse subBuilder = new global::Iop.Profileserver.PingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.ListRolesResponse subBuilder = new global::Iop.Profileserver.ListRolesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Profileserver.ListHostingPlansResponse subBuilder = new global::Iop.Profileserver.ListHostingPlansResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListHostingPlans) {
              subBuilder.MergeFrom(ListHostingPlans);
            }
            input.ReadMessage(subBuilder);
            ListHostingPlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Profileserver.GetProfileInformationResponse subBuilder = new global::Iop.Profileserver.GetProfileInformationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.GetProfileInformation) {
              subBuilder.MergeFrom(GetProfileInformation);
            }
            input.ReadMessage(subBuilder);
            GetProfileInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Profileserver.ProfileSearchResponse subBuilder = new global::Iop.Profileserver.ProfileSearchResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
              subBuilder.MergeFrom(ProfileSearch);
            }
            input.ReadMessage(subBuilder);
            ProfileSearch = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Profileserver.ProfileSearchPartResponse subBuilder = new global::Iop.Profileserver.ProfileSearchPartResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
              subBuilder.MergeFrom(ProfileSearchPart);
            }
            input.ReadMessage(subBuilder);
            ProfileSearchPart = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Profileserver.ApplicationServiceSendMessageResponse subBuilder = new global::Iop.Profileserver.ApplicationServiceSendMessageResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse subBuilder = new global::Iop.Profileserver.ApplicationServiceReceiveMessageNotificationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Profileserver.ProfileStatsResponse subBuilder = new global::Iop.Profileserver.ProfileStatsResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
              subBuilder.MergeFrom(ProfileStats);
            }
            input.ReadMessage(subBuilder);
            ProfileStats = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse subBuilder = new global::Iop.Profileserver.GetIdentityRelationshipsInformationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
              subBuilder.MergeFrom(GetIdentityRelationshipsInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityRelationshipsInformation = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Profileserver.CloseCallResponse subBuilder = new global::Iop.Profileserver.CloseCallResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CloseCall) {
              subBuilder.MergeFrom(CloseCall);
            }
            input.ReadMessage(subBuilder);
            CloseCall = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Conversation requests live in a session with a context that is important for the interpretation of the requests.
  /// Unlike single requests, the order of messages is very important as each message may change the session context.
  /// </summary>
  public sealed partial class ConversationRequest : pb::IMessage<ConversationRequest> {
    private static readonly pb::MessageParser<ConversationRequest> _parser = new pb::MessageParser<ConversationRequest>(() => new ConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest(ConversationRequest other) : this() {
      signature_ = other.signature_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case RequestTypeOneofCase.RegisterHosting:
          RegisterHosting = other.RegisterHosting.Clone();
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case RequestTypeOneofCase.CancelHostingAgreement:
          CancelHostingAgreement = other.CancelHostingAgreement.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
        case RequestTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity.Clone();
          break;
        case RequestTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity.Clone();
          break;
        case RequestTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization.Clone();
          break;
        case RequestTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization.Clone();
          break;
        case RequestTypeOneofCase.NeighborhoodSharedProfileUpdate:
          NeighborhoodSharedProfileUpdate = other.NeighborhoodSharedProfileUpdate.Clone();
          break;
        case RequestTypeOneofCase.StopNeighborhoodUpdates:
          StopNeighborhoodUpdates = other.StopNeighborhoodUpdates.Clone();
          break;
        case RequestTypeOneofCase.CanStoreData:
          CanStoreData = other.CanStoreData.Clone();
          break;
        case RequestTypeOneofCase.CanPublishIpnsRecord:
          CanPublishIpnsRecord = other.CanPublishIpnsRecord.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest Clone() {
      return new ConversationRequest(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Optional (request specific) signature that signs the Protobuf binary form of the included request body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    /// Request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StartConversationRequest Start {
      get { return requestTypeCase_ == RequestTypeOneofCase.Start ? (global::Iop.Profileserver.StartConversationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "register_hosting" field.</summary>
    public const int RegisterHostingFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.RegisterHostingRequest RegisterHosting {
      get { return requestTypeCase_ == RequestTypeOneofCase.RegisterHosting ? (global::Iop.Profileserver.RegisterHostingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.RegisterHosting;
      }
    }

    /// <summary>Field number for the "check_in" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CheckInRequest CheckIn {
      get { return requestTypeCase_ == RequestTypeOneofCase.CheckIn ? (global::Iop.Profileserver.CheckInRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verify_identity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.VerifyIdentityRequest VerifyIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity ? (global::Iop.Profileserver.VerifyIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "update_profile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.UpdateProfileRequest UpdateProfile {
      get { return requestTypeCase_ == RequestTypeOneofCase.UpdateProfile ? (global::Iop.Profileserver.UpdateProfileRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancel_hosting_agreement" field.</summary>
    public const int CancelHostingAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CancelHostingAgreementRequest CancelHostingAgreement {
      get { return requestTypeCase_ == RequestTypeOneofCase.CancelHostingAgreement ? (global::Iop.Profileserver.CancelHostingAgreementRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CancelHostingAgreement;
      }
    }

    /// <summary>Field number for the "application_service_add" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceAddRequest ApplicationServiceAdd {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Profileserver.ApplicationServiceAddRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "application_service_remove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceRemoveRequest ApplicationServiceRemove {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Profileserver.ApplicationServiceRemoveRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "call_identity_application_service" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CallIdentityApplicationServiceRequest CallIdentityApplicationService {
      get { return requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Profileserver.CallIdentityApplicationServiceRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incoming_call_notification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.IncomingCallNotificationRequest IncomingCallNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification ? (global::Iop.Profileserver.IncomingCallNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.IncomingCallNotification;
      }
    }

    /// <summary>Field number for the "add_related_identity" field.</summary>
    public const int AddRelatedIdentityFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.AddRelatedIdentityRequest AddRelatedIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity ? (global::Iop.Profileserver.AddRelatedIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.AddRelatedIdentity;
      }
    }

    /// <summary>Field number for the "remove_related_identity" field.</summary>
    public const int RemoveRelatedIdentityFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.RemoveRelatedIdentityRequest RemoveRelatedIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity ? (global::Iop.Profileserver.RemoveRelatedIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.RemoveRelatedIdentity;
      }
    }

    /// <summary>Field number for the "start_neighborhood_initialization" field.</summary>
    public const int StartNeighborhoodInitializationFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StartNeighborhoodInitializationRequest StartNeighborhoodInitialization {
      get { return requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization ? (global::Iop.Profileserver.StartNeighborhoodInitializationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.StartNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "finish_neighborhood_initialization" field.</summary>
    public const int FinishNeighborhoodInitializationFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.FinishNeighborhoodInitializationRequest FinishNeighborhoodInitialization {
      get { return requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization ? (global::Iop.Profileserver.FinishNeighborhoodInitializationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.FinishNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "neighborhood_shared_profile_update" field.</summary>
    public const int NeighborhoodSharedProfileUpdateFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest NeighborhoodSharedProfileUpdate {
      get { return requestTypeCase_ == RequestTypeOneofCase.NeighborhoodSharedProfileUpdate ? (global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.NeighborhoodSharedProfileUpdate;
      }
    }

    /// <summary>Field number for the "stop_neighborhood_updates" field.</summary>
    public const int StopNeighborhoodUpdatesFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StopNeighborhoodUpdatesRequest StopNeighborhoodUpdates {
      get { return requestTypeCase_ == RequestTypeOneofCase.StopNeighborhoodUpdates ? (global::Iop.Profileserver.StopNeighborhoodUpdatesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.StopNeighborhoodUpdates;
      }
    }

    /// <summary>Field number for the "can_store_data" field.</summary>
    public const int CanStoreDataFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CanStoreDataRequest CanStoreData {
      get { return requestTypeCase_ == RequestTypeOneofCase.CanStoreData ? (global::Iop.Profileserver.CanStoreDataRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CanStoreData;
      }
    }

    /// <summary>Field number for the "can_publish_ipns_record" field.</summary>
    public const int CanPublishIpnsRecordFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CanPublishIpnsRecordRequest CanPublishIpnsRecord {
      get { return requestTypeCase_ == RequestTypeOneofCase.CanPublishIpnsRecord ? (global::Iop.Profileserver.CanPublishIpnsRecordRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CanPublishIpnsRecord;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Start = 2,
      RegisterHosting = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHostingAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
      AddRelatedIdentity = 12,
      RemoveRelatedIdentity = 13,
      StartNeighborhoodInitialization = 14,
      FinishNeighborhoodInitialization = 15,
      NeighborhoodSharedProfileUpdate = 16,
      StopNeighborhoodUpdates = 17,
      CanStoreData = 18,
      CanPublishIpnsRecord = 19,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(RegisterHosting, other.RegisterHosting)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHostingAgreement, other.CancelHostingAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (!object.Equals(AddRelatedIdentity, other.AddRelatedIdentity)) return false;
      if (!object.Equals(RemoveRelatedIdentity, other.RemoveRelatedIdentity)) return false;
      if (!object.Equals(StartNeighborhoodInitialization, other.StartNeighborhoodInitialization)) return false;
      if (!object.Equals(FinishNeighborhoodInitialization, other.FinishNeighborhoodInitialization)) return false;
      if (!object.Equals(NeighborhoodSharedProfileUpdate, other.NeighborhoodSharedProfileUpdate)) return false;
      if (!object.Equals(StopNeighborhoodUpdates, other.StopNeighborhoodUpdates)) return false;
      if (!object.Equals(CanStoreData, other.CanStoreData)) return false;
      if (!object.Equals(CanPublishIpnsRecord, other.CanPublishIpnsRecord)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.RegisterHosting) hash ^= RegisterHosting.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHostingAgreement) hash ^= CancelHostingAgreement.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) hash ^= AddRelatedIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) hash ^= RemoveRelatedIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) hash ^= StartNeighborhoodInitialization.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) hash ^= FinishNeighborhoodInitialization.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborhoodSharedProfileUpdate) hash ^= NeighborhoodSharedProfileUpdate.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.StopNeighborhoodUpdates) hash ^= StopNeighborhoodUpdates.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CanStoreData) hash ^= CanStoreData.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CanPublishIpnsRecord) hash ^= CanPublishIpnsRecord.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RegisterHosting) {
        output.WriteRawTag(26);
        output.WriteMessage(RegisterHosting);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHostingAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHostingAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
        output.WriteRawTag(98);
        output.WriteMessage(AddRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
        output.WriteRawTag(106);
        output.WriteMessage(RemoveRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
        output.WriteRawTag(114);
        output.WriteMessage(StartNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
        output.WriteRawTag(122);
        output.WriteMessage(FinishNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborhoodSharedProfileUpdate) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NeighborhoodSharedProfileUpdate);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StopNeighborhoodUpdates) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StopNeighborhoodUpdates);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CanStoreData) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CanStoreData);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CanPublishIpnsRecord) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CanPublishIpnsRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RegisterHosting) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterHosting);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHostingAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHostingAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinishNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborhoodSharedProfileUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeighborhoodSharedProfileUpdate);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StopNeighborhoodUpdates) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopNeighborhoodUpdates);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CanStoreData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanStoreData);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CanPublishIpnsRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanPublishIpnsRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start;
          break;
        case RequestTypeOneofCase.RegisterHosting:
          RegisterHosting = other.RegisterHosting;
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case RequestTypeOneofCase.CancelHostingAgreement:
          CancelHostingAgreement = other.CancelHostingAgreement;
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
        case RequestTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity;
          break;
        case RequestTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity;
          break;
        case RequestTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization;
          break;
        case RequestTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization;
          break;
        case RequestTypeOneofCase.NeighborhoodSharedProfileUpdate:
          NeighborhoodSharedProfileUpdate = other.NeighborhoodSharedProfileUpdate;
          break;
        case RequestTypeOneofCase.StopNeighborhoodUpdates:
          StopNeighborhoodUpdates = other.StopNeighborhoodUpdates;
          break;
        case RequestTypeOneofCase.CanStoreData:
          CanStoreData = other.CanStoreData;
          break;
        case RequestTypeOneofCase.CanPublishIpnsRecord:
          CanPublishIpnsRecord = other.CanPublishIpnsRecord;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Profileserver.StartConversationRequest subBuilder = new global::Iop.Profileserver.StartConversationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.RegisterHostingRequest subBuilder = new global::Iop.Profileserver.RegisterHostingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.RegisterHosting) {
              subBuilder.MergeFrom(RegisterHosting);
            }
            input.ReadMessage(subBuilder);
            RegisterHosting = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Profileserver.CheckInRequest subBuilder = new global::Iop.Profileserver.CheckInRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Profileserver.VerifyIdentityRequest subBuilder = new global::Iop.Profileserver.VerifyIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Profileserver.UpdateProfileRequest subBuilder = new global::Iop.Profileserver.UpdateProfileRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Profileserver.CancelHostingAgreementRequest subBuilder = new global::Iop.Profileserver.CancelHostingAgreementRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CancelHostingAgreement) {
              subBuilder.MergeFrom(CancelHostingAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHostingAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Profileserver.ApplicationServiceAddRequest subBuilder = new global::Iop.Profileserver.ApplicationServiceAddRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Profileserver.ApplicationServiceRemoveRequest subBuilder = new global::Iop.Profileserver.ApplicationServiceRemoveRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Profileserver.CallIdentityApplicationServiceRequest subBuilder = new global::Iop.Profileserver.CallIdentityApplicationServiceRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Profileserver.IncomingCallNotificationRequest subBuilder = new global::Iop.Profileserver.IncomingCallNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Profileserver.AddRelatedIdentityRequest subBuilder = new global::Iop.Profileserver.AddRelatedIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
              subBuilder.MergeFrom(AddRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            AddRelatedIdentity = subBuilder;
            break;
          }
          case 106: {
            global::Iop.Profileserver.RemoveRelatedIdentityRequest subBuilder = new global::Iop.Profileserver.RemoveRelatedIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
              subBuilder.MergeFrom(RemoveRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            RemoveRelatedIdentity = subBuilder;
            break;
          }
          case 114: {
            global::Iop.Profileserver.StartNeighborhoodInitializationRequest subBuilder = new global::Iop.Profileserver.StartNeighborhoodInitializationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
              subBuilder.MergeFrom(StartNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            StartNeighborhoodInitialization = subBuilder;
            break;
          }
          case 122: {
            global::Iop.Profileserver.FinishNeighborhoodInitializationRequest subBuilder = new global::Iop.Profileserver.FinishNeighborhoodInitializationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
              subBuilder.MergeFrom(FinishNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            FinishNeighborhoodInitialization = subBuilder;
            break;
          }
          case 130: {
            global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest subBuilder = new global::Iop.Profileserver.NeighborhoodSharedProfileUpdateRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.NeighborhoodSharedProfileUpdate) {
              subBuilder.MergeFrom(NeighborhoodSharedProfileUpdate);
            }
            input.ReadMessage(subBuilder);
            NeighborhoodSharedProfileUpdate = subBuilder;
            break;
          }
          case 138: {
            global::Iop.Profileserver.StopNeighborhoodUpdatesRequest subBuilder = new global::Iop.Profileserver.StopNeighborhoodUpdatesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.StopNeighborhoodUpdates) {
              subBuilder.MergeFrom(StopNeighborhoodUpdates);
            }
            input.ReadMessage(subBuilder);
            StopNeighborhoodUpdates = subBuilder;
            break;
          }
          case 146: {
            global::Iop.Profileserver.CanStoreDataRequest subBuilder = new global::Iop.Profileserver.CanStoreDataRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CanStoreData) {
              subBuilder.MergeFrom(CanStoreData);
            }
            input.ReadMessage(subBuilder);
            CanStoreData = subBuilder;
            break;
          }
          case 154: {
            global::Iop.Profileserver.CanPublishIpnsRecordRequest subBuilder = new global::Iop.Profileserver.CanPublishIpnsRecordRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CanPublishIpnsRecord) {
              subBuilder.MergeFrom(CanPublishIpnsRecord);
            }
            input.ReadMessage(subBuilder);
            CanPublishIpnsRecord = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Conversation response is a reaction to a conversation request.
  /// </summary>
  public sealed partial class ConversationResponse : pb::IMessage<ConversationResponse> {
    private static readonly pb::MessageParser<ConversationResponse> _parser = new pb::MessageParser<ConversationResponse>(() => new ConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse(ConversationResponse other) : this() {
      signature_ = other.signature_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case ResponseTypeOneofCase.RegisterHosting:
          RegisterHosting = other.RegisterHosting.Clone();
          break;
        case ResponseTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case ResponseTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case ResponseTypeOneofCase.CancelHostingAgreement:
          CancelHostingAgreement = other.CancelHostingAgreement.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case ResponseTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case ResponseTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
        case ResponseTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity.Clone();
          break;
        case ResponseTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity.Clone();
          break;
        case ResponseTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization.Clone();
          break;
        case ResponseTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization.Clone();
          break;
        case ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate:
          NeighborhoodSharedProfileUpdate = other.NeighborhoodSharedProfileUpdate.Clone();
          break;
        case ResponseTypeOneofCase.StopNeighborhoodUpdates:
          StopNeighborhoodUpdates = other.StopNeighborhoodUpdates.Clone();
          break;
        case ResponseTypeOneofCase.CanStoreData:
          CanStoreData = other.CanStoreData.Clone();
          break;
        case ResponseTypeOneofCase.CanPublishIpnsRecord:
          CanPublishIpnsRecord = other.CanPublishIpnsRecord.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse Clone() {
      return new ConversationResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Optional (response specific) signature that signs the Protobuf binary form of the included response body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    /// Response body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StartConversationResponse Start {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Start ? (global::Iop.Profileserver.StartConversationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "register_hosting" field.</summary>
    public const int RegisterHostingFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.RegisterHostingResponse RegisterHosting {
      get { return responseTypeCase_ == ResponseTypeOneofCase.RegisterHosting ? (global::Iop.Profileserver.RegisterHostingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RegisterHosting;
      }
    }

    /// <summary>Field number for the "check_in" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CheckInResponse CheckIn {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CheckIn ? (global::Iop.Profileserver.CheckInResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verify_identity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.VerifyIdentityResponse VerifyIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity ? (global::Iop.Profileserver.VerifyIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "update_profile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.UpdateProfileResponse UpdateProfile {
      get { return responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile ? (global::Iop.Profileserver.UpdateProfileResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancel_hosting_agreement" field.</summary>
    public const int CancelHostingAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CancelHostingAgreementResponse CancelHostingAgreement {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CancelHostingAgreement ? (global::Iop.Profileserver.CancelHostingAgreementResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CancelHostingAgreement;
      }
    }

    /// <summary>Field number for the "application_service_add" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceAddResponse ApplicationServiceAdd {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Profileserver.ApplicationServiceAddResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "application_service_remove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ApplicationServiceRemoveResponse ApplicationServiceRemove {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Profileserver.ApplicationServiceRemoveResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "call_identity_application_service" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CallIdentityApplicationServiceResponse CallIdentityApplicationService {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Profileserver.CallIdentityApplicationServiceResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incoming_call_notification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.IncomingCallNotificationResponse IncomingCallNotification {
      get { return responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification ? (global::Iop.Profileserver.IncomingCallNotificationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.IncomingCallNotification;
      }
    }

    /// <summary>Field number for the "add_related_identity" field.</summary>
    public const int AddRelatedIdentityFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.AddRelatedIdentityResponse AddRelatedIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity ? (global::Iop.Profileserver.AddRelatedIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.AddRelatedIdentity;
      }
    }

    /// <summary>Field number for the "remove_related_identity" field.</summary>
    public const int RemoveRelatedIdentityFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.RemoveRelatedIdentityResponse RemoveRelatedIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity ? (global::Iop.Profileserver.RemoveRelatedIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RemoveRelatedIdentity;
      }
    }

    /// <summary>Field number for the "start_neighborhood_initialization" field.</summary>
    public const int StartNeighborhoodInitializationFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StartNeighborhoodInitializationResponse StartNeighborhoodInitialization {
      get { return responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization ? (global::Iop.Profileserver.StartNeighborhoodInitializationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.StartNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "finish_neighborhood_initialization" field.</summary>
    public const int FinishNeighborhoodInitializationFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.FinishNeighborhoodInitializationResponse FinishNeighborhoodInitialization {
      get { return responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization ? (global::Iop.Profileserver.FinishNeighborhoodInitializationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.FinishNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "neighborhood_shared_profile_update" field.</summary>
    public const int NeighborhoodSharedProfileUpdateFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse NeighborhoodSharedProfileUpdate {
      get { return responseTypeCase_ == ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate ? (global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate;
      }
    }

    /// <summary>Field number for the "stop_neighborhood_updates" field.</summary>
    public const int StopNeighborhoodUpdatesFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.StopNeighborhoodUpdatesResponse StopNeighborhoodUpdates {
      get { return responseTypeCase_ == ResponseTypeOneofCase.StopNeighborhoodUpdates ? (global::Iop.Profileserver.StopNeighborhoodUpdatesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.StopNeighborhoodUpdates;
      }
    }

    /// <summary>Field number for the "can_store_data" field.</summary>
    public const int CanStoreDataFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CanStoreDataResponse CanStoreData {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CanStoreData ? (global::Iop.Profileserver.CanStoreDataResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CanStoreData;
      }
    }

    /// <summary>Field number for the "can_publish_ipns_record" field.</summary>
    public const int CanPublishIpnsRecordFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CanPublishIpnsRecordResponse CanPublishIpnsRecord {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CanPublishIpnsRecord ? (global::Iop.Profileserver.CanPublishIpnsRecordResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CanPublishIpnsRecord;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Start = 2,
      RegisterHosting = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHostingAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
      AddRelatedIdentity = 12,
      RemoveRelatedIdentity = 13,
      StartNeighborhoodInitialization = 14,
      FinishNeighborhoodInitialization = 15,
      NeighborhoodSharedProfileUpdate = 16,
      StopNeighborhoodUpdates = 17,
      CanStoreData = 18,
      CanPublishIpnsRecord = 19,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(RegisterHosting, other.RegisterHosting)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHostingAgreement, other.CancelHostingAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (!object.Equals(AddRelatedIdentity, other.AddRelatedIdentity)) return false;
      if (!object.Equals(RemoveRelatedIdentity, other.RemoveRelatedIdentity)) return false;
      if (!object.Equals(StartNeighborhoodInitialization, other.StartNeighborhoodInitialization)) return false;
      if (!object.Equals(FinishNeighborhoodInitialization, other.FinishNeighborhoodInitialization)) return false;
      if (!object.Equals(NeighborhoodSharedProfileUpdate, other.NeighborhoodSharedProfileUpdate)) return false;
      if (!object.Equals(StopNeighborhoodUpdates, other.StopNeighborhoodUpdates)) return false;
      if (!object.Equals(CanStoreData, other.CanStoreData)) return false;
      if (!object.Equals(CanPublishIpnsRecord, other.CanPublishIpnsRecord)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.RegisterHosting) hash ^= RegisterHosting.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHostingAgreement) hash ^= CancelHostingAgreement.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) hash ^= AddRelatedIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) hash ^= RemoveRelatedIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) hash ^= StartNeighborhoodInitialization.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) hash ^= FinishNeighborhoodInitialization.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate) hash ^= NeighborhoodSharedProfileUpdate.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.StopNeighborhoodUpdates) hash ^= StopNeighborhoodUpdates.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CanStoreData) hash ^= CanStoreData.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CanPublishIpnsRecord) hash ^= CanPublishIpnsRecord.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RegisterHosting) {
        output.WriteRawTag(26);
        output.WriteMessage(RegisterHosting);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHostingAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHostingAgreement);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
        output.WriteRawTag(98);
        output.WriteMessage(AddRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
        output.WriteRawTag(106);
        output.WriteMessage(RemoveRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
        output.WriteRawTag(114);
        output.WriteMessage(StartNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
        output.WriteRawTag(122);
        output.WriteMessage(FinishNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NeighborhoodSharedProfileUpdate);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StopNeighborhoodUpdates) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StopNeighborhoodUpdates);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CanStoreData) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CanStoreData);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CanPublishIpnsRecord) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CanPublishIpnsRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RegisterHosting) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterHosting);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHostingAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHostingAgreement);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinishNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeighborhoodSharedProfileUpdate);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StopNeighborhoodUpdates) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopNeighborhoodUpdates);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CanStoreData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanStoreData);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CanPublishIpnsRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanPublishIpnsRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start;
          break;
        case ResponseTypeOneofCase.RegisterHosting:
          RegisterHosting = other.RegisterHosting;
          break;
        case ResponseTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case ResponseTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case ResponseTypeOneofCase.CancelHostingAgreement:
          CancelHostingAgreement = other.CancelHostingAgreement;
          break;
        case ResponseTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case ResponseTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case ResponseTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case ResponseTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
        case ResponseTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity;
          break;
        case ResponseTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity;
          break;
        case ResponseTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization;
          break;
        case ResponseTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization;
          break;
        case ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate:
          NeighborhoodSharedProfileUpdate = other.NeighborhoodSharedProfileUpdate;
          break;
        case ResponseTypeOneofCase.StopNeighborhoodUpdates:
          StopNeighborhoodUpdates = other.StopNeighborhoodUpdates;
          break;
        case ResponseTypeOneofCase.CanStoreData:
          CanStoreData = other.CanStoreData;
          break;
        case ResponseTypeOneofCase.CanPublishIpnsRecord:
          CanPublishIpnsRecord = other.CanPublishIpnsRecord;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Profileserver.StartConversationResponse subBuilder = new global::Iop.Profileserver.StartConversationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.RegisterHostingResponse subBuilder = new global::Iop.Profileserver.RegisterHostingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.RegisterHosting) {
              subBuilder.MergeFrom(RegisterHosting);
            }
            input.ReadMessage(subBuilder);
            RegisterHosting = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Profileserver.CheckInResponse subBuilder = new global::Iop.Profileserver.CheckInResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Profileserver.VerifyIdentityResponse subBuilder = new global::Iop.Profileserver.VerifyIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Profileserver.UpdateProfileResponse subBuilder = new global::Iop.Profileserver.UpdateProfileResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Profileserver.CancelHostingAgreementResponse subBuilder = new global::Iop.Profileserver.CancelHostingAgreementResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CancelHostingAgreement) {
              subBuilder.MergeFrom(CancelHostingAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHostingAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Profileserver.ApplicationServiceAddResponse subBuilder = new global::Iop.Profileserver.ApplicationServiceAddResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Profileserver.ApplicationServiceRemoveResponse subBuilder = new global::Iop.Profileserver.ApplicationServiceRemoveResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Profileserver.CallIdentityApplicationServiceResponse subBuilder = new global::Iop.Profileserver.CallIdentityApplicationServiceResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Profileserver.IncomingCallNotificationResponse subBuilder = new global::Iop.Profileserver.IncomingCallNotificationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Profileserver.AddRelatedIdentityResponse subBuilder = new global::Iop.Profileserver.AddRelatedIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
              subBuilder.MergeFrom(AddRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            AddRelatedIdentity = subBuilder;
            break;
          }
          case 106: {
            global::Iop.Profileserver.RemoveRelatedIdentityResponse subBuilder = new global::Iop.Profileserver.RemoveRelatedIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
              subBuilder.MergeFrom(RemoveRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            RemoveRelatedIdentity = subBuilder;
            break;
          }
          case 114: {
            global::Iop.Profileserver.StartNeighborhoodInitializationResponse subBuilder = new global::Iop.Profileserver.StartNeighborhoodInitializationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
              subBuilder.MergeFrom(StartNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            StartNeighborhoodInitialization = subBuilder;
            break;
          }
          case 122: {
            global::Iop.Profileserver.FinishNeighborhoodInitializationResponse subBuilder = new global::Iop.Profileserver.FinishNeighborhoodInitializationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
              subBuilder.MergeFrom(FinishNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            FinishNeighborhoodInitialization = subBuilder;
            break;
          }
          case 130: {
            global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse subBuilder = new global::Iop.Profileserver.NeighborhoodSharedProfileUpdateResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.NeighborhoodSharedProfileUpdate) {
              subBuilder.MergeFrom(NeighborhoodSharedProfileUpdate);
            }
            input.ReadMessage(subBuilder);
            NeighborhoodSharedProfileUpdate = subBuilder;
            break;
          }
          case 138: {
            global::Iop.Profileserver.StopNeighborhoodUpdatesResponse subBuilder = new global::Iop.Profileserver.StopNeighborhoodUpdatesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.StopNeighborhoodUpdates) {
              subBuilder.MergeFrom(StopNeighborhoodUpdates);
            }
            input.ReadMessage(subBuilder);
            StopNeighborhoodUpdates = subBuilder;
            break;
          }
          case 146: {
            global::Iop.Profileserver.CanStoreDataResponse subBuilder = new global::Iop.Profileserver.CanStoreDataResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CanStoreData) {
              subBuilder.MergeFrom(CanStoreData);
            }
            input.ReadMessage(subBuilder);
            CanStoreData = subBuilder;
            break;
          }
          case 154: {
            global::Iop.Profileserver.CanPublishIpnsRecordResponse subBuilder = new global::Iop.Profileserver.CanPublishIpnsRecordResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CanPublishIpnsRecord) {
              subBuilder.MergeFrom(CanPublishIpnsRecord);
            }
            input.ReadMessage(subBuilder);
            CanPublishIpnsRecord = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// An administrative message to test whether the peer is there and responds to requests.
  ///
  /// Each identity client is required to send a message not more than 60 seconds after the connection 
  /// was established, or after the last message has been send over the connection. For server clients,
  /// this limit is 300 seconds. Clients should use PingRequest if they have nothing else to send
  /// and want to keep the connection open.
  ///
  /// Roles: any
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// At most 64 bytes of arbitrary data that will be sent back by the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A response to PingRequest to reassure the connection works fine.
  /// </summary>
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
      payload_ = other.payload_;
      clock_ = other.clock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// See 'PingRequest.payload'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 2;
    private long clock_;
    /// <summary>
    /// TimestampType. Clock on the requestee's machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Clock != other.Clock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Clock != 0L) hash ^= Clock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Clock != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Clock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Clock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Clock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Clock != 0L) {
        Clock = other.Clock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 16: {
            Clock = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Request server to provide a mapping between ports and roles.
  ///
  /// Roles: primary
  /// </summary>
  public sealed partial class ListRolesRequest : pb::IMessage<ListRolesRequest> {
    private static readonly pb::MessageParser<ListRolesRequest> _parser = new pb::MessageParser<ListRolesRequest>(() => new ListRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest(ListRolesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest Clone() {
      return new ListRolesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// A response to ListRolesRequest with a list of all open ports and associated roles.
  /// </summary>
  public sealed partial class ListRolesResponse : pb::IMessage<ListRolesResponse> {
    private static readonly pb::MessageParser<ListRolesResponse> _parser = new pb::MessageParser<ListRolesResponse>(() => new ListRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse(ListRolesResponse other) : this() {
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse Clone() {
      return new ListRolesResponse(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.ServerRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Profileserver.ServerRole.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.ServerRole> roles_ = new pbc::RepeatedField<global::Iop.Profileserver.ServerRole>();
    /// <summary>
    /// List of server roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.ServerRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesResponse other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of a single server role.
  /// </summary>
  public sealed partial class ServerRole : pb::IMessage<ServerRole> {
    private static readonly pb::MessageParser<ServerRole> _parser = new pb::MessageParser<ServerRole>(() => new ServerRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole(ServerRole other) : this() {
      role_ = other.role_;
      port_ = other.port_;
      isTcp_ = other.isTcp_;
      isTls_ = other.isTls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole Clone() {
      return new ServerRole(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Iop.Profileserver.ServerRoleType role_ = 0;
    /// <summary>
    /// Server role type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ServerRoleType Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    /// On which port is this server role provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "is_tcp" field.</summary>
    public const int IsTcpFieldNumber = 3;
    private bool isTcp_;
    /// <summary>
    /// true if the port is TCP port, false means UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcp {
      get { return isTcp_; }
      set {
        isTcp_ = value;
      }
    }

    /// <summary>Field number for the "is_tls" field.</summary>
    public const int IsTlsFieldNumber = 4;
    private bool isTls_;
    /// <summary>
    /// true if the port is TLS encrypted, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTls {
      get { return isTls_; }
      set {
        isTls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Port != other.Port) return false;
      if (IsTcp != other.IsTcp) return false;
      if (IsTls != other.IsTls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (IsTcp != false) hash ^= IsTcp.GetHashCode();
      if (IsTls != false) hash ^= IsTls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (IsTcp != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTcp);
      }
      if (IsTls != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (IsTcp != false) {
        size += 1 + 1;
      }
      if (IsTls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRole other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.IsTcp != false) {
        IsTcp = other.IsTcp;
      }
      if (other.IsTls != false) {
        IsTls = other.IsTls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            role_ = (global::Iop.Profileserver.ServerRoleType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTcp = input.ReadBool();
            break;
          }
          case 32: {
            IsTls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A client asks server for its hosting plans that match the given criteria.
  ///
  /// VERSION NOTE: This message is not implemented by current version of profile server.
  ///
  /// Roles: clNonCustomer
  /// </summary>
  public sealed partial class ListHostingPlansRequest : pb::IMessage<ListHostingPlansRequest> {
    private static readonly pb::MessageParser<ListHostingPlansRequest> _parser = new pb::MessageParser<ListHostingPlansRequest>(() => new ListHostingPlansRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHostingPlansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansRequest(ListHostingPlansRequest other) : this() {
      identityType_ = other.identityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansRequest Clone() {
      return new ListHostingPlansRequest(this);
    }

    /// <summary>Field number for the "identity_type" field.</summary>
    public const int IdentityTypeFieldNumber = 1;
    private string identityType_ = "";
    /// <summary>
    /// A specific identity type, for which the client searches the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHostingPlansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHostingPlansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityType != other.IdentityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHostingPlansRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ListHostingPlansRequest that contains a list of matching plans.
  ///
  /// VERSION NOTE: This message is not implemented by current version of profile server.
  ///
  /// Specific Error Responses: 
  ///   * ERROR_QUOTA_EXCEEDED - A server uses this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  /// </summary>
  public sealed partial class ListHostingPlansResponse : pb::IMessage<ListHostingPlansResponse> {
    private static readonly pb::MessageParser<ListHostingPlansResponse> _parser = new pb::MessageParser<ListHostingPlansResponse>(() => new ListHostingPlansResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHostingPlansResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansResponse(ListHostingPlansResponse other) : this() {
      plans_ = other.plans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHostingPlansResponse Clone() {
      return new ListHostingPlansResponse(this);
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.HostingPlan> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Profileserver.HostingPlan.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.HostingPlan> plans_ = new pbc::RepeatedField<global::Iop.Profileserver.HostingPlan>();
    /// <summary>
    /// List of matching plans.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.HostingPlan> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHostingPlansResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHostingPlansResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plans_.Equals(other.plans_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plans_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHostingPlansResponse other) {
      if (other == null) {
        return;
      }
      plans_.Add(other.plans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of a hosting plan.
  /// </summary>
  public sealed partial class HostingPlan : pb::IMessage<HostingPlan> {
    private static readonly pb::MessageParser<HostingPlan> _parser = new pb::MessageParser<HostingPlan>(() => new HostingPlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostingPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlan(HostingPlan other) : this() {
      planId_ = other.planId_;
      serverNetworkId_ = other.serverNetworkId_;
      identityType_ = other.identityType_;
      fee_ = other.fee_;
      billingPeriodSeconds_ = other.billingPeriodSeconds_;
      planParameters_ = other.planParameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlan Clone() {
      return new HostingPlan(this);
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier of the plan is a SHA256 hash of the HostingPlan structure in Google Protobuf v3 encoding 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_network_id" field.</summary>
    public const int ServerNetworkIdFieldNumber = 2;
    private pb::ByteString serverNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// with plan_id initialized to a byte array of 32 zero bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ServerNetworkId {
      get { return serverNetworkId_; }
      set {
        serverNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity_type" field.</summary>
    public const int IdentityTypeFieldNumber = 3;
    private string identityType_ = "";
    /// <summary>
    /// Type of identity this plan is created for. This can include "*" as a wildcard character
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private ulong fee_;
    /// <summary>
    /// at the end of the type to support multiple types to be served with a single plan. 
    /// For example, the value "*" would mean that any identity type is supported,
    /// and the value "Taxi *" would mean that any identity type that starts with "Taxi *"
    /// would match this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "billing_period_seconds" field.</summary>
    public const int BillingPeriodSecondsFieldNumber = 5;
    private uint billingPeriodSeconds_;
    /// <summary>
    /// Length of the billing period in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BillingPeriodSeconds {
      get { return billingPeriodSeconds_; }
      set {
        billingPeriodSeconds_ = value;
      }
    }

    /// <summary>Field number for the "plan_parameters" field.</summary>
    public const int PlanParametersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.NameStringValuePair> _repeated_planParameters_codec
        = pb::FieldCodec.ForMessage(74, global::Iop.Profileserver.NameStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.NameStringValuePair> planParameters_ = new pbc::RepeatedField<global::Iop.Profileserver.NameStringValuePair>();
    /// <summary>
    /// List of additional service parameters that define the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.NameStringValuePair> PlanParameters {
      get { return planParameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostingPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostingPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (ServerNetworkId != other.ServerNetworkId) return false;
      if (IdentityType != other.IdentityType) return false;
      if (Fee != other.Fee) return false;
      if (BillingPeriodSeconds != other.BillingPeriodSeconds) return false;
      if(!planParameters_.Equals(other.planParameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (ServerNetworkId.Length != 0) hash ^= ServerNetworkId.GetHashCode();
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (BillingPeriodSeconds != 0) hash ^= BillingPeriodSeconds.GetHashCode();
      hash ^= planParameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (ServerNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ServerNetworkId);
      }
      if (IdentityType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IdentityType);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BillingPeriodSeconds);
      }
      planParameters_.WriteTo(output, _repeated_planParameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (ServerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerNetworkId);
      }
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BillingPeriodSeconds);
      }
      size += planParameters_.CalculateSize(_repeated_planParameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostingPlan other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.ServerNetworkId.Length != 0) {
        ServerNetworkId = other.ServerNetworkId;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.BillingPeriodSeconds != 0) {
        BillingPeriodSeconds = other.BillingPeriodSeconds;
      }
      planParameters_.Add(other.planParameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            ServerNetworkId = input.ReadBytes();
            break;
          }
          case 26: {
            IdentityType = input.ReadString();
            break;
          }
          case 32: {
            Fee = input.ReadUInt64();
            break;
          }
          case 40: {
            BillingPeriodSeconds = input.ReadUInt32();
            break;
          }
          case 74: {
            planParameters_.AddEntriesFrom(input, _repeated_planParameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of name-value structure with string values.
  /// </summary>
  public sealed partial class NameStringValuePair : pb::IMessage<NameStringValuePair> {
    private static readonly pb::MessageParser<NameStringValuePair> _parser = new pb::MessageParser<NameStringValuePair>(() => new NameStringValuePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameStringValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair(NameStringValuePair other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair Clone() {
      return new NameStringValuePair(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// String value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameStringValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameStringValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameStringValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Every conversation starts with this request, in which the requestor sends a list of protocol versions 
  /// it supports and its public key that identifies it.
  ///
  /// Roles: any
  ///
  /// Conversation status: NoConversation
  /// </summary>
  public sealed partial class StartConversationRequest : pb::IMessage<StartConversationRequest> {
    private static readonly pb::MessageParser<StartConversationRequest> _parser = new pb::MessageParser<StartConversationRequest>(() => new StartConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest(StartConversationRequest other) : this() {
      supportedVersions_ = other.supportedVersions_.Clone();
      publicKey_ = other.publicKey_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest Clone() {
      return new StartConversationRequest(this);
    }

    /// <summary>Field number for the "supported_versions" field.</summary>
    public const int SupportedVersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_supportedVersions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> supportedVersions_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of VersionType items. Ordered by requestor's preference. See 'SingleRequest.version'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SupportedVersions {
      get { return supportedVersions_; }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the requestor. Max 128 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_challenge" field.</summary>
    public const int ClientChallengeFieldNumber = 3;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    /// 32 byte challenge data (random bytes generated by the requestor) that is used for authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!supportedVersions_.Equals(other.supportedVersions_)) return false;
      if (PublicKey != other.PublicKey) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= supportedVersions_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      supportedVersions_.WriteTo(output, _repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += supportedVersions_.CalculateSize(_repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationRequest other) {
      if (other == null) {
        return;
      }
      supportedVersions_.Add(other.supportedVersions_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            supportedVersions_.AddEntriesFrom(input, _repeated_supportedVersions_codec);
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to StartConversationRequest in case the requestee found at least one protocol version that 
  /// both peers are willing to use. 
  /// 
  /// The 'client_challenge' field value in raw format is signed with a signature in 'ConversationResponse.signature'.
  /// 
  ///
  /// After StartConversationResponse is sent, the conversation context includes version and keys of both peers.
  ///
  /// Specific Error Responses:
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "publicKey" - 'StartConversationRequest.public_key' is not a valid public key value. 
  ///     * Response.details == "clientChallenge" - 'StartConversationRequest.client_challenge' is not 32 byte long. 
  /// </summary>
  public sealed partial class StartConversationResponse : pb::IMessage<StartConversationResponse> {
    private static readonly pb::MessageParser<StartConversationResponse> _parser = new pb::MessageParser<StartConversationResponse>(() => new StartConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse(StartConversationResponse other) : this() {
      version_ = other.version_;
      publicKey_ = other.publicKey_;
      challenge_ = other.challenge_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse Clone() {
      return new StartConversationResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    /// VersionType. The version that the requestee selected from the offered set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the requestee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 3;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    /// 32 byte challenge data (random bytes generated by the requestee) that is used for later authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_challenge" field.</summary>
    public const int ClientChallengeFieldNumber = 4;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    /// Copy of 'StartConversationRequest.client_challenge' that is signed by the requestee. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Challenge != other.Challenge) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (Challenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Challenge = input.ReadBytes();
            break;
          }
          case 34: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A client asks profile server to host its profile by sending RegisterHostingRequest
  /// with a signed contract. The signature of 'contract' field is provided in 'ConversationRequest.signature'.
  ///
  /// Roles: clNonCustomer
  ///
  /// Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class RegisterHostingRequest : pb::IMessage<RegisterHostingRequest> {
    private static readonly pb::MessageParser<RegisterHostingRequest> _parser = new pb::MessageParser<RegisterHostingRequest>(() => new RegisterHostingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterHostingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingRequest(RegisterHostingRequest other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingRequest Clone() {
      return new RegisterHostingRequest(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Profileserver.HostingPlanContract contract_;
    /// <summary>
    /// Description of the contract that the client wants to have with the profile server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.HostingPlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterHostingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterHostingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterHostingRequest other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Profileserver.HostingPlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Profileserver.HostingPlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to RegisterHostingRequest in case the profile server wants to accept the request.
  /// The server signes the contract. The signature of 'contract' field is provided in 'ConversationResponse.signature'.
  ///
  /// Specific Error Responses:
  ///   * ERROR_QUOTA_EXCEEDED - A server uses this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  ///   * ERROR_NOT_FOUND - 'HostingPlanContract.contract.planId' does not correspond to any of the server's plans, or the plan values are different from what the server offers.
  ///   * ERROR_INVALID_SIGNATURE - The client's signature of the contract is not valid.
  ///   * ERROR_ALREADY_EXISTS - The identity is hosted by the server already.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "contract.startTime" - 'RegisterHostingRequest.contract.start_time' is more than 1 hour in the past or is not a valid timestamp value. 
  ///     * Response.details == "contract.identityPublicKey" - 'RegisterHostingRequest.contract.identity_public_key' does not match identity's public key.
  ///     * Response.details == "contract.identityType" - 'RegisterHostingRequest.contract.identity_type' does not match the hosting plan or is invalid.
  /// </summary>
  public sealed partial class RegisterHostingResponse : pb::IMessage<RegisterHostingResponse> {
    private static readonly pb::MessageParser<RegisterHostingResponse> _parser = new pb::MessageParser<RegisterHostingResponse>(() => new RegisterHostingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterHostingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingResponse(RegisterHostingResponse other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterHostingResponse Clone() {
      return new RegisterHostingResponse(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Profileserver.HostingPlanContract contract_;
    /// <summary>
    /// Description of the contract that the client wants to have with the server and the server accepted it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.HostingPlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterHostingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterHostingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterHostingResponse other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Profileserver.HostingPlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Profileserver.HostingPlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A description of the contract between a client and a profile server.
  /// </summary>
  public sealed partial class HostingPlanContract : pb::IMessage<HostingPlanContract> {
    private static readonly pb::MessageParser<HostingPlanContract> _parser = new pb::MessageParser<HostingPlanContract>(() => new HostingPlanContract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostingPlanContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlanContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlanContract(HostingPlanContract other) : this() {
      planId_ = other.planId_;
      identityPublicKey_ = other.identityPublicKey_;
      startTime_ = other.startTime_;
      identityType_ = other.identityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostingPlanContract Clone() {
      return new HostingPlanContract(this);
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier of the profile server's hosting plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity_public_key" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 2;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Note that the current version ignores this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    /// TimestampType. Specifies the start time of the contract. This has to be set either to the future, or to a time that is not 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "identity_type" field.</summary>
    public const int IdentityTypeFieldNumber = 4;
    private string identityType_ = "";
    /// <summary>
    /// more than 1 hour in past from the current profile server's time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostingPlanContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostingPlanContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (StartTime != other.StartTime) return false;
      if (IdentityType != other.IdentityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(StartTime);
      }
      if (IdentityType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IdentityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartTime);
      }
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostingPlanContract other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 24: {
            StartTime = input.ReadSInt64();
            break;
          }
          case 34: {
            IdentityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// A customer client announces it is online and it "logs in".
  /// The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  /// Note that if a customer client that is authenticated already creates a second connection
  /// and performs the check-in process in it, the first connection has to be disconnected
  /// as there can not be multiple parallel connections in Authenticated state for a single identity.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class CheckInRequest : pb::IMessage<CheckInRequest> {
    private static readonly pb::MessageParser<CheckInRequest> _parser = new pb::MessageParser<CheckInRequest>(() => new CheckInRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest(CheckInRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest Clone() {
      return new CheckInRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    /// The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CheckInRequest. If no error occurs, the conversation status is upgraded to Authenticated.
  ///
  /// Specific Error Responses:
  ///   * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///   * ERROR_NOT_FOUND - The identity is not a client of the profile server.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "challenge" - 'CheckInRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class CheckInResponse : pb::IMessage<CheckInResponse> {
    private static readonly pb::MessageParser<CheckInResponse> _parser = new pb::MessageParser<CheckInResponse>(() => new CheckInResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse(CheckInResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse Clone() {
      return new CheckInResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 
  /// A non-customer client verifies its public key by signing the challenge. This request is similar to CheckInRequest, 
  /// but it is intended for non-customer clients. The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  /// Roles: clNonCustomer, srNeighbor
  ///
  /// Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class VerifyIdentityRequest : pb::IMessage<VerifyIdentityRequest> {
    private static readonly pb::MessageParser<VerifyIdentityRequest> _parser = new pb::MessageParser<VerifyIdentityRequest>(() => new VerifyIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest(VerifyIdentityRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest Clone() {
      return new VerifyIdentityRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    /// The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to VerifyIdentityRequest. If no error occurs, the conversation status is upgraded to Verified.
  ///
  /// Specific Error Responses:
  ///   * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "challenge" - 'VerifyIdentityRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class VerifyIdentityResponse : pb::IMessage<VerifyIdentityResponse> {
    private static readonly pb::MessageParser<VerifyIdentityResponse> _parser = new pb::MessageParser<VerifyIdentityResponse>(() => new VerifyIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse(VerifyIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse Clone() {
      return new VerifyIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// A customer client updates its profile hosted at the profile server.
  ///
  /// The customer client is required to initialize its profile just after finishing 
  /// the RegisterHostingRequest. Until the initialization of the profile is made, the identity 
  /// is not considered as being fully initialized and can not be queried or called by other 
  /// identities.
  ///
  /// The 'profile' field value in raw format is signed with a signature in 'ConversationRequest.signature'.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class UpdateProfileRequest : pb::IMessage<UpdateProfileRequest> {
    private static readonly pb::MessageParser<UpdateProfileRequest> _parser = new pb::MessageParser<UpdateProfileRequest>(() => new UpdateProfileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest(UpdateProfileRequest other) : this() {
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      profileImage_ = other.profileImage_;
      thumbnailImage_ = other.thumbnailImage_;
      noPropagation_ = other.noPropagation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest Clone() {
      return new UpdateProfileRequest(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Iop.Profileserver.ProfileInformation profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileInformation Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "profile_image" field.</summary>
    public const int ProfileImageFieldNumber = 2;
    private pb::ByteString profileImage_ = pb::ByteString.Empty;
    /// <summary>
    /// Profile image in PNG or JPEG format, non-empty binary data, max 20,480 bytes long, or zero length binary data if the profile image is about to be erased.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileImage {
      get { return profileImage_; }
      set {
        profileImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail_image" field.</summary>
    public const int ThumbnailImageFieldNumber = 3;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    /// The SHA256 hash of the binary data has to match 'profile.profile_imageHash'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_propagation" field.</summary>
    public const int NoPropagationFieldNumber = 4;
    private bool noPropagation_;
    /// <summary>
    /// The SHA256 hash of the binary data has to match 'profile.thumbnail_image_hash'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPropagation {
      get { return noPropagation_; }
      set {
        noPropagation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      if (ProfileImage != other.ProfileImage) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if (NoPropagation != other.NoPropagation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (ProfileImage.Length != 0) hash ^= ProfileImage.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      if (NoPropagation != false) hash ^= NoPropagation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (ProfileImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ThumbnailImage);
      }
      if (NoPropagation != false) {
        output.WriteRawTag(32);
        output.WriteBool(NoPropagation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (ProfileImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      if (NoPropagation != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Iop.Profileserver.ProfileInformation();
        }
        Profile.MergeFrom(other.Profile);
      }
      if (other.ProfileImage.Length != 0) {
        ProfileImage = other.ProfileImage;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      if (other.NoPropagation != false) {
        NoPropagation = other.NoPropagation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Iop.Profileserver.ProfileInformation();
            }
            input.ReadMessage(profile_);
            break;
          }
          case 18: {
            ProfileImage = input.ReadBytes();
            break;
          }
          case 26: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 32: {
            NoPropagation = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to UpdateProfileRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - The identity is not a client of the profile server.
  ///   * ERROR_INVALID_SIGNATURE - The client's signature of the 'UpdateProfileRequest.profile' in 'ConversationRequest.signature' is not valid.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "profile.version" - 'UpdateProfileRequest.profile.version' does not contain a valid version information.
  ///     * Response.details == "profile.publicKey" - 'UpdateProfileRequest.profile.public_key' is not the client's public key.
  ///     * Response.details == "profile.type" - 'UpdateProfileRequest.profile.type' does not match the original identity's profile type.
  ///     * Response.details == "profile.name" - 'UpdateProfileRequest.profile.name' does not contain a valid name.
  ///     * Response.details == "profile.latitude" - 'UpdateProfileRequest.profile.latitude' does not contain a valid latitude information.
  ///     * Response.details == "profile.longitude" - 'UpdateProfileRequest.profile.longitude' does not contain a valid longitude information.
  ///     * Response.details == "profile.extraData" - 'UpdateProfileRequest.profile.extra_data' does not contain a valid extra data information.
  ///     * Response.details == "profile.profileImageHash" - 'UpdateProfileRequest.profile.profile_image_hash' is neither a valid SHA256 hash nor empty array.
  ///     * Response.details == "profile.thumbnailImageHash" - 'UpdateProfileRequest.profile.thumbnail_image_hash' is neither a valid SHA256 hash nor empty array.
  ///     * Response.details == "profileImage" - 'UpdateProfileRequest.profile_image' is not a valid PNG or JPEG image data or it exceeds the size limit or it does not correspond to the 'UpdateProfileRequest.profile.profile_image_hash' value.
  ///     * Response.details == "thumbnailImage" - 'UpdateProfileRequest.thumbnail_image' is not a valid PNG or JPEG image data or it exceeds the size limit or it does not correspond to the 'UpdateProfileRequest.profile.thumbnail_image_hash' value.
  ///     * Response.details == "noPropagation" - 'UpdateProfileRequest.no_propagation' must be false during the first update of the profile.
  /// </summary>
  public sealed partial class UpdateProfileResponse : pb::IMessage<UpdateProfileResponse> {
    private static readonly pb::MessageParser<UpdateProfileResponse> _parser = new pb::MessageParser<UpdateProfileResponse>(() => new UpdateProfileResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse(UpdateProfileResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse Clone() {
      return new UpdateProfileResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Description of an identity profile.
  /// </summary>
  public sealed partial class ProfileInformation : pb::IMessage<ProfileInformation> {
    private static readonly pb::MessageParser<ProfileInformation> _parser = new pb::MessageParser<ProfileInformation>(() => new ProfileInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileInformation(ProfileInformation other) : this() {
      version_ = other.version_;
      publicKey_ = other.publicKey_;
      type_ = other.type_;
      name_ = other.name_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
      profileImageHash_ = other.profileImageHash_;
      thumbnailImageHash_ = other.thumbnailImageHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileInformation Clone() {
      return new ProfileInformation(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    /// VersionType. Version of the profile structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Identity public key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// Type of the client's identity. Max 64 bytes long. This information is set up during hosting registration process and can not be changed by update later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the profile, non-empty string, max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private int latitude_;
    /// <summary>
    /// LocationType. GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private int longitude_;
    /// <summary>
    /// LocationType. GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 7;
    private string extraData_ = "";
    /// <summary>
    /// Semicolon separated 'key=value' list, max 200 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile_image_hash" field.</summary>
    public const int ProfileImageHashFieldNumber = 8;
    private pb::ByteString profileImageHash_ = pb::ByteString.Empty;
    /// <summary>
    /// SHA256 hash of profile image data, or empty array if no profile image is set, or it is about to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileImageHash {
      get { return profileImageHash_; }
      set {
        profileImageHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail_image_hash" field.</summary>
    public const int ThumbnailImageHashFieldNumber = 9;
    private pb::ByteString thumbnailImageHash_ = pb::ByteString.Empty;
    /// <summary>
    /// SHA256 hash of thumbnail image data, or empty array if no thumbnail image is set, or it is about to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImageHash {
      get { return thumbnailImageHash_; }
      set {
        thumbnailImageHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      if (ProfileImageHash != other.ProfileImageHash) return false;
      if (ThumbnailImageHash != other.ThumbnailImageHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      if (ProfileImageHash.Length != 0) hash ^= ProfileImageHash.GetHashCode();
      if (ThumbnailImageHash.Length != 0) hash ^= ThumbnailImageHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Latitude != 0) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(53);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExtraData);
      }
      if (ProfileImageHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ProfileImageHash);
      }
      if (ThumbnailImageHash.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ThumbnailImageHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      if (ProfileImageHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileImageHash);
      }
      if (ThumbnailImageHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImageHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileInformation other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.ProfileImageHash.Length != 0) {
        ProfileImageHash = other.ProfileImageHash;
      }
      if (other.ThumbnailImageHash.Length != 0) {
        ThumbnailImageHash = other.ThumbnailImageHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 45: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 53: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 58: {
            ExtraData = input.ReadString();
            break;
          }
          case 66: {
            ProfileImageHash = input.ReadBytes();
            break;
          }
          case 74: {
            ThumbnailImageHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Signed description of an identity profile.
  /// </summary>
  public sealed partial class SignedProfileInformation : pb::IMessage<SignedProfileInformation> {
    private static readonly pb::MessageParser<SignedProfileInformation> _parser = new pb::MessageParser<SignedProfileInformation>(() => new SignedProfileInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedProfileInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedProfileInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedProfileInformation(SignedProfileInformation other) : this() {
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedProfileInformation Clone() {
      return new SignedProfileInformation(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Iop.Profileserver.ProfileInformation profile_;
    /// <summary>
    /// Identity profile information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.ProfileInformation Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature of 'profile' value in raw format using private key of the identity that owns the profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedProfileInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedProfileInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedProfileInformation other) {
      if (other == null) {
        return;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Iop.Profileserver.ProfileInformation();
        }
        Profile.MergeFrom(other.Profile);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Iop.Profileserver.ProfileInformation();
            }
            input.ReadMessage(profile_);
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// A customer client cancels the hosting agreement and optionally informs the profile server 
  /// about its new profile server location. The profile server will keep the information about 
  /// identity's new location for some time.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class CancelHostingAgreementRequest : pb::IMessage<CancelHostingAgreementRequest> {
    private static readonly pb::MessageParser<CancelHostingAgreementRequest> _parser = new pb::MessageParser<CancelHostingAgreementRequest>(() => new CancelHostingAgreementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHostingAgreementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementRequest(CancelHostingAgreementRequest other) : this() {
      redirectToNewProfileServer_ = other.redirectToNewProfileServer_;
      newProfileServerNetworkId_ = other.newProfileServerNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementRequest Clone() {
      return new CancelHostingAgreementRequest(this);
    }

    /// <summary>Field number for the "redirect_to_new_profile_server" field.</summary>
    public const int RedirectToNewProfileServerFieldNumber = 1;
    private bool redirectToNewProfileServer_;
    /// <summary>
    /// true, if the client wants to inform the profile server about its new profile server location, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RedirectToNewProfileServer {
      get { return redirectToNewProfileServer_; }
      set {
        redirectToNewProfileServer_ = value;
      }
    }

    /// <summary>Field number for the "new_profile_server_network_id" field.</summary>
    public const int NewProfileServerNetworkIdFieldNumber = 2;
    private pb::ByteString newProfileServerNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'redirect_to_new_profile_server' is true, an identifier of the new profile server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewProfileServerNetworkId {
      get { return newProfileServerNetworkId_; }
      set {
        newProfileServerNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHostingAgreementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHostingAgreementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedirectToNewProfileServer != other.RedirectToNewProfileServer) return false;
      if (NewProfileServerNetworkId != other.NewProfileServerNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedirectToNewProfileServer != false) hash ^= RedirectToNewProfileServer.GetHashCode();
      if (NewProfileServerNetworkId.Length != 0) hash ^= NewProfileServerNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedirectToNewProfileServer != false) {
        output.WriteRawTag(8);
        output.WriteBool(RedirectToNewProfileServer);
      }
      if (NewProfileServerNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewProfileServerNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedirectToNewProfileServer != false) {
        size += 1 + 1;
      }
      if (NewProfileServerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewProfileServerNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHostingAgreementRequest other) {
      if (other == null) {
        return;
      }
      if (other.RedirectToNewProfileServer != false) {
        RedirectToNewProfileServer = other.RedirectToNewProfileServer;
      }
      if (other.NewProfileServerNetworkId.Length != 0) {
        NewProfileServerNetworkId = other.NewProfileServerNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedirectToNewProfileServer = input.ReadBool();
            break;
          }
          case 18: {
            NewProfileServerNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CancelHostingAgreementRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - The identity is not a client of the profile server.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "newProfileServerNetworkId" - 'CancelHostingAgreementRequest.new_profile_server_network_id' is not a valid profile server network identifier.
  /// </summary>
  public sealed partial class CancelHostingAgreementResponse : pb::IMessage<CancelHostingAgreementResponse> {
    private static readonly pb::MessageParser<CancelHostingAgreementResponse> _parser = new pb::MessageParser<CancelHostingAgreementResponse>(() => new CancelHostingAgreementResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHostingAgreementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementResponse(CancelHostingAgreementResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHostingAgreementResponse Clone() {
      return new CancelHostingAgreementResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHostingAgreementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHostingAgreementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHostingAgreementResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Adds (checks-in) one or more application services to the list of services that the customer 
  /// client supports in the current session.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceAddRequest : pb::IMessage<ApplicationServiceAddRequest> {
    private static readonly pb::MessageParser<ApplicationServiceAddRequest> _parser = new pb::MessageParser<ApplicationServiceAddRequest>(() => new ApplicationServiceAddRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest(ApplicationServiceAddRequest other) : this() {
      serviceNames_ = other.serviceNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest Clone() {
      return new ApplicationServiceAddRequest(this);
    }

    /// <summary>Field number for the "service_names" field.</summary>
    public const int ServiceNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_serviceNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> serviceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of application service names to add to the list. If a service name is already 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServiceNames {
      get { return serviceNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serviceNames_.Equals(other.serviceNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serviceNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serviceNames_.WriteTo(output, _repeated_serviceNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serviceNames_.CalculateSize(_repeated_serviceNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddRequest other) {
      if (other == null) {
        return;
      }
      serviceNames_.Add(other.serviceNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceNames_.AddEntriesFrom(input, _repeated_serviceNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ApplicationServiceAddRequest.
  ///
  ///   * ERROR_QUOTA_EXCEEDED - The given set of application services can not be added because the client would have more than the maximum number of enabled services.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "serviceNames[i]" - 'ApplicationServiceAddRequest.service_Names[i]' is not a valid service name, where 'i' is a zero-based index.
  /// </summary>
  public sealed partial class ApplicationServiceAddResponse : pb::IMessage<ApplicationServiceAddResponse> {
    private static readonly pb::MessageParser<ApplicationServiceAddResponse> _parser = new pb::MessageParser<ApplicationServiceAddResponse>(() => new ApplicationServiceAddResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse(ApplicationServiceAddResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse Clone() {
      return new ApplicationServiceAddResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Removes (checks-out) a single application service from the list of services that the customer 
  /// client supports in the current session.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceRemoveRequest : pb::IMessage<ApplicationServiceRemoveRequest> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveRequest> _parser = new pb::MessageParser<ApplicationServiceRemoveRequest>(() => new ApplicationServiceRemoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest(ApplicationServiceRemoveRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest Clone() {
      return new ApplicationServiceRemoveRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    /// Name of the application service to remove. The service must be in the customer client's list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ApplicationServiceRemoveRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - 'ApplicationServiceRemoveRequest.serviceName' does not refer to an application service that was previously added using ApplicationServiceAddRequest.
  /// </summary>
  public sealed partial class ApplicationServiceRemoveResponse : pb::IMessage<ApplicationServiceRemoveResponse> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveResponse> _parser = new pb::MessageParser<ApplicationServiceRemoveResponse>(() => new ApplicationServiceRemoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse(ApplicationServiceRemoveResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse Clone() {
      return new ApplicationServiceRemoveResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Obtains a basic information about an identity hosted on the profile server.
  /// If the identity is online, the information includes a list of application services 
  /// that the identity supports in the currently active session.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class GetProfileInformationRequest : pb::IMessage<GetProfileInformationRequest> {
    private static readonly pb::MessageParser<GetProfileInformationRequest> _parser = new pb::MessageParser<GetProfileInformationRequest>(() => new GetProfileInformationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationRequest(GetProfileInformationRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      includeProfileImage_ = other.includeProfileImage_;
      includeThumbnailImage_ = other.includeThumbnailImage_;
      includeApplicationServices_ = other.includeApplicationServices_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationRequest Clone() {
      return new GetProfileInformationRequest(this);
    }

    /// <summary>Field number for the "identity_network_id" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_profile_image" field.</summary>
    public const int IncludeProfileImageFieldNumber = 2;
    private bool includeProfileImage_;
    /// <summary>
    /// If set to true, the response will include a profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeProfileImage {
      get { return includeProfileImage_; }
      set {
        includeProfileImage_ = value;
      }
    }

    /// <summary>Field number for the "include_thumbnail_image" field.</summary>
    public const int IncludeThumbnailImageFieldNumber = 3;
    private bool includeThumbnailImage_;
    /// <summary>
    /// If set to true, the response will include a thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeThumbnailImage {
      get { return includeThumbnailImage_; }
      set {
        includeThumbnailImage_ = value;
      }
    }

    /// <summary>Field number for the "include_application_services" field.</summary>
    public const int IncludeApplicationServicesFieldNumber = 4;
    private bool includeApplicationServices_;
    /// <summary>
    /// If set to true and the given identity is online, the response will include 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeApplicationServices {
      get { return includeApplicationServices_; }
      set {
        includeApplicationServices_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (IncludeProfileImage != other.IncludeProfileImage) return false;
      if (IncludeThumbnailImage != other.IncludeThumbnailImage) return false;
      if (IncludeApplicationServices != other.IncludeApplicationServices) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (IncludeProfileImage != false) hash ^= IncludeProfileImage.GetHashCode();
      if (IncludeThumbnailImage != false) hash ^= IncludeThumbnailImage.GetHashCode();
      if (IncludeApplicationServices != false) hash ^= IncludeApplicationServices.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeProfileImage);
      }
      if (IncludeThumbnailImage != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeThumbnailImage);
      }
      if (IncludeApplicationServices != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeApplicationServices);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        size += 1 + 1;
      }
      if (IncludeThumbnailImage != false) {
        size += 1 + 1;
      }
      if (IncludeApplicationServices != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.IncludeProfileImage != false) {
        IncludeProfileImage = other.IncludeProfileImage;
      }
      if (other.IncludeThumbnailImage != false) {
        IncludeThumbnailImage = other.IncludeThumbnailImage;
      }
      if (other.IncludeApplicationServices != false) {
        IncludeApplicationServices = other.IncludeApplicationServices;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            IncludeProfileImage = input.ReadBool();
            break;
          }
          case 24: {
            IncludeThumbnailImage = input.ReadBool();
            break;
          }
          case 32: {
            IncludeApplicationServices = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to GetProfileInformationRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - 'GetProfileInformationRequest.identity_network_id' does not identify an identity hosted by the profile server.
  ///   * ERROR_UNINITIALIZED - The target identity's profile has not been initialized yet.
  /// </summary>
  public sealed partial class GetProfileInformationResponse : pb::IMessage<GetProfileInformationResponse> {
    private static readonly pb::MessageParser<GetProfileInformationResponse> _parser = new pb::MessageParser<GetProfileInformationResponse>(() => new GetProfileInformationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationResponse(GetProfileInformationResponse other) : this() {
      isHosted_ = other.isHosted_;
      isTargetProfileServerKnown_ = other.isTargetProfileServerKnown_;
      targetProfileServerNetworkId_ = other.targetProfileServerNetworkId_;
      isOnline_ = other.isOnline_;
      SignedProfile = other.signedProfile_ != null ? other.SignedProfile.Clone() : null;
      profileImage_ = other.profileImage_;
      thumbnailImage_ = other.thumbnailImage_;
      applicationServices_ = other.applicationServices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileInformationResponse Clone() {
      return new GetProfileInformationResponse(this);
    }

    /// <summary>Field number for the "is_hosted" field.</summary>
    public const int IsHostedFieldNumber = 1;
    private bool isHosted_;
    /// <summary>
    /// True if the requested identity is a customer of the profile server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHosted {
      get { return isHosted_; }
      set {
        isHosted_ = value;
      }
    }

    /// <summary>Field number for the "is_target_profile_server_known" field.</summary>
    public const int IsTargetProfileServerKnownFieldNumber = 2;
    private bool isTargetProfileServerKnown_;
    /// <summary>
    /// If 'is_hosted' is false then this is true if the identity's new profile server is known to the profile server. In all other cases, this is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetProfileServerKnown {
      get { return isTargetProfileServerKnown_; }
      set {
        isTargetProfileServerKnown_ = value;
      }
    }

    /// <summary>Field number for the "target_profile_server_network_id" field.</summary>
    public const int TargetProfileServerNetworkIdFieldNumber = 3;
    private pb::ByteString targetProfileServerNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'is_target_profile_server_known' is true then this field contains the identity's new profile server network ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetProfileServerNetworkId {
      get { return targetProfileServerNetworkId_; }
      set {
        targetProfileServerNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_online" field.</summary>
    public const int IsOnlineFieldNumber = 4;
    private bool isOnline_;
    /// <summary>
    /// Following fields are valid only if 'is_hosted' is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "signed_profile" field.</summary>
    public const int SignedProfileFieldNumber = 5;
    private global::Iop.Profileserver.SignedProfileInformation signedProfile_;
    /// <summary>
    /// If 'is_hosted' is true, this is requested identity signed profile information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedProfileInformation SignedProfile {
      get { return signedProfile_; }
      set {
        signedProfile_ = value;
      }
    }

    /// <summary>Field number for the "profile_image" field.</summary>
    public const int ProfileImageFieldNumber = 6;
    private pb::ByteString profileImage_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'is_hosted' is true and if 'GetProfileInformationRequest.include_profile_image' was set, this contains the requested identity's profile image or empty array if the profile has no profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileImage {
      get { return profileImage_; }
      set {
        profileImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail_image" field.</summary>
    public const int ThumbnailImageFieldNumber = 7;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'is_hosted' is true and if 'GetProfileInformationRequest.include_thumbnail_image' was set, this contains the requested identity's thumbnail image or empty array if the profile has no thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_services" field.</summary>
    public const int ApplicationServicesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_applicationServices_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> applicationServices_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If 'is_hosted' is true and if 'GetProfileInformationRequest.include_application_services' was set and if 'is_online' is true, this contains
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApplicationServices {
      get { return applicationServices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHosted != other.IsHosted) return false;
      if (IsTargetProfileServerKnown != other.IsTargetProfileServerKnown) return false;
      if (TargetProfileServerNetworkId != other.TargetProfileServerNetworkId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (!object.Equals(SignedProfile, other.SignedProfile)) return false;
      if (ProfileImage != other.ProfileImage) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if(!applicationServices_.Equals(other.applicationServices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHosted != false) hash ^= IsHosted.GetHashCode();
      if (IsTargetProfileServerKnown != false) hash ^= IsTargetProfileServerKnown.GetHashCode();
      if (TargetProfileServerNetworkId.Length != 0) hash ^= TargetProfileServerNetworkId.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (signedProfile_ != null) hash ^= SignedProfile.GetHashCode();
      if (ProfileImage.Length != 0) hash ^= ProfileImage.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      hash ^= applicationServices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHosted != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHosted);
      }
      if (IsTargetProfileServerKnown != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTargetProfileServerKnown);
      }
      if (TargetProfileServerNetworkId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TargetProfileServerNetworkId);
      }
      if (IsOnline != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOnline);
      }
      if (signedProfile_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SignedProfile);
      }
      if (ProfileImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ThumbnailImage);
      }
      applicationServices_.WriteTo(output, _repeated_applicationServices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHosted != false) {
        size += 1 + 1;
      }
      if (IsTargetProfileServerKnown != false) {
        size += 1 + 1;
      }
      if (TargetProfileServerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetProfileServerNetworkId);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (signedProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedProfile);
      }
      if (ProfileImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      size += applicationServices_.CalculateSize(_repeated_applicationServices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileInformationResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsHosted != false) {
        IsHosted = other.IsHosted;
      }
      if (other.IsTargetProfileServerKnown != false) {
        IsTargetProfileServerKnown = other.IsTargetProfileServerKnown;
      }
      if (other.TargetProfileServerNetworkId.Length != 0) {
        TargetProfileServerNetworkId = other.TargetProfileServerNetworkId;
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.signedProfile_ != null) {
        if (signedProfile_ == null) {
          signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
        }
        SignedProfile.MergeFrom(other.SignedProfile);
      }
      if (other.ProfileImage.Length != 0) {
        ProfileImage = other.ProfileImage;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      applicationServices_.Add(other.applicationServices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHosted = input.ReadBool();
            break;
          }
          case 16: {
            IsTargetProfileServerKnown = input.ReadBool();
            break;
          }
          case 26: {
            TargetProfileServerNetworkId = input.ReadBytes();
            break;
          }
          case 32: {
            IsOnline = input.ReadBool();
            break;
          }
          case 42: {
            if (signedProfile_ == null) {
              signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
            }
            input.ReadMessage(signedProfile_);
            break;
          }
          case 50: {
            ProfileImage = input.ReadBytes();
            break;
          }
          case 58: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 66: {
            applicationServices_.AddEntriesFrom(input, _repeated_applicationServices_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Request to establish a bridged connection between a requestor (the caller) and an identity (the callee) 
  /// hosted on the profile server via one of its supported application service. The callee has to be online, 
  /// otherwise the request will fail.
  ///
  /// The profile server informs the callee about the incoming call and issues a token pair (caller's and 
  /// callee's tokens) to identify the caller and the callee on the Application Service Interface. The callee's 
  /// token is sent to the callee with the information about the incoming call. If the callee wants to accept 
  /// the call, the profile server informs the caller and sends it the caller's token. Both clients are then 
  /// expected to establish new connections to the profile server's Application Service Interface and use their 
  /// tokens to send a message to the other client.
  ///
  /// Roles: clNonCustomer, clCustomer
  ///
  /// Conversation status: Verified
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceRequest : pb::IMessage<CallIdentityApplicationServiceRequest> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceRequest> _parser = new pb::MessageParser<CallIdentityApplicationServiceRequest>(() => new CallIdentityApplicationServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest(CallIdentityApplicationServiceRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest Clone() {
      return new CallIdentityApplicationServiceRequest(this);
    }

    /// <summary>Field number for the "identity_network_id" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// Network identifier of the identity to call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    /// Name of the application service to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CallIdentityApplicationServiceRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_AVAILABLE - The callee is not online, or it failed to reply to the notification within the required time frame.
  ///   * ERROR_REJECTED - The callee rejected the call.
  ///   * ERROR_UNINITIALIZED - The callee's profile has not been initialized yet.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "identityNetworkId" - 'CallIdentityApplicationServiceRequest.identity_network_id' does not identify an identity hosted by the profile server.
  ///     * Response.details == "serviceName" - 'CallIdentityApplicationServiceRequest.service_name' is not an application service supported by the callee in the current session.
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceResponse : pb::IMessage<CallIdentityApplicationServiceResponse> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceResponse> _parser = new pb::MessageParser<CallIdentityApplicationServiceResponse>(() => new CallIdentityApplicationServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse(CallIdentityApplicationServiceResponse other) : this() {
      callerToken_ = other.callerToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse Clone() {
      return new CallIdentityApplicationServiceResponse(this);
    }

    /// <summary>Field number for the "caller_token" field.</summary>
    public const int CallerTokenFieldNumber = 1;
    private pb::ByteString callerToken_ = pb::ByteString.Empty;
    /// <summary>
    /// Token for the caller to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerToken {
      get { return callerToken_; }
      set {
        callerToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerToken != other.CallerToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerToken.Length != 0) hash ^= CallerToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.CallerToken.Length != 0) {
        CallerToken = other.CallerToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// This request is sent by profile server to its customer client (the callee) when another client (the caller) wants 
  /// to establish a call over the customer client's application service.
  ///
  /// The callee is required to send its response to this request within 10 seconds, otherwise the call channel will not be established.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class IncomingCallNotificationRequest : pb::IMessage<IncomingCallNotificationRequest> {
    private static readonly pb::MessageParser<IncomingCallNotificationRequest> _parser = new pb::MessageParser<IncomingCallNotificationRequest>(() => new IncomingCallNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest(IncomingCallNotificationRequest other) : this() {
      callerPublicKey_ = other.callerPublicKey_;
      serviceName_ = other.serviceName_;
      calleeToken_ = other.calleeToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest Clone() {
      return new IncomingCallNotificationRequest(this);
    }

    /// <summary>Field number for the "caller_public_key" field.</summary>
    public const int CallerPublicKeyFieldNumber = 1;
    private pb::ByteString callerPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerPublicKey {
      get { return callerPublicKey_; }
      set {
        callerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    /// Name of the application service the caller wants to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callee_token" field.</summary>
    public const int CalleeTokenFieldNumber = 3;
    private pb::ByteString calleeToken_ = pb::ByteString.Empty;
    /// <summary>
    /// Token for the callee to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CalleeToken {
      get { return calleeToken_; }
      set {
        calleeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerPublicKey != other.CallerPublicKey) return false;
      if (ServiceName != other.ServiceName) return false;
      if (CalleeToken != other.CalleeToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerPublicKey.Length != 0) hash ^= CallerPublicKey.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (CalleeToken.Length != 0) hash ^= CalleeToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerPublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CalleeToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CalleeToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallerPublicKey.Length != 0) {
        CallerPublicKey = other.CallerPublicKey;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.CalleeToken.Length != 0) {
        CalleeToken = other.CalleeToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerPublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            CalleeToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CallIdentityApplicationServiceRequest. This is sent by the customer client (the callee) 
  /// to its profile server.
  ///
  /// Specific Error Responses:
  ///   * ERROR_REJECTED - The callee rejects the call.
  /// </summary>
  public sealed partial class IncomingCallNotificationResponse : pb::IMessage<IncomingCallNotificationResponse> {
    private static readonly pb::MessageParser<IncomingCallNotificationResponse> _parser = new pb::MessageParser<IncomingCallNotificationResponse>(() => new IncomingCallNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse(IncomingCallNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse Clone() {
      return new IncomingCallNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 
  /// This request is sent by a client to the profile server in order to deliver a message to the other client 
  /// over the opened application service call channel.
  ///
  /// After the client connects to clAppService port, it sends an initialization message using this request 
  /// to inform the profile server about its identity. This initialization message is not delivered to the other 
  /// party and the profile server responds to this initialization message only after the other party is also 
  /// connected. In the initialization message, the 'message' field is ignored. If the other party fails to join 
  /// the channel within 30 seconds, the profile server closes the existing connection to the connected client.
  ///
  /// Until the client receives a reply from the profile server to its initialization message, it is not allowed 
  /// to send other ApplicationServiceSendMessageRequest. This would be an error and the profile server would
  /// destroy the channel.
  ///
  /// If neither of clients connects to clAppService port or sends an inititial message within 30 seconds after 
  /// the call was initiated, the profile server destroys the channel.
  /// 
  /// Note that the clients are allowed to disconnect from clNonCustomer/clCustomer port once the caller receives 
  /// CallIdentityApplicationServiceResponse and the callee sends IncomingCallNotificationResponse.
  ///
  /// Each client is only allowed to have 20 ApplicationServiceSendMessageRequest messages pending, which means
  /// that there was no ApplicationServiceSendMessageResponse sent to the client. If a client attempts to send
  /// another message while having 20 pending messages, the profile server destroys the call channel.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageRequest : pb::IMessage<ApplicationServiceSendMessageRequest> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageRequest> _parser = new pb::MessageParser<ApplicationServiceSendMessageRequest>(() => new ApplicationServiceSendMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest(ApplicationServiceSendMessageRequest other) : this() {
      token_ = other.token_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest Clone() {
      return new ApplicationServiceSendMessageRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// Message to send to the other client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
          case 18: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ApplicationServiceSendMessageRequest. This confirms that a single message was processed in the session.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - 'ApplicationServiceSendMessageRequest.token' is not a valid token. This can have many causes.
  ///                       The token itself can have invalid format, or no such token was ever issued by the server. 
  ///                       However, it can also be the case that the token was valid in the past but the session
  ///                       was destroyed by the server for any reason and thus the token is no longer valid.
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageResponse : pb::IMessage<ApplicationServiceSendMessageResponse> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageResponse> _parser = new pb::MessageParser<ApplicationServiceSendMessageResponse>(() => new ApplicationServiceSendMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse(ApplicationServiceSendMessageResponse other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse Clone() {
      return new ApplicationServiceSendMessageResponse(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// This request is sent by a client to the profile server in order to finish the session to an application service
  /// that was initiated by an CallIdentityApplicationServiceRequest call. Also, the same message is relayed to the
  /// other peer of the session by the profile server so the peer can also free up resources consumed by the session.
  ///
  /// Both peers of a session can initiate closing the session. Also, profile server will inform clients with this message
  /// in case it destroys the session for any reason (e.g. a peer lost network connection for too long)
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class CloseCallRequest : pb::IMessage<CloseCallRequest> {
    private static readonly pb::MessageParser<CloseCallRequest> _parser = new pb::MessageParser<CloseCallRequest>(() => new CloseCallRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseCallRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallRequest(CloseCallRequest other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallRequest Clone() {
      return new CloseCallRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseCallRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseCallRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseCallRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CloseCallRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - 'ApplicationServiceSendMessageRequest.token' is not a valid token.
  /// </summary>
  public sealed partial class CloseCallResponse : pb::IMessage<CloseCallResponse> {
    private static readonly pb::MessageParser<CloseCallResponse> _parser = new pb::MessageParser<CloseCallResponse>(() => new CloseCallResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseCallResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallResponse(CloseCallResponse other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseCallResponse Clone() {
      return new CloseCallResponse(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseCallResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseCallResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseCallResponse other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Obsolete, use ApplicationServiceSendMessageRequest
  /// </summary>
  [global::System.ObsoleteAttribute]
  public sealed partial class ApplicationServiceReceiveMessageNotificationRequest : pb::IMessage<ApplicationServiceReceiveMessageNotificationRequest> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest>(() => new ApplicationServiceReceiveMessageNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest(ApplicationServiceReceiveMessageNotificationRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest Clone() {
      return new ApplicationServiceReceiveMessageNotificationRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Obsolete, use ApplicationServiceSendMessageResponse
  /// 
  /// </summary>
  [global::System.ObsoleteAttribute]
  public sealed partial class ApplicationServiceReceiveMessageNotificationResponse : pb::IMessage<ApplicationServiceReceiveMessageNotificationResponse> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse>(() => new ApplicationServiceReceiveMessageNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse(ApplicationServiceReceiveMessageNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse Clone() {
      return new ApplicationServiceReceiveMessageNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Obtains identity profiles statistics from a profile server.
  ///
  /// Only actively hosted profiles are counted regardless of whether or not the profiles are initialized.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class ProfileStatsRequest : pb::IMessage<ProfileStatsRequest> {
    private static readonly pb::MessageParser<ProfileStatsRequest> _parser = new pb::MessageParser<ProfileStatsRequest>(() => new ProfileStatsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest(ProfileStatsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest Clone() {
      return new ProfileStatsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ProfileStatsRequest.
  /// 
  /// </summary>
  public sealed partial class ProfileStatsResponse : pb::IMessage<ProfileStatsResponse> {
    private static readonly pb::MessageParser<ProfileStatsResponse> _parser = new pb::MessageParser<ProfileStatsResponse>(() => new ProfileStatsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse(ProfileStatsResponse other) : this() {
      stats_ = other.stats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse Clone() {
      return new ProfileStatsResponse(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.ProfileStatsItem> _repeated_stats_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Profileserver.ProfileStatsItem.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.ProfileStatsItem> stats_ = new pbc::RepeatedField<global::Iop.Profileserver.ProfileStatsItem>();
    /// <summary>
    /// List of profile statistics grouped by identity type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.ProfileStatsItem> Stats {
      get { return stats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stats_.Equals(other.stats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stats_.WriteTo(output, _repeated_stats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stats_.CalculateSize(_repeated_stats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsResponse other) {
      if (other == null) {
        return;
      }
      stats_.Add(other.stats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stats_.AddEntriesFrom(input, _repeated_stats_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Statistical information on identities of a specific type.
  /// </summary>
  public sealed partial class ProfileStatsItem : pb::IMessage<ProfileStatsItem> {
    private static readonly pb::MessageParser<ProfileStatsItem> _parser = new pb::MessageParser<ProfileStatsItem>(() => new ProfileStatsItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem(ProfileStatsItem other) : this() {
      identityType_ = other.identityType_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem Clone() {
      return new ProfileStatsItem(this);
    }

    /// <summary>Field number for the "identity_type" field.</summary>
    public const int IdentityTypeFieldNumber = 1;
    private string identityType_ = "";
    /// <summary>
    /// Type of identity. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    /// Number of profiles hosted on the profile server of the specific type of identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityType != other.IdentityType) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsItem other) {
      if (other == null) {
        return;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityType = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Asks a profile server for a list of all identities that match the search criteria. This search never returns 
  /// profiles of old customer identities who cancelled their hosting agreements, even if the profile server still 
  /// holds some information about those identities.
  ///
  /// Each search request only produces a limited number of results. The maximal size of the first set of results 
  /// is provided by 'maxResponseRecordCount' field. The response to this message contains up to 'maxResponseRecordCount' 
  /// results. If there are more results available, they are saved to the server's cache, which enables the client 
  /// to obtain more results with subsequent ProfileSearchPartRequest messages.
  ///
  /// The profile server will not save more than 'maxTotalRecordCount' search requests. 
  /// The profile server has to allow the client to get additional results at least 1 minute from receiving 
  /// ProfileSearchRequest, but it can maintain the results cache for longer than that.
  ///
  /// Once the client sends another ProfileSearchRequest, or if it disconnects, the old search results are discarded.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class ProfileSearchRequest : pb::IMessage<ProfileSearchRequest> {
    private static readonly pb::MessageParser<ProfileSearchRequest> _parser = new pb::MessageParser<ProfileSearchRequest>(() => new ProfileSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest(ProfileSearchRequest other) : this() {
      includeHostedOnly_ = other.includeHostedOnly_;
      includeThumbnailImages_ = other.includeThumbnailImages_;
      maxResponseRecordCount_ = other.maxResponseRecordCount_;
      maxTotalRecordCount_ = other.maxTotalRecordCount_;
      type_ = other.type_;
      name_ = other.name_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      radius_ = other.radius_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest Clone() {
      return new ProfileSearchRequest(this);
    }

    /// <summary>Field number for the "include_hosted_only" field.</summary>
    public const int IncludeHostedOnlyFieldNumber = 1;
    private bool includeHostedOnly_;
    /// <summary>
    /// If set to true, the profile server only returns profiles of its own customers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeHostedOnly {
      get { return includeHostedOnly_; }
      set {
        includeHostedOnly_ = value;
      }
    }

    /// <summary>Field number for the "include_thumbnail_images" field.</summary>
    public const int IncludeThumbnailImagesFieldNumber = 2;
    private bool includeThumbnailImages_;
    /// <summary>
    /// If set to false, profiles from the server's neighborhood can be included in the result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeThumbnailImages {
      get { return includeThumbnailImages_; }
      set {
        includeThumbnailImages_ = value;
      }
    }

    /// <summary>Field number for the "max_response_record_count" field.</summary>
    public const int MaxResponseRecordCountFieldNumber = 3;
    private uint maxResponseRecordCount_;
    /// <summary>
    /// Maximal number of results to be delivered in the response. If 'include_thumbnail_images'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxResponseRecordCount {
      get { return maxResponseRecordCount_; }
      set {
        maxResponseRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "max_total_record_count" field.</summary>
    public const int MaxTotalRecordCountFieldNumber = 4;
    private uint maxTotalRecordCount_;
    /// <summary>
    /// is true, this has to be an integer between 1 and 100. If 'include_thumbnail_images' is false,
    /// this has to be an integer between 1 and 1,000. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTotalRecordCount {
      get { return maxTotalRecordCount_; }
      set {
        maxTotalRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private string type_ = "";
    /// <summary>
    /// Search filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    /// of identity types that match the wildcard string. If empty, all identity types are allowed.
    /// Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 7;
    private int latitude_;
    /// <summary>
    /// with names that match the wildcard string. If empty, all profile names are allowed.
    /// Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 8;
    private int longitude_;
    /// <summary>
    /// it is, in combination with 'longitude' and 'radius', a specification of target area, 
    /// where the identity has to be located (according to its profile information) in order to be 
    /// included in the search results. If NO_LOCATION, 'longitude' and 'radius' are ignored 
    /// and all locations are allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 9;
    private uint radius_;
    /// <summary>
    /// If 'latitude' is not NO_LOCATION, this is target location radius in metres.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 10;
    private string extraData_ = "";
    /// <summary>
    /// RegexType or empty string. If not empty, it specifies the regular expression that identity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeHostedOnly != other.IncludeHostedOnly) return false;
      if (IncludeThumbnailImages != other.IncludeThumbnailImages) return false;
      if (MaxResponseRecordCount != other.MaxResponseRecordCount) return false;
      if (MaxTotalRecordCount != other.MaxTotalRecordCount) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (Radius != other.Radius) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeHostedOnly != false) hash ^= IncludeHostedOnly.GetHashCode();
      if (IncludeThumbnailImages != false) hash ^= IncludeThumbnailImages.GetHashCode();
      if (MaxResponseRecordCount != 0) hash ^= MaxResponseRecordCount.GetHashCode();
      if (MaxTotalRecordCount != 0) hash ^= MaxTotalRecordCount.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncludeHostedOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeHostedOnly);
      }
      if (IncludeThumbnailImages != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeThumbnailImages);
      }
      if (MaxResponseRecordCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxResponseRecordCount);
      }
      if (MaxTotalRecordCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxTotalRecordCount);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Latitude != 0) {
        output.WriteRawTag(61);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(69);
        output.WriteSFixed32(Longitude);
      }
      if (Radius != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Radius);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeHostedOnly != false) {
        size += 1 + 1;
      }
      if (IncludeThumbnailImages != false) {
        size += 1 + 1;
      }
      if (MaxResponseRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseRecordCount);
      }
      if (MaxTotalRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTotalRecordCount);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeHostedOnly != false) {
        IncludeHostedOnly = other.IncludeHostedOnly;
      }
      if (other.IncludeThumbnailImages != false) {
        IncludeThumbnailImages = other.IncludeThumbnailImages;
      }
      if (other.MaxResponseRecordCount != 0) {
        MaxResponseRecordCount = other.MaxResponseRecordCount;
      }
      if (other.MaxTotalRecordCount != 0) {
        MaxTotalRecordCount = other.MaxTotalRecordCount;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncludeHostedOnly = input.ReadBool();
            break;
          }
          case 16: {
            IncludeThumbnailImages = input.ReadBool();
            break;
          }
          case 24: {
            MaxResponseRecordCount = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxTotalRecordCount = input.ReadUInt32();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 61: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 69: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 72: {
            Radius = input.ReadUInt32();
            break;
          }
          case 82: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ProfileSearchRequest.
  ///
  /// If 'max_response_record_count' is lower than 'total_record_count', the client is allowed to send 
  /// ProfileSearchPartRequest messages to obtain more results.
  ///
  /// If a client is looking for a small set of profiles within a large area, it might need to perform 
  /// multiple search queries across several profile servers in the target area in order to "cover" it. 
  /// 'covered_servers' contains a list of profile servers forming the neighborhood of the profile server 
  /// being queried. Neighborhood servers share their profile databases and a query to one server will 
  /// thus cover profile servers in its neighborhood. Note that this information is not much relevant 
  /// in case the number of result is large and the number of results is limited by the protocol. 
  /// In this case, it is possible that the profile server returns results from profile databases only 
  /// from a small subset of its neighborhood provided in the 'covered_servers' value, or even only from 
  /// its own database.
  ///
  /// Specific Error Responses:
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "maxResponseRecordCount" - 'ProfileSearchRequest.max_response_record_count' is not within the required range.
  ///     * Response.details == "maxTotalRecordCount" - 'ProfileSearchRequest.max_total_record_count' is not within the required range or the value is less than 'ProfileSearchRequest.max_response_record_count'.
  ///     * Response.details == "type" - 'ProfileSearchRequest.type' is too long.
  ///     * Response.details == "name" - 'ProfileSearchRequest.name' is too long.
  ///     * Response.details == "latitude" - 'ProfileSearchRequest.latitude' is not a valid location latitude.
  ///     * Response.details == "longitude" - 'ProfileSearchRequest.longitude' is not a valid location longitude.
  ///     * Response.details == "radius" - 'ProfileSearchRequest.radius' is not a valid radius value.
  ///     * Response.details == "extraData" - 'ProfileSearchRequest.extra_data' is too long or it is not a valid value of RegexType.
  /// </summary>
  public sealed partial class ProfileSearchResponse : pb::IMessage<ProfileSearchResponse> {
    private static readonly pb::MessageParser<ProfileSearchResponse> _parser = new pb::MessageParser<ProfileSearchResponse>(() => new ProfileSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse(ProfileSearchResponse other) : this() {
      totalRecordCount_ = other.totalRecordCount_;
      maxResponseRecordCount_ = other.maxResponseRecordCount_;
      coveredServers_ = other.coveredServers_.Clone();
      profiles_ = other.profiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse Clone() {
      return new ProfileSearchResponse(this);
    }

    /// <summary>Field number for the "total_record_count" field.</summary>
    public const int TotalRecordCountFieldNumber = 1;
    private uint totalRecordCount_;
    /// <summary>
    /// Total number of profiles that matched the search criteria. Up to 'max_response_record_count' of them are in 'profiles' list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRecordCount {
      get { return totalRecordCount_; }
      set {
        totalRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "max_response_record_count" field.</summary>
    public const int MaxResponseRecordCountFieldNumber = 2;
    private uint maxResponseRecordCount_;
    /// <summary>
    /// Limit of the number of results provided. This is equal to 'ProfileSearchRequest.max_response_record_count'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxResponseRecordCount {
      get { return maxResponseRecordCount_; }
      set {
        maxResponseRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "covered_servers" field.</summary>
    public const int CoveredServersFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_coveredServers_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> coveredServers_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of network identifiers of profile servers whose profile databases were used to produce the results, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> CoveredServers {
      get { return coveredServers_; }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.ProfileQueryInformation> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(34, global::Iop.Profileserver.ProfileQueryInformation.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation> profiles_ = new pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation>();
    /// <summary>
    /// Search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation> Profiles {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRecordCount != other.TotalRecordCount) return false;
      if (MaxResponseRecordCount != other.MaxResponseRecordCount) return false;
      if(!coveredServers_.Equals(other.coveredServers_)) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRecordCount != 0) hash ^= TotalRecordCount.GetHashCode();
      if (MaxResponseRecordCount != 0) hash ^= MaxResponseRecordCount.GetHashCode();
      hash ^= coveredServers_.GetHashCode();
      hash ^= profiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalRecordCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalRecordCount);
      }
      if (MaxResponseRecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxResponseRecordCount);
      }
      coveredServers_.WriteTo(output, _repeated_coveredServers_codec);
      profiles_.WriteTo(output, _repeated_profiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRecordCount);
      }
      if (MaxResponseRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseRecordCount);
      }
      size += coveredServers_.CalculateSize(_repeated_coveredServers_codec);
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalRecordCount != 0) {
        TotalRecordCount = other.TotalRecordCount;
      }
      if (other.MaxResponseRecordCount != 0) {
        MaxResponseRecordCount = other.MaxResponseRecordCount;
      }
      coveredServers_.Add(other.coveredServers_);
      profiles_.Add(other.profiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalRecordCount = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxResponseRecordCount = input.ReadUInt32();
            break;
          }
          case 26: {
            coveredServers_.AddEntriesFrom(input, _repeated_coveredServers_codec);
            break;
          }
          case 34: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Information about a single profile record from a profile search query.
  /// </summary>
  public sealed partial class ProfileQueryInformation : pb::IMessage<ProfileQueryInformation> {
    private static readonly pb::MessageParser<ProfileQueryInformation> _parser = new pb::MessageParser<ProfileQueryInformation>(() => new ProfileQueryInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileQueryInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileQueryInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileQueryInformation(ProfileQueryInformation other) : this() {
      isHosted_ = other.isHosted_;
      hostingServerNetworkId_ = other.hostingServerNetworkId_;
      isOnline_ = other.isOnline_;
      SignedProfile = other.signedProfile_ != null ? other.SignedProfile.Clone() : null;
      thumbnailImage_ = other.thumbnailImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileQueryInformation Clone() {
      return new ProfileQueryInformation(this);
    }

    /// <summary>Field number for the "is_hosted" field.</summary>
    public const int IsHostedFieldNumber = 1;
    private bool isHosted_;
    /// <summary>
    /// True if the requested identity is a customer of the profile server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHosted {
      get { return isHosted_; }
      set {
        isHosted_ = value;
      }
    }

    /// <summary>Field number for the "hosting_server_network_id" field.</summary>
    public const int HostingServerNetworkIdFieldNumber = 2;
    private pb::ByteString hostingServerNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'is_hosted' is false, this field contains the network ID of the neighbor profile server that hosts the target profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HostingServerNetworkId {
      get { return hostingServerNetworkId_; }
      set {
        hostingServerNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_online" field.</summary>
    public const int IsOnlineFieldNumber = 3;
    private bool isOnline_;
    /// <summary>
    /// If 'is_hosted' is true, this is true if the requested identity is currently online.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "signed_profile" field.</summary>
    public const int SignedProfileFieldNumber = 4;
    private global::Iop.Profileserver.SignedProfileInformation signedProfile_;
    /// <summary>
    /// Requested identity signed profile information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedProfileInformation SignedProfile {
      get { return signedProfile_; }
      set {
        signedProfile_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail_image" field.</summary>
    public const int ThumbnailImageFieldNumber = 5;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'ProfileSearchRequest.include_thumbnail_images' was set, this contains the identity's thumbnail image, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileQueryInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileQueryInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHosted != other.IsHosted) return false;
      if (HostingServerNetworkId != other.HostingServerNetworkId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (!object.Equals(SignedProfile, other.SignedProfile)) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHosted != false) hash ^= IsHosted.GetHashCode();
      if (HostingServerNetworkId.Length != 0) hash ^= HostingServerNetworkId.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (signedProfile_ != null) hash ^= SignedProfile.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHosted != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHosted);
      }
      if (HostingServerNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(HostingServerNetworkId);
      }
      if (IsOnline != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOnline);
      }
      if (signedProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ThumbnailImage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHosted != false) {
        size += 1 + 1;
      }
      if (HostingServerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HostingServerNetworkId);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (signedProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileQueryInformation other) {
      if (other == null) {
        return;
      }
      if (other.IsHosted != false) {
        IsHosted = other.IsHosted;
      }
      if (other.HostingServerNetworkId.Length != 0) {
        HostingServerNetworkId = other.HostingServerNetworkId;
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.signedProfile_ != null) {
        if (signedProfile_ == null) {
          signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
        }
        SignedProfile.MergeFrom(other.SignedProfile);
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHosted = input.ReadBool();
            break;
          }
          case 18: {
            HostingServerNetworkId = input.ReadBytes();
            break;
          }
          case 24: {
            IsOnline = input.ReadBool();
            break;
          }
          case 34: {
            if (signedProfile_ == null) {
              signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
            }
            input.ReadMessage(signedProfile_);
            break;
          }
          case 42: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Request to get another part from the search query.
  ///
  /// This request only makes sense only if the client previously sent ProfileSearchRequest to 
  /// the profile server and the search result contained more records than the server provided 
  /// in the ProfileSearchResponse, and the search results have not expired yet.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class ProfileSearchPartRequest : pb::IMessage<ProfileSearchPartRequest> {
    private static readonly pb::MessageParser<ProfileSearchPartRequest> _parser = new pb::MessageParser<ProfileSearchPartRequest>(() => new ProfileSearchPartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchPartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest(ProfileSearchPartRequest other) : this() {
      recordIndex_ = other.recordIndex_;
      recordCount_ = other.recordCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest Clone() {
      return new ProfileSearchPartRequest(this);
    }

    /// <summary>Field number for the "record_index" field.</summary>
    public const int RecordIndexFieldNumber = 1;
    private uint recordIndex_;
    /// <summary>
    /// Zero-based record index of the first result to retrieve. It has to be an integer between 0 and 'ProfileSearchResponse.total_record_count' - 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordIndex {
      get { return recordIndex_; }
      set {
        recordIndex_ = value;
      }
    }

    /// <summary>Field number for the "record_count" field.</summary>
    public const int RecordCountFieldNumber = 2;
    private uint recordCount_;
    /// <summary>
    /// Number of results to obtain. 'record_index' + 'record_count' must not be greater than 'ProfileSearchResponse.total_record_count'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchPartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchPartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordIndex != other.RecordIndex) return false;
      if (RecordCount != other.RecordCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordIndex != 0) hash ^= RecordIndex.GetHashCode();
      if (RecordCount != 0) hash ^= RecordCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordIndex);
      }
      if (RecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecordCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordIndex);
      }
      if (RecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchPartRequest other) {
      if (other == null) {
        return;
      }
      if (other.RecordIndex != 0) {
        RecordIndex = other.RecordIndex;
      }
      if (other.RecordCount != 0) {
        RecordCount = other.RecordCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            RecordCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to ProfileSearchPartRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_AVAILABLE - No cached search results are available. Either the client did not send ProfileSearchRequest previously
  ///                           in this session, or its results have expired already.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "record_index" - 'ProfileSearchPartRequest.record_index' is not a valid index of the result.
  ///     * Response.details == "record_count" - 'ProfileSearchPartRequest.record_count' is not a valid number of results to obtain in combination with 'ProfileSearchPartRequest.record_index'.
  /// </summary>
  public sealed partial class ProfileSearchPartResponse : pb::IMessage<ProfileSearchPartResponse> {
    private static readonly pb::MessageParser<ProfileSearchPartResponse> _parser = new pb::MessageParser<ProfileSearchPartResponse>(() => new ProfileSearchPartResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchPartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse(ProfileSearchPartResponse other) : this() {
      recordIndex_ = other.recordIndex_;
      recordCount_ = other.recordCount_;
      profiles_ = other.profiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse Clone() {
      return new ProfileSearchPartResponse(this);
    }

    /// <summary>Field number for the "record_index" field.</summary>
    public const int RecordIndexFieldNumber = 1;
    private uint recordIndex_;
    /// <summary>
    /// Index of the first result. Copy of 'ProfileSearchPartRequest.record_index' value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordIndex {
      get { return recordIndex_; }
      set {
        recordIndex_ = value;
      }
    }

    /// <summary>Field number for the "record_count" field.</summary>
    public const int RecordCountFieldNumber = 2;
    private uint recordCount_;
    /// <summary>
    /// Number of results. Copy of 'ProfileSearchPartRequest.record_count' value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.ProfileQueryInformation> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(26, global::Iop.Profileserver.ProfileQueryInformation.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation> profiles_ = new pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation>();
    /// <summary>
    /// Search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.ProfileQueryInformation> Profiles {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchPartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchPartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordIndex != other.RecordIndex) return false;
      if (RecordCount != other.RecordCount) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordIndex != 0) hash ^= RecordIndex.GetHashCode();
      if (RecordCount != 0) hash ^= RecordCount.GetHashCode();
      hash ^= profiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordIndex);
      }
      if (RecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecordCount);
      }
      profiles_.WriteTo(output, _repeated_profiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordIndex);
      }
      if (RecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordCount);
      }
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchPartResponse other) {
      if (other == null) {
        return;
      }
      if (other.RecordIndex != 0) {
        RecordIndex = other.RecordIndex;
      }
      if (other.RecordCount != 0) {
        RecordCount = other.RecordCount;
      }
      profiles_.Add(other.profiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            RecordCount = input.ReadUInt32();
            break;
          }
          case 26: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A customer client announces a relation between its identity and another identity using 
  /// a relationship card.
  ///
  /// The 'card_application' field is signed with a signature in 'ConversationRequest.signature'. 
  /// This signature can be used to prove that the card recipient wanted to use the card for 
  /// the given purpose. The signature on the card of the card's issuer then can be used to prove 
  /// that the issuer issued the card for the recipient. The customer's public key has to be equal 
  /// to the card's recipient public key.
  ///
  /// Each profile server is allowed to define its own limit of number of relations that a single 
  /// identity can have. However, this limit should not exceed the maximal limit of 2,000 relations, 
  /// which is given by the maximal protocol message size.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class AddRelatedIdentityRequest : pb::IMessage<AddRelatedIdentityRequest> {
    private static readonly pb::MessageParser<AddRelatedIdentityRequest> _parser = new pb::MessageParser<AddRelatedIdentityRequest>(() => new AddRelatedIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRelatedIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest(AddRelatedIdentityRequest other) : this() {
      CardApplication = other.cardApplication_ != null ? other.CardApplication.Clone() : null;
      SignedCard = other.signedCard_ != null ? other.SignedCard.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest Clone() {
      return new AddRelatedIdentityRequest(this);
    }

    /// <summary>Field number for the "card_application" field.</summary>
    public const int CardApplicationFieldNumber = 1;
    private global::Iop.Profileserver.CardApplicationInformation cardApplication_;
    /// <summary>
    /// Description of the relationship, which must correspond to the given 'card' - i.e. 'card_application.card_id' 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CardApplicationInformation CardApplication {
      get { return cardApplication_; }
      set {
        cardApplication_ = value;
      }
    }

    /// <summary>Field number for the "signed_card" field.</summary>
    public const int SignedCardFieldNumber = 2;
    private global::Iop.Profileserver.SignedRelationshipCard signedCard_;
    /// <summary>
    /// has to match 'signed_card.card.card_id'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedRelationshipCard SignedCard {
      get { return signedCard_; }
      set {
        signedCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRelatedIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRelatedIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardApplication, other.CardApplication)) return false;
      if (!object.Equals(SignedCard, other.SignedCard)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardApplication_ != null) hash ^= CardApplication.GetHashCode();
      if (signedCard_ != null) hash ^= SignedCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardApplication_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardApplication);
      }
      if (signedCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SignedCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardApplication_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardApplication);
      }
      if (signedCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedCard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRelatedIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.cardApplication_ != null) {
        if (cardApplication_ == null) {
          cardApplication_ = new global::Iop.Profileserver.CardApplicationInformation();
        }
        CardApplication.MergeFrom(other.CardApplication);
      }
      if (other.signedCard_ != null) {
        if (signedCard_ == null) {
          signedCard_ = new global::Iop.Profileserver.SignedRelationshipCard();
        }
        SignedCard.MergeFrom(other.SignedCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cardApplication_ == null) {
              cardApplication_ = new global::Iop.Profileserver.CardApplicationInformation();
            }
            input.ReadMessage(cardApplication_);
            break;
          }
          case 18: {
            if (signedCard_ == null) {
              signedCard_ = new global::Iop.Profileserver.SignedRelationshipCard();
            }
            input.ReadMessage(signedCard_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to AddRelatedIdentityRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_QUOTA_EXCEEDED - The caller has reached its limit for a number of related identities on its profile.
  ///   * ERROR_INVALID_SIGNATURE - The client's signature of the 'AddRelatedIdentityRequest.card_application' in 'ConversationRequest.signature' is not valid.
  ///   * ERROR_ALREADY_EXISTS - A relationship with application identifier equal to 'AddRelatedIdentityRequest.card_application.application_id' already exists.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "cardApplication.cardId" - 'AddRelatedIdentityRequest.card_application.card_id' does not match 'AddRelatedIdentityRequest.signed_card.card.card_id'.
  ///     * Response.details == "cardApplication.applicationId" - 'AddRelatedIdentityRequest.card_application.application_id' is not a valid application identifier.
  ///     * Response.details == "signedCard.issuerSignature" - 'AddRelatedIdentityRequest.signed_card.issuer_signature' is not a valid signature of 'AddRelatedIdentityRequest.signed_card.card' structure
  ///                                                          using private key of the issuer whose public key is 'AddRelatedIdentityRequest.signed_card.card.issuer_publicKey'.
  ///     * Response.details == "signedCard.card.cardId" - 'AddRelatedIdentityRequest.signed_card.card.card_id' is not a valid SHA256 hash of 'AddRelatedIdentityRequest.signed_card.card' structure.
  ///     * Response.details == "signedCard.card.version" - 'AddRelatedIdentityRequest.signed_card.card.version' is not a valid card version.
  ///     * Response.details == "signedCard.card.type" - 'AddRelatedIdentityRequest.signed_card.card.type' is not a valid card type.
  ///     * Response.details == "signedCard.card.issuerPublicKey" - 'AddRelatedIdentityRequest.signed_card.card.issuer_public_key' is not a valid public key.
  ///     * Response.details == "signedCard.card.recipientPublicKey" - 'AddRelatedIdentityRequest.signed_card.card.recipient_public_key' is not the public key of the caller.
  ///     * Response.details == "signedCard.card.validFrom" - 'AddRelatedIdentityRequest.signed_card.card.valid_from' is greater than 'AddRelatedIdentityRequest.signed_card.card.valid_to' or it does not represent a valid timestamp value.
  ///     * Response.details == "signedCard.card.validTo" - 'AddRelatedIdentityRequest.signed_card.card.valid_to' does not represent a valid timestamp value.
  /// </summary>
  public sealed partial class AddRelatedIdentityResponse : pb::IMessage<AddRelatedIdentityResponse> {
    private static readonly pb::MessageParser<AddRelatedIdentityResponse> _parser = new pb::MessageParser<AddRelatedIdentityResponse>(() => new AddRelatedIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRelatedIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse(AddRelatedIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse Clone() {
      return new AddRelatedIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRelatedIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRelatedIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRelatedIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// A customer client removes the announcement of a relationship between its identity and another identity.
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class RemoveRelatedIdentityRequest : pb::IMessage<RemoveRelatedIdentityRequest> {
    private static readonly pb::MessageParser<RemoveRelatedIdentityRequest> _parser = new pb::MessageParser<RemoveRelatedIdentityRequest>(() => new RemoveRelatedIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveRelatedIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest(RemoveRelatedIdentityRequest other) : this() {
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest Clone() {
      return new RemoveRelatedIdentityRequest(this);
    }

    /// <summary>Field number for the "application_id" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private pb::ByteString applicationId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier of the card application to remove. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveRelatedIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveRelatedIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveRelatedIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ApplicationId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to RemoveRelatedIdentityRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - A relationship with application identifier equal to 'AddRelatedIdentityRequest.card_application.application_id' was not found.
  /// </summary>
  public sealed partial class RemoveRelatedIdentityResponse : pb::IMessage<RemoveRelatedIdentityResponse> {
    private static readonly pb::MessageParser<RemoveRelatedIdentityResponse> _parser = new pb::MessageParser<RemoveRelatedIdentityResponse>(() => new RemoveRelatedIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveRelatedIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse(RemoveRelatedIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse Clone() {
      return new RemoveRelatedIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveRelatedIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveRelatedIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveRelatedIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Description of a relationship card application. It consists of a card identifier, which is a hash 
  /// of the card data and the 'application_id', which binds the use of the card with some other object, 
  /// transaction, or action, which is specific for the given use of the card.
  /// </summary>
  public sealed partial class CardApplicationInformation : pb::IMessage<CardApplicationInformation> {
    private static readonly pb::MessageParser<CardApplicationInformation> _parser = new pb::MessageParser<CardApplicationInformation>(() => new CardApplicationInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardApplicationInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation(CardApplicationInformation other) : this() {
      cardId_ = other.cardId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation Clone() {
      return new CardApplicationInformation(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private pb::ByteString cardId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier of a relationship card. See 'RelationshipCard.card_id'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_id" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private pb::ByteString applicationId_ = pb::ByteString.Empty;
    /// <summary>
    /// Unique identifier of the action that represents using the card. This is used to bind the application of the card 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardApplicationInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardApplicationInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CardId);
      }
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardId);
      }
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardApplicationInformation other) {
      if (other == null) {
        return;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CardId = input.ReadBytes();
            break;
          }
          case 18: {
            ApplicationId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Description of a relationship card signed by its issuer. Only the identifier of the card is 
  /// signed, but since this is a SHA256 hash of all the card's fields (except for the ID itself), 
  /// the signature of the identifier effectively signs the whole card information.
  /// </summary>
  public sealed partial class SignedRelationshipCard : pb::IMessage<SignedRelationshipCard> {
    private static readonly pb::MessageParser<SignedRelationshipCard> _parser = new pb::MessageParser<SignedRelationshipCard>(() => new SignedRelationshipCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedRelationshipCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard(SignedRelationshipCard other) : this() {
      Card = other.card_ != null ? other.Card.Clone() : null;
      issuerSignature_ = other.issuerSignature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard Clone() {
      return new SignedRelationshipCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Iop.Profileserver.RelationshipCard card_;
    /// <summary>
    /// Description of the relationship card.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.RelationshipCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "issuer_signature" field.</summary>
    public const int IssuerSignatureFieldNumber = 2;
    private pb::ByteString issuerSignature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature of 'card.card_id' value in raw format using private key of the issuer of the card.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerSignature {
      get { return issuerSignature_; }
      set {
        issuerSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedRelationshipCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedRelationshipCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (IssuerSignature != other.IssuerSignature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (IssuerSignature.Length != 0) hash ^= IssuerSignature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (IssuerSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IssuerSignature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (IssuerSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerSignature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedRelationshipCard other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Iop.Profileserver.RelationshipCard();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.IssuerSignature.Length != 0) {
        IssuerSignature = other.IssuerSignature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Iop.Profileserver.RelationshipCard();
            }
            input.ReadMessage(card_);
            break;
          }
          case 18: {
            IssuerSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Description of a relationship card.
  /// </summary>
  public sealed partial class RelationshipCard : pb::IMessage<RelationshipCard> {
    private static readonly pb::MessageParser<RelationshipCard> _parser = new pb::MessageParser<RelationshipCard>(() => new RelationshipCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RelationshipCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard(RelationshipCard other) : this() {
      cardId_ = other.cardId_;
      version_ = other.version_;
      type_ = other.type_;
      validFrom_ = other.validFrom_;
      validTo_ = other.validTo_;
      issuerPublicKey_ = other.issuerPublicKey_;
      recipientPublicKey_ = other.recipientPublicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard Clone() {
      return new RelationshipCard(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private pb::ByteString cardId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier of a relationship card is a SHA256 hash of the RelationshipCard structure in Google Protobuf v3 encoding 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    /// with card_id initialized to a byte array of 32 zero bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// Type of the relationship card. This is an application defined value. Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valid_from" field.</summary>
    public const int ValidFromFieldNumber = 4;
    private long validFrom_;
    /// <summary>
    /// TimestampType. Time from which the card is valid. It must not be greater than 'valid_to'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidFrom {
      get { return validFrom_; }
      set {
        validFrom_ = value;
      }
    }

    /// <summary>Field number for the "valid_to" field.</summary>
    public const int ValidToFieldNumber = 5;
    private long validTo_;
    /// <summary>
    /// TimestampType. Time after which the card is not valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidTo {
      get { return validTo_; }
      set {
        validTo_ = value;
      }
    }

    /// <summary>Field number for the "issuer_public_key" field.</summary>
    public const int IssuerPublicKeyFieldNumber = 6;
    private pb::ByteString issuerPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the issuer of the card. Max 128 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerPublicKey {
      get { return issuerPublicKey_; }
      set {
        issuerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipient_public_key" field.</summary>
    public const int RecipientPublicKeyFieldNumber = 7;
    private pb::ByteString recipientPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the recipient of the card. Max 128 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecipientPublicKey {
      get { return recipientPublicKey_; }
      set {
        recipientPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RelationshipCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RelationshipCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Version != other.Version) return false;
      if (Type != other.Type) return false;
      if (ValidFrom != other.ValidFrom) return false;
      if (ValidTo != other.ValidTo) return false;
      if (IssuerPublicKey != other.IssuerPublicKey) return false;
      if (RecipientPublicKey != other.RecipientPublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ValidFrom != 0L) hash ^= ValidFrom.GetHashCode();
      if (ValidTo != 0L) hash ^= ValidTo.GetHashCode();
      if (IssuerPublicKey.Length != 0) hash ^= IssuerPublicKey.GetHashCode();
      if (RecipientPublicKey.Length != 0) hash ^= RecipientPublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CardId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Version);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (ValidFrom != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(ValidFrom);
      }
      if (ValidTo != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ValidTo);
      }
      if (IssuerPublicKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(IssuerPublicKey);
      }
      if (RecipientPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(RecipientPublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ValidFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidFrom);
      }
      if (ValidTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidTo);
      }
      if (IssuerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerPublicKey);
      }
      if (RecipientPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecipientPublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RelationshipCard other) {
      if (other == null) {
        return;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ValidFrom != 0L) {
        ValidFrom = other.ValidFrom;
      }
      if (other.ValidTo != 0L) {
        ValidTo = other.ValidTo;
      }
      if (other.IssuerPublicKey.Length != 0) {
        IssuerPublicKey = other.IssuerPublicKey;
      }
      if (other.RecipientPublicKey.Length != 0) {
        RecipientPublicKey = other.RecipientPublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CardId = input.ReadBytes();
            break;
          }
          case 18: {
            Version = input.ReadBytes();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            ValidFrom = input.ReadSInt64();
            break;
          }
          case 40: {
            ValidTo = input.ReadSInt64();
            break;
          }
          case 50: {
            IssuerPublicKey = input.ReadBytes();
            break;
          }
          case 58: {
            RecipientPublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Obtains list of identity's relationships that match the given criteria.
  ///
  /// Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class GetIdentityRelationshipsInformationRequest : pb::IMessage<GetIdentityRelationshipsInformationRequest> {
    private static readonly pb::MessageParser<GetIdentityRelationshipsInformationRequest> _parser = new pb::MessageParser<GetIdentityRelationshipsInformationRequest>(() => new GetIdentityRelationshipsInformationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityRelationshipsInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest(GetIdentityRelationshipsInformationRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      includeInvalid_ = other.includeInvalid_;
      type_ = other.type_;
      specificIssuer_ = other.specificIssuer_;
      issuerNetworkId_ = other.issuerNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest Clone() {
      return new GetIdentityRelationshipsInformationRequest(this);
    }

    /// <summary>Field number for the "identity_network_id" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// Identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_invalid" field.</summary>
    public const int IncludeInvalidFieldNumber = 2;
    private bool includeInvalid_;
    /// <summary>
    /// If set to true, the response may include relationships which cards are no longer valid or not yet valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInvalid {
      get { return includeInvalid_; }
      set {
        includeInvalid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// WildcardType or empty string. If not empty, the server will only return relationships which card types 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specific_issuer" field.</summary>
    public const int SpecificIssuerFieldNumber = 4;
    private bool specificIssuer_;
    /// <summary>
    /// If set to true, the response will only include relationships which cards were issued by issuer with network identifier equal to 'issuerNetworkId'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpecificIssuer {
      get { return specificIssuer_; }
      set {
        specificIssuer_ = value;
      }
    }

    /// <summary>Field number for the "issuer_network_id" field.</summary>
    public const int IssuerNetworkIdFieldNumber = 5;
    private pb::ByteString issuerNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// If 'specific_issuer' is true, this is the network identifier of the card issuer whose relationships with the target identity are being queried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerNetworkId {
      get { return issuerNetworkId_; }
      set {
        issuerNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityRelationshipsInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityRelationshipsInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (IncludeInvalid != other.IncludeInvalid) return false;
      if (Type != other.Type) return false;
      if (SpecificIssuer != other.SpecificIssuer) return false;
      if (IssuerNetworkId != other.IssuerNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (IncludeInvalid != false) hash ^= IncludeInvalid.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (SpecificIssuer != false) hash ^= SpecificIssuer.GetHashCode();
      if (IssuerNetworkId.Length != 0) hash ^= IssuerNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (IncludeInvalid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeInvalid);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (SpecificIssuer != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpecificIssuer);
      }
      if (IssuerNetworkId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IssuerNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (IncludeInvalid != false) {
        size += 1 + 1;
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (SpecificIssuer != false) {
        size += 1 + 1;
      }
      if (IssuerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityRelationshipsInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.IncludeInvalid != false) {
        IncludeInvalid = other.IncludeInvalid;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.SpecificIssuer != false) {
        SpecificIssuer = other.SpecificIssuer;
      }
      if (other.IssuerNetworkId.Length != 0) {
        IssuerNetworkId = other.IssuerNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            IncludeInvalid = input.ReadBool();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            SpecificIssuer = input.ReadBool();
            break;
          }
          case 42: {
            IssuerNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to GetIdentityRelationshipsInformationRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "type" - 'GetIdentityRelationshipsInformationRequest.type' is too long.
  /// </summary>
  public sealed partial class GetIdentityRelationshipsInformationResponse : pb::IMessage<GetIdentityRelationshipsInformationResponse> {
    private static readonly pb::MessageParser<GetIdentityRelationshipsInformationResponse> _parser = new pb::MessageParser<GetIdentityRelationshipsInformationResponse>(() => new GetIdentityRelationshipsInformationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityRelationshipsInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse(GetIdentityRelationshipsInformationResponse other) : this() {
      relationships_ = other.relationships_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse Clone() {
      return new GetIdentityRelationshipsInformationResponse(this);
    }

    /// <summary>Field number for the "relationships" field.</summary>
    public const int RelationshipsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.IdentityRelationship> _repeated_relationships_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Profileserver.IdentityRelationship.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.IdentityRelationship> relationships_ = new pbc::RepeatedField<global::Iop.Profileserver.IdentityRelationship>();
    /// <summary>
    /// List of all matching identity relationships together with their relationship cards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.IdentityRelationship> Relationships {
      get { return relationships_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityRelationshipsInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityRelationshipsInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!relationships_.Equals(other.relationships_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= relationships_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      relationships_.WriteTo(output, _repeated_relationships_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += relationships_.CalculateSize(_repeated_relationships_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityRelationshipsInformationResponse other) {
      if (other == null) {
        return;
      }
      relationships_.Add(other.relationships_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            relationships_.AddEntriesFrom(input, _repeated_relationships_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Description of a relationship between two identities together with signature proofs.
  /// </summary>
  public sealed partial class IdentityRelationship : pb::IMessage<IdentityRelationship> {
    private static readonly pb::MessageParser<IdentityRelationship> _parser = new pb::MessageParser<IdentityRelationship>(() => new IdentityRelationship());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentityRelationship> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship(IdentityRelationship other) : this() {
      CardApplication = other.cardApplication_ != null ? other.CardApplication.Clone() : null;
      cardApplicationSignature_ = other.cardApplicationSignature_;
      Card = other.card_ != null ? other.Card.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship Clone() {
      return new IdentityRelationship(this);
    }

    /// <summary>Field number for the "card_application" field.</summary>
    public const int CardApplicationFieldNumber = 1;
    private global::Iop.Profileserver.CardApplicationInformation cardApplication_;
    /// <summary>
    /// Relationship card application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CardApplicationInformation CardApplication {
      get { return cardApplication_; }
      set {
        cardApplication_ = value;
      }
    }

    /// <summary>Field number for the "card_application_signature" field.</summary>
    public const int CardApplicationSignatureFieldNumber = 2;
    private pb::ByteString cardApplicationSignature_ = pb::ByteString.Empty;
    /// <summary>
    /// Relationship card recipient's signature of 'card_application' structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardApplicationSignature {
      get { return cardApplicationSignature_; }
      set {
        cardApplicationSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 3;
    private global::Iop.Profileserver.SignedRelationshipCard card_;
    /// <summary>
    /// Relationship card signed by its issuer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedRelationshipCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentityRelationship);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentityRelationship other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardApplication, other.CardApplication)) return false;
      if (CardApplicationSignature != other.CardApplicationSignature) return false;
      if (!object.Equals(Card, other.Card)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardApplication_ != null) hash ^= CardApplication.GetHashCode();
      if (CardApplicationSignature.Length != 0) hash ^= CardApplicationSignature.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardApplication_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardApplication);
      }
      if (CardApplicationSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CardApplicationSignature);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardApplication_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardApplication);
      }
      if (CardApplicationSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardApplicationSignature);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentityRelationship other) {
      if (other == null) {
        return;
      }
      if (other.cardApplication_ != null) {
        if (cardApplication_ == null) {
          cardApplication_ = new global::Iop.Profileserver.CardApplicationInformation();
        }
        CardApplication.MergeFrom(other.CardApplication);
      }
      if (other.CardApplicationSignature.Length != 0) {
        CardApplicationSignature = other.CardApplicationSignature;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Iop.Profileserver.SignedRelationshipCard();
        }
        Card.MergeFrom(other.Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cardApplication_ == null) {
              cardApplication_ = new global::Iop.Profileserver.CardApplicationInformation();
            }
            input.ReadMessage(cardApplication_);
            break;
          }
          case 18: {
            CardApplicationSignature = input.ReadBytes();
            break;
          }
          case 26: {
            if (card_ == null) {
              card_ = new global::Iop.Profileserver.SignedRelationshipCard();
            }
            input.ReadMessage(card_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Initiates sharing of the profile database with a neighbor profile server.
  ///
  /// Profile server joining the network needs to contact its neighbors and ask them to share their 
  /// profile databases, so that it can include the profiles of their clients into its own searches.
  /// Similarly, profile servers that detect a new neighbor in their neighborhood need to contact 
  /// it and ask it to share its profile database with them.
  ///
  /// Sharing the profile list always goes from one profile server S (who acts as the server in 
  /// the session) to the requesting profile server C (who acts as a client in the session). It is C 
  /// who connects to S and sends a request asking S to share its database. If the server C wants 
  /// to share its profile database with the server S, it has to wait for the request from S, which 
  /// will ask it to share its database. This request will come if S considers C its neighbor.
  ///
  /// The process starts with the server C sending StartNeighborhoodInitializationRequest message to S.
  /// If S accepts the request, it replies with StartNeighborhoodInitializationResponse and then 
  /// it starts sending NeighborhoodSharedProfileUpdateRequest messages until a full database is sent to C. 
  /// With each update message, C has to check the validity of the data and if it accepts the batch
  /// it replies with NeighborhoodSharedProfileUpdateResponse. Once all of the profiles are sent to C,
  /// S sends FinishNeighborhoodInitializationRequest and if C replies with successful message
  /// FinishNeighborhoodInitializationResponse, the process is completed. 
  ///
  /// If S does not host any profiles yet, it may send FinishNeighborhoodInitializationRequest message 
  /// without sending any NeighborhoodSharedProfileUpdateRequest messages.
  ///
  /// Once C replies with FinishNeighborhoodInitializationResponse, the initialization process is 
  /// finished and C can consider the profiles hosted on S in its search queries. If a connection 
  /// is terminated or the process is disrupted in any other way, C can not consider the process 
  /// as finished and must not include the profiles of S in its searches.
  ///
  /// The profile server S has the responsibility of keeping the information on C up to date. With 
  /// each change of a profile that S hosts, it has to contact C and inform it about the change. 
  /// This is done using NeighborhoodSharedProfileUpdateRequest messages that are sent outside 
  /// the initialization process (i.e. without sending StartNeighborhoodInitializationRequest message 
  /// first).
  ///
  /// If StartNeighborhoodInitializationRequest message is processed successfully, the initialization 
  /// of the neighbor relationship is started on the opened session and the initialization process has 
  /// to be finished with FinishNeighborhoodInitializationRequest or it will fail when the connection 
  /// is terminated. 
  ///
  /// All profiles received from a neighbor have expiration time after which the profile server can 
  /// delete them from its database. The minimal refresh time is 24 hours, which means that each server 
  /// has to keep the profiles from its neighbors for at least 24 hours from the time of the last 
  /// refresh. Each server is free to define its own refresh time longer than 24 hours, which means it 
  /// will not delete unrefreshed data for more than 24 hours.
  ///
  /// Roles: srNeighbor
  ///
  /// Conversation status: Verified
  /// </summary>
  public sealed partial class StartNeighborhoodInitializationRequest : pb::IMessage<StartNeighborhoodInitializationRequest> {
    private static readonly pb::MessageParser<StartNeighborhoodInitializationRequest> _parser = new pb::MessageParser<StartNeighborhoodInitializationRequest>(() => new StartNeighborhoodInitializationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartNeighborhoodInitializationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest(StartNeighborhoodInitializationRequest other) : this() {
      primaryPort_ = other.primaryPort_;
      srNeighborPort_ = other.srNeighborPort_;
      ipAddress_ = other.ipAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest Clone() {
      return new StartNeighborhoodInitializationRequest(this);
    }

    /// <summary>Field number for the "primary_port" field.</summary>
    public const int PrimaryPortFieldNumber = 1;
    private uint primaryPort_;
    /// <summary>
    /// Port of the profile server's Primary Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrimaryPort {
      get { return primaryPort_; }
      set {
        primaryPort_ = value;
      }
    }

    /// <summary>Field number for the "sr_neighbor_port" field.</summary>
    public const int SrNeighborPortFieldNumber = 2;
    private uint srNeighborPort_;
    /// <summary>
    /// Port of the profile server's Neighbors Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrNeighborPort {
      get { return srNeighborPort_; }
      set {
        srNeighborPort_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 3;
    private pb::ByteString ipAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 or IPv6 public address of the network interface on which profile server operates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartNeighborhoodInitializationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartNeighborhoodInitializationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrimaryPort != other.PrimaryPort) return false;
      if (SrNeighborPort != other.SrNeighborPort) return false;
      if (IpAddress != other.IpAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrimaryPort != 0) hash ^= PrimaryPort.GetHashCode();
      if (SrNeighborPort != 0) hash ^= SrNeighborPort.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrimaryPort != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PrimaryPort);
      }
      if (SrNeighborPort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SrNeighborPort);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(IpAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrimaryPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryPort);
      }
      if (SrNeighborPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrNeighborPort);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartNeighborhoodInitializationRequest other) {
      if (other == null) {
        return;
      }
      if (other.PrimaryPort != 0) {
        PrimaryPort = other.PrimaryPort;
      }
      if (other.SrNeighborPort != 0) {
        SrNeighborPort = other.SrNeighborPort;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PrimaryPort = input.ReadUInt32();
            break;
          }
          case 16: {
            SrNeighborPort = input.ReadUInt32();
            break;
          }
          case 26: {
            IpAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to StartNeighborhoodInitializationRequest.
  ///
  /// General Error Responses:
  ///   * ERROR_REJECTED - Profile server has already reached its limit of a number of servers that it shares its profile database with and is not willing to have more.
  ///   * ERROR_ALREADY_EXISTS - Neighborhood initialization process has already been done, or the initialization process with the peer is currently in the progress.
  ///   * ERROR_BUSY - Profile server can use this error code during the start of the neighborhood initialization process to express that it is currently busy 
  ///                  with the neighborhood initialization process with one or more other profile servers.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "primaryPort" - 'StartNeighborhoodInitializationRequest.primary_port' must be an integer between 1 and 65,535.
  ///     * Response.details == "srNeighborPort" - 'StartNeighborhoodInitializationRequest.sr_neighbor_port' must be an integer between 1 and 65,535.
  ///     * Response.details == "ipAddress" - 'StartNeighborhoodInitializationRequest.ip_address' is not a valid IPv4 or IPv6 address or it is a local network IP address.
  /// </summary>
  public sealed partial class StartNeighborhoodInitializationResponse : pb::IMessage<StartNeighborhoodInitializationResponse> {
    private static readonly pb::MessageParser<StartNeighborhoodInitializationResponse> _parser = new pb::MessageParser<StartNeighborhoodInitializationResponse>(() => new StartNeighborhoodInitializationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartNeighborhoodInitializationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse(StartNeighborhoodInitializationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse Clone() {
      return new StartNeighborhoodInitializationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartNeighborhoodInitializationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartNeighborhoodInitializationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartNeighborhoodInitializationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Profile server that was requested to share its profile database with its neighbor using 
  /// StartNeighborhoodInitializationRequest uses this request to finish the initialization process. 
  /// Sending this message means that all profiles were successfully shared.
  ///
  /// Roles: srNeighbor
  ///
  /// Conversation status: Verified
  /// </summary>
  public sealed partial class FinishNeighborhoodInitializationRequest : pb::IMessage<FinishNeighborhoodInitializationRequest> {
    private static readonly pb::MessageParser<FinishNeighborhoodInitializationRequest> _parser = new pb::MessageParser<FinishNeighborhoodInitializationRequest>(() => new FinishNeighborhoodInitializationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishNeighborhoodInitializationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest(FinishNeighborhoodInitializationRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest Clone() {
      return new FinishNeighborhoodInitializationRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishNeighborhoodInitializationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishNeighborhoodInitializationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishNeighborhoodInitializationRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to FinishNeighborhoodInitializationRequest. 
  ///
  /// Sending this response means that the sender will now consider the shared profiles from 
  /// the other server in its search queries.
  ///
  /// Specific Error Responses:
  ///   * ERROR_REJECTED - No neighborhood initialization process was started on this session using StartNeighborhoodInitializationRequest.
  /// </summary>
  public sealed partial class FinishNeighborhoodInitializationResponse : pb::IMessage<FinishNeighborhoodInitializationResponse> {
    private static readonly pb::MessageParser<FinishNeighborhoodInitializationResponse> _parser = new pb::MessageParser<FinishNeighborhoodInitializationResponse>(() => new FinishNeighborhoodInitializationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishNeighborhoodInitializationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse(FinishNeighborhoodInitializationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse Clone() {
      return new FinishNeighborhoodInitializationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishNeighborhoodInitializationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishNeighborhoodInitializationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishNeighborhoodInitializationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// This request is sent by a profile server to announce a change in one or more of the profiles 
  /// of its customers. This request is also used during the neighborhood initialization to send 
  /// the profile server's profile database to the requesting server. If the request is sent outside 
  /// the neighborhood initialization process, it is considered as a standalone request.
  ///
  /// During the neighborhood initialization process, only items with `SharedProfileUpdateItem.ActionType` 
  /// of `add` can be sent.
  ///
  /// Roles: srNeighbor
  ///
  /// Conversation status: Verified
  /// </summary>
  public sealed partial class NeighborhoodSharedProfileUpdateRequest : pb::IMessage<NeighborhoodSharedProfileUpdateRequest> {
    private static readonly pb::MessageParser<NeighborhoodSharedProfileUpdateRequest> _parser = new pb::MessageParser<NeighborhoodSharedProfileUpdateRequest>(() => new NeighborhoodSharedProfileUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighborhoodSharedProfileUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateRequest(NeighborhoodSharedProfileUpdateRequest other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateRequest Clone() {
      return new NeighborhoodSharedProfileUpdateRequest(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.SharedProfileUpdateItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Profileserver.SharedProfileUpdateItem.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.SharedProfileUpdateItem> items_ = new pbc::RepeatedField<global::Iop.Profileserver.SharedProfileUpdateItem>();
    /// <summary>
    /// List of profile update items. Within the request, the profiles added/changed/deleted must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.SharedProfileUpdateItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighborhoodSharedProfileUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighborhoodSharedProfileUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighborhoodSharedProfileUpdateRequest other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to NeighborhoodSharedProfileUpdateRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_REJECTED - Neighborhood initialization process has not been done or finished yet, or profile server is no longer interested in receiving updates 
  ///                      from the requesting profile server. This should have the same effect as if the profile server sent StopNeighborhoodUpdatesRequest to 
  ///                      the requesting profile server. If the requesting profile server wants to share its database, it has to go through neighborhood 
  ///                      initialization process from start.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "$index.$field" - All items up to 'NeighborhoodSharedProfileUpdateRequest.items[$index]' (exclusive) were processed correctly
  ///                                             (and the peer must not send them again) and an error occurred while processing the item with zero-based 
  ///                                             index $index. Items with index greater then $index were not processed. The $field specifies which field 
  ///                                             was invalid as follows:
  ///       * $field == "add" - Number of shared profiles from the requesting profile server exceeds the limit.
  ///       * $field == "add.signedProfile.profile.version" - `items[$index].add.signed_profile.profile.version` does not contain a valid version information.
  ///       * $field == "add.signedProfile.profile.publicKey" - `items[$index].add.signed_profile.profile.public_key` is not a valid public key value or the same identity already exists, 
  ///                                                           or another update item in the same request referred to this identity.
  ///       * $field == "add.signedProfile.profile.type" - `items[$index].add.signed_profile.profile.type` is not a valid identity type.
  ///       * $field == "add.signedProfile.profile.name" - `items[$index].add.signed_profile.profile.name` is not a valid profile name.
  ///       * $field == "add.signedProfile.profile.latitude" - `items[$index].add.signed_profile.profile.latitude` is not a valid latitude value.
  ///       * $field == "add.signedProfile.profile.longitude" - `items[$index].add.signed_profile.profile.longitude` is not a valid longitude value.
  ///       * $field == "add.signedProfile.profile.extraData" - `items[$index].add.signed_profile.profile.extra_data` is not a valid extra_data value.
  ///       * $field == "add.signedProfile.profile.profileImageHash" - `items[$index].add.signed_profile.profile.profile_image_hash` is neither a valid SHA256 hash nor empty array.
  ///       * $field == "add.signedProfile.profile.thumbnailImageHash" - `items[$index].add.signed_profile.profile.thumbnail_image_hash` is neither a valid SHA256 hash nor empty array.
  ///       * $field == "add.signedProfile.signature" - `items[$index].add.signed_profile.signature` is not a valid signature or 'items[$index].add.signed_profile.profile'.
  ///       * $field == "add.thumbnailImage" - `items[$index].add.thumbnail_image` is neither a valid SHA256 hash nor empty array or it does not correspond to the `items[$index].add.signed_profile.profile.thumbnail_image_hash` value.
  ///       * $field == "change.signedProfile.profile.version" - `items[$index].change.signed_profile.profile.version` does not contain a valid version information.
  ///       * $field == "change.signedProfile.profile.publicKey" - `items[$index].change.signed_profile.profile.public_key` is not a valid public key value or the identity with this public key does not exist, 
  ///                                                              or another update item in the same request referred to this identity.
  ///       * $field == "change.signedProfile.profile.type" - `items[$index].change.signed_profile.profile.type` is not a valid identity type or it does not match the previous value of the type of this profile.
  ///       * $field == "change.signedProfile.profile.name" - `items[$index].change.signed_profile.profile.name` is not a valid profile name.
  ///       * $field == "change.signedProfile.profile.latitude" - `items[$index].change.signed_profile.profile.latitude` is not a valid latitude value.
  ///       * $field == "change.signedProfile.profile.longitude" - `items[$index].change.signed_profile.profile.longitude` is not a valid longitude value.
  ///       * $field == "change.signedProfile.profile.extraData" - `items[$index].change.signed_profile.profile.extra_Data` is not a valid extra_Data value.
  ///       * $field == "change.signedProfile.profile.profileImageHash" - `items[$index].change.signed_profile.profile.profile_image_hash` is neither a valid SHA256 hash nor empty array.
  ///       * $field == "change.signedProfile.profile.thumbnailImageHash" - `items[$index].change.signed_profile.profile.thumbnail_image_hash` is neither a valid SHA256 hash nor empty array.
  ///       * $field == "change.signedProfile.signature" - `items[$index].change.signed_profile.signature` is not a valid signature or 'items[$index].change.signed_profile.profile'.
  ///       * $field == "change.thumbnailImage" - `items[$index].change.thumbnail_Image` is neither a valid SHA256 hash nor empty array or it does not correspond to the `items[$index].change.signed_profile.profile.thumbnail_image_hash` value.
  ///       * $field == "delete.identityNetworkId" - `items[$index].delete.identity_network_id` does not represent an existing identity, or another update item 
  ///                                                in the same request referred to this identity.
  ///       * $field == "actionType" - During the neighborhood initialization process, only `add` is a valid update message type.
  /// </summary>
  public sealed partial class NeighborhoodSharedProfileUpdateResponse : pb::IMessage<NeighborhoodSharedProfileUpdateResponse> {
    private static readonly pb::MessageParser<NeighborhoodSharedProfileUpdateResponse> _parser = new pb::MessageParser<NeighborhoodSharedProfileUpdateResponse>(() => new NeighborhoodSharedProfileUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighborhoodSharedProfileUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateResponse(NeighborhoodSharedProfileUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborhoodSharedProfileUpdateResponse Clone() {
      return new NeighborhoodSharedProfileUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighborhoodSharedProfileUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighborhoodSharedProfileUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighborhoodSharedProfileUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Information about update of a neighborhood profile.
  /// </summary>
  public sealed partial class SharedProfileUpdateItem : pb::IMessage<SharedProfileUpdateItem> {
    private static readonly pb::MessageParser<SharedProfileUpdateItem> _parser = new pb::MessageParser<SharedProfileUpdateItem>(() => new SharedProfileUpdateItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileUpdateItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem(SharedProfileUpdateItem other) : this() {
      switch (other.ActionTypeCase) {
        case ActionTypeOneofCase.Add:
          Add = other.Add.Clone();
          break;
        case ActionTypeOneofCase.Change:
          Change = other.Change.Clone();
          break;
        case ActionTypeOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
        case ActionTypeOneofCase.Refresh:
          Refresh = other.Refresh.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem Clone() {
      return new SharedProfileUpdateItem(this);
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 1;
    /// <summary>
    ///  * adding a new profile to the database,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SharedProfileAddItem Add {
      get { return actionTypeCase_ == ActionTypeOneofCase.Add ? (global::Iop.Profileserver.SharedProfileAddItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Add;
      }
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 2;
    /// <summary>
    ///  * changing an existing profile,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SharedProfileChangeItem Change {
      get { return actionTypeCase_ == ActionTypeOneofCase.Change ? (global::Iop.Profileserver.SharedProfileChangeItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Change;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    /// <summary>
    ///  * deleting an existing profile, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SharedProfileDeleteItem Delete {
      get { return actionTypeCase_ == ActionTypeOneofCase.Delete ? (global::Iop.Profileserver.SharedProfileDeleteItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Delete;
      }
    }

    /// <summary>Field number for the "refresh" field.</summary>
    public const int RefreshFieldNumber = 4;
    /// <summary>
    ///  * refresh neighbor's expiration time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SharedProfileRefreshAllItem Refresh {
      get { return actionTypeCase_ == ActionTypeOneofCase.Refresh ? (global::Iop.Profileserver.SharedProfileRefreshAllItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Refresh;
      }
    }

    private object actionType_;
    /// <summary>Enum of possible cases for the "ActionType" oneof.</summary>
    public enum ActionTypeOneofCase {
      None = 0,
      Add = 1,
      Change = 2,
      Delete = 3,
      Refresh = 4,
    }
    private ActionTypeOneofCase actionTypeCase_ = ActionTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTypeOneofCase ActionTypeCase {
      get { return actionTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionType() {
      actionTypeCase_ = ActionTypeOneofCase.None;
      actionType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileUpdateItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileUpdateItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Add, other.Add)) return false;
      if (!object.Equals(Change, other.Change)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (!object.Equals(Refresh, other.Refresh)) return false;
      if (ActionTypeCase != other.ActionTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionTypeCase_ == ActionTypeOneofCase.Add) hash ^= Add.GetHashCode();
      if (actionTypeCase_ == ActionTypeOneofCase.Change) hash ^= Change.GetHashCode();
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) hash ^= Delete.GetHashCode();
      if (actionTypeCase_ == ActionTypeOneofCase.Refresh) hash ^= Refresh.GetHashCode();
      hash ^= (int) actionTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionTypeCase_ == ActionTypeOneofCase.Add) {
        output.WriteRawTag(10);
        output.WriteMessage(Add);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Change) {
        output.WriteRawTag(18);
        output.WriteMessage(Change);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
        output.WriteRawTag(26);
        output.WriteMessage(Delete);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Refresh) {
        output.WriteRawTag(34);
        output.WriteMessage(Refresh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionTypeCase_ == ActionTypeOneofCase.Add) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Add);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Change) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Change);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Refresh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Refresh);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileUpdateItem other) {
      if (other == null) {
        return;
      }
      switch (other.ActionTypeCase) {
        case ActionTypeOneofCase.Add:
          Add = other.Add;
          break;
        case ActionTypeOneofCase.Change:
          Change = other.Change;
          break;
        case ActionTypeOneofCase.Delete:
          Delete = other.Delete;
          break;
        case ActionTypeOneofCase.Refresh:
          Refresh = other.Refresh;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Profileserver.SharedProfileAddItem subBuilder = new global::Iop.Profileserver.SharedProfileAddItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Add) {
              subBuilder.MergeFrom(Add);
            }
            input.ReadMessage(subBuilder);
            Add = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Profileserver.SharedProfileChangeItem subBuilder = new global::Iop.Profileserver.SharedProfileChangeItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Change) {
              subBuilder.MergeFrom(Change);
            }
            input.ReadMessage(subBuilder);
            Change = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Profileserver.SharedProfileDeleteItem subBuilder = new global::Iop.Profileserver.SharedProfileDeleteItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Profileserver.SharedProfileRefreshAllItem subBuilder = new global::Iop.Profileserver.SharedProfileRefreshAllItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Refresh) {
              subBuilder.MergeFrom(Refresh);
            }
            input.ReadMessage(subBuilder);
            Refresh = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Information about newly created profile that is to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileAddItem : pb::IMessage<SharedProfileAddItem> {
    private static readonly pb::MessageParser<SharedProfileAddItem> _parser = new pb::MessageParser<SharedProfileAddItem>(() => new SharedProfileAddItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileAddItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem(SharedProfileAddItem other) : this() {
      SignedProfile = other.signedProfile_ != null ? other.SignedProfile.Clone() : null;
      thumbnailImage_ = other.thumbnailImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem Clone() {
      return new SharedProfileAddItem(this);
    }

    /// <summary>Field number for the "signed_profile" field.</summary>
    public const int SignedProfileFieldNumber = 1;
    private global::Iop.Profileserver.SignedProfileInformation signedProfile_;
    /// <summary>
    /// Signed identity profile information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedProfileInformation SignedProfile {
      get { return signedProfile_; }
      set {
        signedProfile_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail_image" field.</summary>
    public const int ThumbnailImageFieldNumber = 2;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    /// Thumbnail image of the profile or empty array if the profile has no thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileAddItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileAddItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignedProfile, other.SignedProfile)) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signedProfile_ != null) hash ^= SignedProfile.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signedProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ThumbnailImage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signedProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileAddItem other) {
      if (other == null) {
        return;
      }
      if (other.signedProfile_ != null) {
        if (signedProfile_ == null) {
          signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
        }
        SignedProfile.MergeFrom(other.SignedProfile);
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (signedProfile_ == null) {
              signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
            }
            input.ReadMessage(signedProfile_);
            break;
          }
          case 18: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Information about change in an existing activity that is to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileChangeItem : pb::IMessage<SharedProfileChangeItem> {
    private static readonly pb::MessageParser<SharedProfileChangeItem> _parser = new pb::MessageParser<SharedProfileChangeItem>(() => new SharedProfileChangeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileChangeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem(SharedProfileChangeItem other) : this() {
      SignedProfile = other.signedProfile_ != null ? other.SignedProfile.Clone() : null;
      thumbnailImage_ = other.thumbnailImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem Clone() {
      return new SharedProfileChangeItem(this);
    }

    /// <summary>Field number for the "signed_profile" field.</summary>
    public const int SignedProfileFieldNumber = 1;
    private global::Iop.Profileserver.SignedProfileInformation signedProfile_;
    /// <summary>
    /// Signed identity profile information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.SignedProfileInformation SignedProfile {
      get { return signedProfile_; }
      set {
        signedProfile_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail_image" field.</summary>
    public const int ThumbnailImageFieldNumber = 2;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    /// Thumbnail image of the profile or empty array if the profile has no thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileChangeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileChangeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignedProfile, other.SignedProfile)) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signedProfile_ != null) hash ^= SignedProfile.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signedProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ThumbnailImage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signedProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedProfile);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileChangeItem other) {
      if (other == null) {
        return;
      }
      if (other.signedProfile_ != null) {
        if (signedProfile_ == null) {
          signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
        }
        SignedProfile.MergeFrom(other.SignedProfile);
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (signedProfile_ == null) {
              signedProfile_ = new global::Iop.Profileserver.SignedProfileInformation();
            }
            input.ReadMessage(signedProfile_);
            break;
          }
          case 18: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Information about the removal of an existing profile that is to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileDeleteItem : pb::IMessage<SharedProfileDeleteItem> {
    private static readonly pb::MessageParser<SharedProfileDeleteItem> _parser = new pb::MessageParser<SharedProfileDeleteItem>(() => new SharedProfileDeleteItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileDeleteItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem(SharedProfileDeleteItem other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem Clone() {
      return new SharedProfileDeleteItem(this);
    }

    /// <summary>Field number for the "identity_network_id" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    /// The identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileDeleteItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileDeleteItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileDeleteItem other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Request to refresh the neighbor status of the requesting server on the target server.
  /// </summary>
  public sealed partial class SharedProfileRefreshAllItem : pb::IMessage<SharedProfileRefreshAllItem> {
    private static readonly pb::MessageParser<SharedProfileRefreshAllItem> _parser = new pb::MessageParser<SharedProfileRefreshAllItem>(() => new SharedProfileRefreshAllItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileRefreshAllItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileRefreshAllItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileRefreshAllItem(SharedProfileRefreshAllItem other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileRefreshAllItem Clone() {
      return new SharedProfileRefreshAllItem(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileRefreshAllItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileRefreshAllItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileRefreshAllItem other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Asks a (former) neighbor to stop sending updates of its database to the profile server.
  ///
  /// Roles: srNeighbor
  ///
  /// Conversation status: Verified
  /// </summary>
  public sealed partial class StopNeighborhoodUpdatesRequest : pb::IMessage<StopNeighborhoodUpdatesRequest> {
    private static readonly pb::MessageParser<StopNeighborhoodUpdatesRequest> _parser = new pb::MessageParser<StopNeighborhoodUpdatesRequest>(() => new StopNeighborhoodUpdatesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopNeighborhoodUpdatesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesRequest(StopNeighborhoodUpdatesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesRequest Clone() {
      return new StopNeighborhoodUpdatesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopNeighborhoodUpdatesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopNeighborhoodUpdatesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopNeighborhoodUpdatesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to StopNeighborhoodUpdatesRequest. 
  ///
  /// Specific Error Responses:
  ///   * ERROR_NOT_FOUND - The target server does not recognize the profile server as its neighbor.
  /// </summary>
  public sealed partial class StopNeighborhoodUpdatesResponse : pb::IMessage<StopNeighborhoodUpdatesResponse> {
    private static readonly pb::MessageParser<StopNeighborhoodUpdatesResponse> _parser = new pb::MessageParser<StopNeighborhoodUpdatesResponse>(() => new StopNeighborhoodUpdatesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopNeighborhoodUpdatesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesResponse(StopNeighborhoodUpdatesResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNeighborhoodUpdatesResponse Clone() {
      return new StopNeighborhoodUpdatesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopNeighborhoodUpdatesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopNeighborhoodUpdatesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopNeighborhoodUpdatesResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  /// Profile server contact information.
  /// </summary>
  public sealed partial class CanProfileServerContact : pb::IMessage<CanProfileServerContact> {
    private static readonly pb::MessageParser<CanProfileServerContact> _parser = new pb::MessageParser<CanProfileServerContact>(() => new CanProfileServerContact());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanProfileServerContact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanProfileServerContact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanProfileServerContact(CanProfileServerContact other) : this() {
      publicKey_ = other.publicKey_;
      ipAddress_ = other.ipAddress_;
      primaryPort_ = other.primaryPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanProfileServerContact Clone() {
      return new CanProfileServerContact(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Profile server's public key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private pb::ByteString ipAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 or IPv6 public address of the network interface on which profile server operates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_port" field.</summary>
    public const int PrimaryPortFieldNumber = 3;
    private uint primaryPort_;
    /// <summary>
    /// TCP port of profile server's primary interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrimaryPort {
      get { return primaryPort_; }
      set {
        primaryPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanProfileServerContact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanProfileServerContact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (IpAddress != other.IpAddress) return false;
      if (PrimaryPort != other.PrimaryPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (PrimaryPort != 0) hash ^= PrimaryPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicKey);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IpAddress);
      }
      if (PrimaryPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PrimaryPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpAddress);
      }
      if (PrimaryPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrimaryPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanProfileServerContact other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.PrimaryPort != 0) {
        PrimaryPort = other.PrimaryPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            IpAddress = input.ReadBytes();
            break;
          }
          case 24: {
            PrimaryPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Structure of data an identity client can store in CAN storage.
  /// </summary>
  public sealed partial class CanIdentityData : pb::IMessage<CanIdentityData> {
    private static readonly pb::MessageParser<CanIdentityData> _parser = new pb::MessageParser<CanIdentityData>(() => new CanIdentityData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanIdentityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanIdentityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanIdentityData(CanIdentityData other) : this() {
      hostingServerId_ = other.hostingServerId_;
      keyValueList_ = other.keyValueList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanIdentityData Clone() {
      return new CanIdentityData(this);
    }

    /// <summary>Field number for the "hosting_server_id" field.</summary>
    public const int HostingServerIdFieldNumber = 1;
    private pb::ByteString hostingServerId_ = pb::ByteString.Empty;
    /// <summary>
    /// Network ID of the profile server that hosts the identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HostingServerId {
      get { return hostingServerId_; }
      set {
        hostingServerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_value_list" field.</summary>
    public const int KeyValueListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iop.Profileserver.CanKeyValue> _repeated_keyValueList_codec
        = pb::FieldCodec.ForMessage(18, global::Iop.Profileserver.CanKeyValue.Parser);
    private readonly pbc::RepeatedField<global::Iop.Profileserver.CanKeyValue> keyValueList_ = new pbc::RepeatedField<global::Iop.Profileserver.CanKeyValue>();
    /// <summary>
    /// Key-value dictionary that contain client defined data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Profileserver.CanKeyValue> KeyValueList {
      get { return keyValueList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanIdentityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanIdentityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostingServerId != other.HostingServerId) return false;
      if(!keyValueList_.Equals(other.keyValueList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostingServerId.Length != 0) hash ^= HostingServerId.GetHashCode();
      hash ^= keyValueList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostingServerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(HostingServerId);
      }
      keyValueList_.WriteTo(output, _repeated_keyValueList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostingServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HostingServerId);
      }
      size += keyValueList_.CalculateSize(_repeated_keyValueList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanIdentityData other) {
      if (other == null) {
        return;
      }
      if (other.HostingServerId.Length != 0) {
        HostingServerId = other.HostingServerId;
      }
      keyValueList_.Add(other.keyValueList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostingServerId = input.ReadBytes();
            break;
          }
          case 18: {
            keyValueList_.AddEntriesFrom(input, _repeated_keyValueList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Description of a single item in key-value type of structure.
  /// </summary>
  public sealed partial class CanKeyValue : pb::IMessage<CanKeyValue> {
    private static readonly pb::MessageParser<CanKeyValue> _parser = new pb::MessageParser<CanKeyValue>(() => new CanKeyValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanKeyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanKeyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanKeyValue(CanKeyValue other) : this() {
      key_ = other.key_;
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.BinaryValue:
          BinaryValue = other.BinaryValue;
          break;
        case ValueTypeOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case ValueTypeOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueTypeOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueTypeOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueTypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanKeyValue Clone() {
      return new CanKeyValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Name of the item, which should be unique within the client's CAN object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "binary_value" field.</summary>
    public const int BinaryValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BinaryValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.BinaryValue ? (pb::ByteString) valueType_ : pb::ByteString.Empty; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueTypeCase_ = ValueTypeOneofCase.BinaryValue;
      }
    }

    /// <summary>Field number for the "uint32_value" field.</summary>
    public const int Uint32ValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uint32Value {
      get { return valueTypeCase_ == ValueTypeOneofCase.Uint32Value ? (int) valueType_ : 0; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.Uint32Value;
      }
    }

    /// <summary>Field number for the "uint64_value" field.</summary>
    public const int Uint64ValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uint64Value {
      get { return valueTypeCase_ == ValueTypeOneofCase.Uint64Value ? (long) valueType_ : 0L; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.Uint64Value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.DoubleValue ? (double) valueType_ : 0D; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.BoolValue ? (bool) valueType_ : false; }
      set {
        valueType_ = value;
        valueTypeCase_ = ValueTypeOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueTypeCase_ == ValueTypeOneofCase.StringValue ? (string) valueType_ : ""; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueTypeCase_ = ValueTypeOneofCase.StringValue;
      }
    }

    private object valueType_;
    /// <summary>Enum of possible cases for the "ValueType" oneof.</summary>
    public enum ValueTypeOneofCase {
      None = 0,
      BinaryValue = 2,
      Uint32Value = 3,
      Uint64Value = 4,
      DoubleValue = 5,
      BoolValue = 6,
      StringValue = 7,
    }
    private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueTypeOneofCase ValueTypeCase {
      get { return valueTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueType() {
      valueTypeCase_ = ValueTypeOneofCase.None;
      valueType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanKeyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanKeyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (BinaryValue != other.BinaryValue) return false;
      if (Uint32Value != other.Uint32Value) return false;
      if (Uint64Value != other.Uint64Value) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (StringValue != other.StringValue) return false;
      if (ValueTypeCase != other.ValueTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.BinaryValue) hash ^= BinaryValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Uint32Value) hash ^= Uint32Value.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Uint64Value) hash ^= Uint64Value.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      hash ^= (int) valueTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.BinaryValue) {
        output.WriteRawTag(18);
        output.WriteBytes(BinaryValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Uint32Value) {
        output.WriteRawTag(24);
        output.WriteInt32(Uint32Value);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Uint64Value) {
        output.WriteRawTag(32);
        output.WriteInt64(Uint64Value);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) {
        output.WriteRawTag(41);
        output.WriteDouble(DoubleValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.BoolValue) {
        output.WriteRawTag(48);
        output.WriteBool(BoolValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
        output.WriteRawTag(58);
        output.WriteString(StringValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.BinaryValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BinaryValue);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Uint32Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uint32Value);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Uint64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uint64Value);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueTypeCase_ == ValueTypeOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanKeyValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.BinaryValue:
          BinaryValue = other.BinaryValue;
          break;
        case ValueTypeOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case ValueTypeOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueTypeOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueTypeOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueTypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            BinaryValue = input.ReadBytes();
            break;
          }
          case 24: {
            Uint32Value = input.ReadInt32();
            break;
          }
          case 32: {
            Uint64Value = input.ReadInt64();
            break;
          }
          case 41: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 48: {
            BoolValue = input.ReadBool();
            break;
          }
          case 58: {
            StringValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// Uploads client's object to CAN and deletes the old one if there is any.
  ///
  /// Once an identity is hosted on a profile server, it can use CanStoreDataRequest to upload its CAN object 
  /// to CAN. The object has to contain a link back to its profile server, but otherwise, it can contain arbitrary 
  /// information as per client's needs. 
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class CanStoreDataRequest : pb::IMessage<CanStoreDataRequest> {
    private static readonly pb::MessageParser<CanStoreDataRequest> _parser = new pb::MessageParser<CanStoreDataRequest>(() => new CanStoreDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanStoreDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataRequest(CanStoreDataRequest other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataRequest Clone() {
      return new CanStoreDataRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Iop.Profileserver.CanIdentityData data_;
    /// <summary>
    /// Data to store in CAN, or null to just delete the old object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Profileserver.CanIdentityData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanStoreDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanStoreDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanStoreDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Iop.Profileserver.CanIdentityData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Iop.Profileserver.CanIdentityData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CanStoreDataRequest. 
  ///
  /// When CAN accepts the object, it returns its hash, which has to be returned to the client. The client uses 
  /// the hash to create its IPNS record.
  ///
  /// Specific Error Responses:
  ///   * ERROR_REJECTED - CAN server reported error, see 'Response.details' for the error message it sent.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "data.hostingServerId" - 'CanStoreDataRequest.data.hosting_server_id' is not the profile server's network ID.
  /// </summary>
  public sealed partial class CanStoreDataResponse : pb::IMessage<CanStoreDataResponse> {
    private static readonly pb::MessageParser<CanStoreDataResponse> _parser = new pb::MessageParser<CanStoreDataResponse>(() => new CanStoreDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanStoreDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataResponse(CanStoreDataResponse other) : this() {
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanStoreDataResponse Clone() {
      return new CanStoreDataResponse(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    /// <summary>
    /// Hash of 'CanStoreDataRequest.data' received from CAN in multihash binary format, or empty array if 'CanStoreDataRequest.data' was null.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanStoreDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanStoreDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanStoreDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// Identity client asks its hosting profile server to publish its IPNS record in CAN on its behalf.
  /// 
  ///
  /// Roles: clCustomer
  ///
  /// Conversation status: Authenticated
  /// </summary>
  public sealed partial class CanPublishIpnsRecordRequest : pb::IMessage<CanPublishIpnsRecordRequest> {
    private static readonly pb::MessageParser<CanPublishIpnsRecordRequest> _parser = new pb::MessageParser<CanPublishIpnsRecordRequest>(() => new CanPublishIpnsRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanPublishIpnsRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordRequest(CanPublishIpnsRecordRequest other) : this() {
      Record = other.record_ != null ? other.Record.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordRequest Clone() {
      return new CanPublishIpnsRecordRequest(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Iop.Can.CanIpnsEntry record_;
    /// <summary>
    /// Signed IPNS record. Its expiration date must not exceed the expiration date 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Can.CanIpnsEntry Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanPublishIpnsRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanPublishIpnsRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Record, other.Record)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (record_ != null) hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanPublishIpnsRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          record_ = new global::Iop.Can.CanIpnsEntry();
        }
        Record.MergeFrom(other.Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (record_ == null) {
              record_ = new global::Iop.Can.CanIpnsEntry();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// A response to CanPublishIpnsRecordRequest.
  ///
  /// Specific Error Responses:
  ///   * ERROR_REJECTED - CAN server reported error, see 'Response.details' for the error message it sent.
  ///   * ERROR_NOT_FOUND - Client did not upload any CAN object yet.
  ///   * ERROR_INVALID_VALUE
  ///     * Response.details == "record" - 'CanPublishIpnsRecordRequest.record' does not represent a valid IPNS record.
  ///     * Response.details == "record.value" - 'CanPublishIpnsRecordRequest.value' does not match the path to the last CAN object the client uploaded using CanStoreDataRequest.
  ///     * Response.details == "record.validity" - 'CanPublishIpnsRecordRequest.record.validity' is invalid expiration date or it is greater than the client's hosting contract validity.
  /// </summary>
  public sealed partial class CanPublishIpnsRecordResponse : pb::IMessage<CanPublishIpnsRecordResponse> {
    private static readonly pb::MessageParser<CanPublishIpnsRecordResponse> _parser = new pb::MessageParser<CanPublishIpnsRecordResponse>(() => new CanPublishIpnsRecordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanPublishIpnsRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Profileserver.IopProfileServerReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordResponse(CanPublishIpnsRecordResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanPublishIpnsRecordResponse Clone() {
      return new CanPublishIpnsRecordResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanPublishIpnsRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanPublishIpnsRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanPublishIpnsRecordResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopLocNet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Locnet {

  /// <summary>Holder for reflection information generated from IopLocNet.proto</summary>
  public static partial class IopLocNetReflection {

    #region Descriptor
    /// <summary>File descriptor for IopLocNet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopLocNetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Jb3BMb2NOZXQucHJvdG8SCmlvcC5sb2NuZXQiWAoLU2VydmljZUluZm8S",
            "JQoEdHlwZRgBIAEoDjIXLmlvcC5sb2NuZXQuU2VydmljZVR5cGUSDAoEcG9y",
            "dBgCIAEoDRIUCgxzZXJ2aWNlX2RhdGEYAyABKAwiMgoLR3BzTG9jYXRpb24S",
            "EAoIbGF0aXR1ZGUYASABKA8SEQoJbG9uZ2l0dWRlGAIgASgPIkkKC05vZGVD",
            "b250YWN0EhIKCmlwX2FkZHJlc3MYASABKAwSEQoJbm9kZV9wb3J0GAIgASgN",
            "EhMKC2NsaWVudF9wb3J0GAMgASgNIpsBCghOb2RlSW5mbxIPCgdub2RlX2lk",
            "GAEgASgMEigKB2NvbnRhY3QYAiABKAsyFy5pb3AubG9jbmV0Lk5vZGVDb250",
            "YWN0EikKCGxvY2F0aW9uGAMgASgLMhcuaW9wLmxvY25ldC5HcHNMb2NhdGlv",
            "bhIpCghzZXJ2aWNlcxggIAMoCzIXLmlvcC5sb2NuZXQuU2VydmljZUluZm8i",
            "RgoRTWVzc2FnZVdpdGhIZWFkZXISDgoGaGVhZGVyGAEgASgHEiEKBGJvZHkY",
            "AiABKAsyEy5pb3AubG9jbmV0Lk1lc3NhZ2UidgoHTWVzc2FnZRIKCgJpZBgB",
            "IAEoDRImCgdyZXF1ZXN0GAIgASgLMhMuaW9wLmxvY25ldC5SZXF1ZXN0SAAS",
            "KAoIcmVzcG9uc2UYAyABKAsyFC5pb3AubG9jbmV0LlJlc3BvbnNlSABCDQoL",
            "TWVzc2FnZVR5cGUixgEKB1JlcXVlc3QSDwoHdmVyc2lvbhgBIAEoDBI4Cg1s",
            "b2NhbF9zZXJ2aWNlGAIgASgLMh8uaW9wLmxvY25ldC5Mb2NhbFNlcnZpY2VS",
            "ZXF1ZXN0SAASNAoLcmVtb3RlX25vZGUYAyABKAsyHS5pb3AubG9jbmV0LlJl",
            "bW90ZU5vZGVSZXF1ZXN0SAASKwoGY2xpZW50GAQgASgLMhkuaW9wLmxvY25l",
            "dC5DbGllbnRSZXF1ZXN0SABCDQoLUmVxdWVzdFR5cGUiggIKCFJlc3BvbnNl",
            "EiIKBnN0YXR1cxgBIAEoDjISLmlvcC5sb2NuZXQuU3RhdHVzEhEKCXRpbWVz",
            "dGFtcBgCIAEoEhIPCgdkZXRhaWxzGAMgASgJEjkKDWxvY2FsX3NlcnZpY2UY",
            "BCABKAsyIC5pb3AubG9jbmV0LkxvY2FsU2VydmljZVJlc3BvbnNlSAASNQoL",
            "cmVtb3RlX25vZGUYBSABKAsyHi5pb3AubG9jbmV0LlJlbW90ZU5vZGVSZXNw",
            "b25zZUgAEiwKBmNsaWVudBgGIAEoCzIaLmlvcC5sb2NuZXQuQ2xpZW50UmVz",
            "cG9uc2VIAEIOCgxSZXNwb25zZVR5cGUi3gIKE0xvY2FsU2VydmljZVJlcXVl",
            "c3QSPgoQcmVnaXN0ZXJfc2VydmljZRgBIAEoCzIiLmlvcC5sb2NuZXQuUmVn",
            "aXN0ZXJTZXJ2aWNlUmVxdWVzdEgAEkIKEmRlcmVnaXN0ZXJfc2VydmljZRgC",
            "IAEoCzIkLmlvcC5sb2NuZXQuRGVyZWdpc3RlclNlcnZpY2VSZXF1ZXN0SAAS",
            "UgoTZ2V0X25laWdoYm91cl9ub2RlcxgDIAEoCzIzLmlvcC5sb2NuZXQuR2V0",
            "TmVpZ2hib3VyTm9kZXNCeURpc3RhbmNlTG9jYWxSZXF1ZXN0SAASVAoVbmVp",
            "Z2hib3VyaG9vZF9jaGFuZ2VkGAQgASgLMjMuaW9wLmxvY25ldC5OZWlnaGJv",
            "dXJob29kQ2hhbmdlZE5vdGlmaWNhdGlvblJlcXVlc3RIAEIZChdMb2NhbFNl",
            "cnZpY2VSZXF1ZXN0VHlwZSLfAgoUTG9jYWxTZXJ2aWNlUmVzcG9uc2USPwoQ",
            "cmVnaXN0ZXJfc2VydmljZRgBIAEoCzIjLmlvcC5sb2NuZXQuUmVnaXN0ZXJT",
            "ZXJ2aWNlUmVzcG9uc2VIABJDChJkZXJlZ2lzdGVyX3NlcnZpY2UYAiABKAsy",
            "JS5pb3AubG9jbmV0LkRlcmVnaXN0ZXJTZXJ2aWNlUmVzcG9uc2VIABJOChNn",
            "ZXRfbmVpZ2hib3VyX25vZGVzGAMgASgLMi8uaW9wLmxvY25ldC5HZXROZWln",
            "aGJvdXJOb2Rlc0J5RGlzdGFuY2VSZXNwb25zZUgAElUKFW5laWdoYm91cmhv",
            "b2RfdXBkYXRlZBgEIAEoCzI0LmlvcC5sb2NuZXQuTmVpZ2hib3VyaG9vZENo",
            "YW5nZWROb3RpZmljYXRpb25SZXNwb25zZUgAQhoKGExvY2FsU2VydmljZVJl",
            "c3BvbnNlVHlwZSJCChZSZWdpc3RlclNlcnZpY2VSZXF1ZXN0EigKB3NlcnZp",
            "Y2UYASABKAsyFy5pb3AubG9jbmV0LlNlcnZpY2VJbmZvIkQKF1JlZ2lzdGVy",
            "U2VydmljZVJlc3BvbnNlEikKCGxvY2F0aW9uGAEgASgLMhcuaW9wLmxvY25l",
            "dC5HcHNMb2NhdGlvbiJJChhEZXJlZ2lzdGVyU2VydmljZVJlcXVlc3QSLQoM",
            "c2VydmljZV90eXBlGAEgASgOMhcuaW9wLmxvY25ldC5TZXJ2aWNlVHlwZSIb",
            "ChlEZXJlZ2lzdGVyU2VydmljZVJlc3BvbnNlIk4KJ0dldE5laWdoYm91ck5v",
            "ZGVzQnlEaXN0YW5jZUxvY2FsUmVxdWVzdBIjChtrZWVwX2FsaXZlX2FuZF9z",
            "ZW5kX3VwZGF0ZXMYASABKAgiSgojR2V0TmVpZ2hib3VyTm9kZXNCeURpc3Rh",
            "bmNlUmVzcG9uc2USIwoFbm9kZXMYASADKAsyFC5pb3AubG9jbmV0Lk5vZGVJ",
            "bmZvIqIBChNOZWlnaGJvdXJob29kQ2hhbmdlEi8KD2FkZGVkX25vZGVfaW5m",
            "bxgBIAEoCzIULmlvcC5sb2NuZXQuTm9kZUluZm9IABIxChF1cGRhdGVkX25v",
            "ZGVfaW5mbxgCIAEoCzIULmlvcC5sb2NuZXQuTm9kZUluZm9IABIZCg9yZW1v",
            "dmVkX25vZGVfaWQYAyABKAxIAEIMCgpDaGFuZ2VUeXBlIlsKJ05laWdoYm91",
            "cmhvb2RDaGFuZ2VkTm90aWZpY2F0aW9uUmVxdWVzdBIwCgdjaGFuZ2VzGAEg",
            "AygLMh8uaW9wLmxvY25ldC5OZWlnaGJvdXJob29kQ2hhbmdlIioKKE5laWdo",
            "Ym91cmhvb2RDaGFuZ2VkTm90aWZpY2F0aW9uUmVzcG9uc2UinAQKEVJlbW90",
            "ZU5vZGVSZXF1ZXN0EjsKEGFjY2VwdF9jb2xsZWFndWUYASABKAsyHy5pb3Au",
            "bG9jbmV0LkJ1aWxkTmV0d29ya1JlcXVlc3RIABI6Cg9yZW5ld19jb2xsZWFn",
            "dWUYAiABKAsyHy5pb3AubG9jbmV0LkJ1aWxkTmV0d29ya1JlcXVlc3RIABI7",
            "ChBhY2NlcHRfbmVpZ2hib3VyGAMgASgLMh8uaW9wLmxvY25ldC5CdWlsZE5l",
            "dHdvcmtSZXF1ZXN0SAASOgoPcmVuZXdfbmVpZ2hib3VyGAQgASgLMh8uaW9w",
            "LmxvY25ldC5CdWlsZE5ldHdvcmtSZXF1ZXN0SAASOQoOZ2V0X25vZGVfY291",
            "bnQYBSABKAsyHy5pb3AubG9jbmV0LkdldE5vZGVDb3VudFJlcXVlc3RIABI9",
            "ChBnZXRfcmFuZG9tX25vZGVzGAYgASgLMiEuaW9wLmxvY25ldC5HZXRSYW5k",
            "b21Ob2Rlc1JlcXVlc3RIABJJChFnZXRfY2xvc2VzdF9ub2RlcxgHIAEoCzIs",
            "LmlvcC5sb2NuZXQuR2V0Q2xvc2VzdE5vZGVzQnlEaXN0YW5jZVJlcXVlc3RI",
            "ABI3Cg1nZXRfbm9kZV9pbmZvGAggASgLMh4uaW9wLmxvY25ldC5HZXROb2Rl",
            "SW5mb1JlcXVlc3RIAEIXChVSZW1vdGVOb2RlUmVxdWVzdFR5cGUipgQKElJl",
            "bW90ZU5vZGVSZXNwb25zZRI8ChBhY2NlcHRfY29sbGVhZ3VlGAEgASgLMiAu",
            "aW9wLmxvY25ldC5CdWlsZE5ldHdvcmtSZXNwb25zZUgAEjsKD3JlbmV3X2Nv",
            "bGxlYWd1ZRgCIAEoCzIgLmlvcC5sb2NuZXQuQnVpbGROZXR3b3JrUmVzcG9u",
            "c2VIABI8ChBhY2NlcHRfbmVpZ2hib3VyGAMgASgLMiAuaW9wLmxvY25ldC5C",
            "dWlsZE5ldHdvcmtSZXNwb25zZUgAEjsKD3JlbmV3X25laWdoYm91chgEIAEo",
            "CzIgLmlvcC5sb2NuZXQuQnVpbGROZXR3b3JrUmVzcG9uc2VIABI6Cg5nZXRf",
            "bm9kZV9jb3VudBgFIAEoCzIgLmlvcC5sb2NuZXQuR2V0Tm9kZUNvdW50UmVz",
            "cG9uc2VIABI+ChBnZXRfcmFuZG9tX25vZGVzGAYgASgLMiIuaW9wLmxvY25l",
            "dC5HZXRSYW5kb21Ob2Rlc1Jlc3BvbnNlSAASSgoRZ2V0X2Nsb3Nlc3Rfbm9k",
            "ZXMYByABKAsyLS5pb3AubG9jbmV0LkdldENsb3Nlc3ROb2Rlc0J5RGlzdGFu",
            "Y2VSZXNwb25zZUgAEjgKDWdldF9ub2RlX2luZm8YCCABKAsyHy5pb3AubG9j",
            "bmV0LkdldE5vZGVJbmZvUmVzcG9uc2VIAEIYChZSZW1vdGVOb2RlUmVzcG9u",
            "c2VUeXBlIkgKE0J1aWxkTmV0d29ya1JlcXVlc3QSMQoTcmVxdWVzdG9yX25v",
            "ZGVfaW5mbxgBIAEoCzIULmlvcC5sb2NuZXQuTm9kZUluZm8idQoUQnVpbGRO",
            "ZXR3b3JrUmVzcG9uc2USEAoIYWNjZXB0ZWQYASABKAgSMAoSYWNjZXB0b3Jf",
            "bm9kZV9pbmZvGAIgASgLMhQuaW9wLmxvY25ldC5Ob2RlSW5mbxIZChFyZW1v",
            "dGVfaXBfYWRkcmVzcxgDIAEoDCIVChNHZXROb2RlQ291bnRSZXF1ZXN0IioK",
            "FEdldE5vZGVDb3VudFJlc3BvbnNlEhIKCm5vZGVfY291bnQYASABKA0iSwoV",
            "R2V0UmFuZG9tTm9kZXNSZXF1ZXN0EhYKDm1heF9ub2RlX2NvdW50GAEgASgN",
            "EhoKEmluY2x1ZGVfbmVpZ2hib3VycxgCIAEoCCI9ChZHZXRSYW5kb21Ob2Rl",
            "c1Jlc3BvbnNlEiMKBW5vZGVzGAEgAygLMhQuaW9wLmxvY25ldC5Ob2RlSW5m",
            "byKYAQogR2V0Q2xvc2VzdE5vZGVzQnlEaXN0YW5jZVJlcXVlc3QSKQoIbG9j",
            "YXRpb24YASABKAsyFy5pb3AubG9jbmV0Lkdwc0xvY2F0aW9uEhUKDW1heF9y",
            "YWRpdXNfa20YAiABKAISFgoObWF4X25vZGVfY291bnQYAyABKA0SGgoSaW5j",
            "bHVkZV9uZWlnaGJvdXJzGAQgASgIIkgKIUdldENsb3Nlc3ROb2Rlc0J5RGlz",
            "dGFuY2VSZXNwb25zZRIjCgVub2RlcxgBIAMoCzIULmlvcC5sb2NuZXQuTm9k",
            "ZUluZm8i/QEKDUNsaWVudFJlcXVlc3QSNwoNZ2V0X25vZGVfaW5mbxgBIAEo",
            "CzIeLmlvcC5sb2NuZXQuR2V0Tm9kZUluZm9SZXF1ZXN0SAASUwoTZ2V0X25l",
            "aWdoYm91cl9ub2RlcxgCIAEoCzI0LmlvcC5sb2NuZXQuR2V0TmVpZ2hib3Vy",
            "Tm9kZXNCeURpc3RhbmNlQ2xpZW50UmVxdWVzdEgAEkkKEWdldF9jbG9zZXN0",
            "X25vZGVzGAMgASgLMiwuaW9wLmxvY25ldC5HZXRDbG9zZXN0Tm9kZXNCeURp",
            "c3RhbmNlUmVxdWVzdEgAQhMKEUNsaWVudFJlcXVlc3RUeXBlIvwBCg5DbGll",
            "bnRSZXNwb25zZRI4Cg1nZXRfbm9kZV9pbmZvGAEgASgLMh8uaW9wLmxvY25l",
            "dC5HZXROb2RlSW5mb1Jlc3BvbnNlSAASTgoTZ2V0X25laWdoYm91cl9ub2Rl",
            "cxgCIAEoCzIvLmlvcC5sb2NuZXQuR2V0TmVpZ2hib3VyTm9kZXNCeURpc3Rh",
            "bmNlUmVzcG9uc2VIABJKChFnZXRfY2xvc2VzdF9ub2RlcxgDIAEoCzItLmlv",
            "cC5sb2NuZXQuR2V0Q2xvc2VzdE5vZGVzQnlEaXN0YW5jZVJlc3BvbnNlSABC",
            "FAoSQ2xpZW50UmVzcG9uc2VUeXBlIhQKEkdldE5vZGVJbmZvUmVxdWVzdCI+",
            "ChNHZXROb2RlSW5mb1Jlc3BvbnNlEicKCW5vZGVfaW5mbxgBIAEoCzIULmlv",
            "cC5sb2NuZXQuTm9kZUluZm8iKgooR2V0TmVpZ2hib3VyTm9kZXNCeURpc3Rh",
            "bmNlQ2xpZW50UmVxdWVzdCp5CgZTdGF0dXMSDQoJU1RBVFVTX09LEAASHAoY",
            "RVJST1JfUFJPVE9DT0xfVklPTEFUSU9OEAESFQoRRVJST1JfVU5TVVBQT1JU",
            "RUQQAhISCg5FUlJPUl9JTlRFUk5BTBAIEhcKE0VSUk9SX0lOVkFMSURfVkFM",
            "VUUQNiqWAQoLU2VydmljZVR5cGUSEAoMVU5TVFJVQ1RVUkVEEAASCwoHQ09O",
            "VEVOVBABEgsKB0xBVEVOQ1kQAhIMCghMT0NBVElPThADEgkKBVRPS0VOEAoS",
            "CwoHUFJPRklMRRALEg0KCVBST1hJTUlUWRAMEgkKBVJFTEFZEA0SDgoKUkVQ",
            "VVRBVElPThAOEgsKB01JTlRJTkcQD2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Locnet.Status), typeof(global::Iop.Locnet.ServiceType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.ServiceInfo), global::Iop.Locnet.ServiceInfo.Parser, new[]{ "Type", "Port", "ServiceData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GpsLocation), global::Iop.Locnet.GpsLocation.Parser, new[]{ "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NodeContact), global::Iop.Locnet.NodeContact.Parser, new[]{ "IpAddress", "NodePort", "ClientPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NodeInfo), global::Iop.Locnet.NodeInfo.Parser, new[]{ "NodeId", "Contact", "Location", "Services" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.MessageWithHeader), global::Iop.Locnet.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Message), global::Iop.Locnet.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Request), global::Iop.Locnet.Request.Parser, new[]{ "Version", "LocalService", "RemoteNode", "Client" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Response), global::Iop.Locnet.Response.Parser, new[]{ "Status", "Timestamp", "Details", "LocalService", "RemoteNode", "Client" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.LocalServiceRequest), global::Iop.Locnet.LocalServiceRequest.Parser, new[]{ "RegisterService", "DeregisterService", "GetNeighbourNodes", "NeighbourhoodChanged" }, new[]{ "LocalServiceRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.LocalServiceResponse), global::Iop.Locnet.LocalServiceResponse.Parser, new[]{ "RegisterService", "DeregisterService", "GetNeighbourNodes", "NeighbourhoodUpdated" }, new[]{ "LocalServiceResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RegisterServiceRequest), global::Iop.Locnet.RegisterServiceRequest.Parser, new[]{ "Service" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RegisterServiceResponse), global::Iop.Locnet.RegisterServiceResponse.Parser, new[]{ "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.DeregisterServiceRequest), global::Iop.Locnet.DeregisterServiceRequest.Parser, new[]{ "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.DeregisterServiceResponse), global::Iop.Locnet.DeregisterServiceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest), global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest.Parser, new[]{ "KeepAliveAndSendUpdates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNeighbourNodesByDistanceResponse), global::Iop.Locnet.GetNeighbourNodesByDistanceResponse.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NeighbourhoodChange), global::Iop.Locnet.NeighbourhoodChange.Parser, new[]{ "AddedNodeInfo", "UpdatedNodeInfo", "RemovedNodeId" }, new[]{ "ChangeType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NeighbourhoodChangedNotificationRequest), global::Iop.Locnet.NeighbourhoodChangedNotificationRequest.Parser, new[]{ "Changes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NeighbourhoodChangedNotificationResponse), global::Iop.Locnet.NeighbourhoodChangedNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RemoteNodeRequest), global::Iop.Locnet.RemoteNodeRequest.Parser, new[]{ "AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetNodeCount", "GetRandomNodes", "GetClosestNodes", "GetNodeInfo" }, new[]{ "RemoteNodeRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RemoteNodeResponse), global::Iop.Locnet.RemoteNodeResponse.Parser, new[]{ "AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetNodeCount", "GetRandomNodes", "GetClosestNodes", "GetNodeInfo" }, new[]{ "RemoteNodeResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.BuildNetworkRequest), global::Iop.Locnet.BuildNetworkRequest.Parser, new[]{ "RequestorNodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.BuildNetworkResponse), global::Iop.Locnet.BuildNetworkResponse.Parser, new[]{ "Accepted", "AcceptorNodeInfo", "RemoteIpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNodeCountRequest), global::Iop.Locnet.GetNodeCountRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNodeCountResponse), global::Iop.Locnet.GetNodeCountResponse.Parser, new[]{ "NodeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetRandomNodesRequest), global::Iop.Locnet.GetRandomNodesRequest.Parser, new[]{ "MaxNodeCount", "IncludeNeighbours" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetRandomNodesResponse), global::Iop.Locnet.GetRandomNodesResponse.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetClosestNodesByDistanceRequest), global::Iop.Locnet.GetClosestNodesByDistanceRequest.Parser, new[]{ "Location", "MaxRadiusKm", "MaxNodeCount", "IncludeNeighbours" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetClosestNodesByDistanceResponse), global::Iop.Locnet.GetClosestNodesByDistanceResponse.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.ClientRequest), global::Iop.Locnet.ClientRequest.Parser, new[]{ "GetNodeInfo", "GetNeighbourNodes", "GetClosestNodes" }, new[]{ "ClientRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.ClientResponse), global::Iop.Locnet.ClientResponse.Parser, new[]{ "GetNodeInfo", "GetNeighbourNodes", "GetClosestNodes" }, new[]{ "ClientResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNodeInfoRequest), global::Iop.Locnet.GetNodeInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNodeInfoResponse), global::Iop.Locnet.GetNodeInfoResponse.Parser, new[]{ "NodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest), global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Return codes to mark whether the operation completed successfully or which error occurred.
  /// TODO should status codes be shared between projects and maybe separated into an IopCommon.proto?
  /// NOTE value of common status codes are exactly the same as defined in IopProfileServer to make this easy.
  /// </summary>
  public enum Status {
    /// <summary>
    /// General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    /// The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    /// The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    /// Internal error occurred while processing the message.
    /// </summary>
    [pbr::OriginalName("ERROR_INTERNAL")] ErrorInternal = 8,
    /// <summary>
    /// A field in the request contains an invalid value.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_VALUE")] ErrorInvalidValue = 54,
  }

  /// <summary>
  /// All further network/server types of the Internet of People
  /// that can be registered here so as it can be searched geographically on the client interface.
  /// </summary>
  public enum ServiceType {
    /// <summary>
    /// Low level networks
    /// </summary>
    [pbr::OriginalName("UNSTRUCTURED")] Unstructured = 0,
    [pbr::OriginalName("CONTENT")] Content = 1,
    [pbr::OriginalName("LATENCY")] Latency = 2,
    [pbr::OriginalName("LOCATION")] Location = 3,
    /// <summary>
    /// High level servers
    /// </summary>
    [pbr::OriginalName("TOKEN")] Token = 10,
    [pbr::OriginalName("PROFILE")] Profile = 11,
    [pbr::OriginalName("PROXIMITY")] Proximity = 12,
    [pbr::OriginalName("RELAY")] Relay = 13,
    [pbr::OriginalName("REPUTATION")] Reputation = 14,
    [pbr::OriginalName("MINTING")] Minting = 15,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Describe a single service running on the same host. Fields and their formats are analogue to NodeInfo.
  /// We assume that the service can be accessed on the same IP address as the location based network node.
  /// </summary>
  public sealed partial class ServiceInfo : pb::IMessage<ServiceInfo> {
    private static readonly pb::MessageParser<ServiceInfo> _parser = new pb::MessageParser<ServiceInfo>(() => new ServiceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo(ServiceInfo other) : this() {
      type_ = other.type_;
      port_ = other.port_;
      serviceData_ = other.serviceData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo Clone() {
      return new ServiceInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Iop.Locnet.ServiceType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ServiceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    /// Network port where service is reachable on this host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "service_data" field.</summary>
    public const int ServiceDataFieldNumber = 3;
    private pb::ByteString serviceData_ = pb::ByteString.Empty;
    /// <summary>
    /// Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ServiceData {
      get { return serviceData_; }
      set {
        serviceData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Port != other.Port) return false;
      if (ServiceData != other.ServiceData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServiceData.Length != 0) hash ^= ServiceData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (ServiceData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ServiceData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (ServiceData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServiceData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServiceData.Length != 0) {
        ServiceData = other.ServiceData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Iop.Locnet.ServiceType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 26: {
            ServiceData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GpsLocation represents a 2D GPS position without height.
  /// Latitude and longitude coordinates use a signed integer stored as type decimal(9,6),
  /// which means that a floating point value of the latitude or longitude is multiplied by 1,000,000
  /// and converted to integer (cutting any digits right of the decimal point without rounding).
  /// To get the floating point value back, simply divide the integer value by 1,000,000.
  /// For latitudes, valid values are in range [-90,000,000;90,000,000], for longitudes the range is 
  /// [-179,999,999;180,000,000].
  /// </summary>
  public sealed partial class GpsLocation : pb::IMessage<GpsLocation> {
    private static readonly pb::MessageParser<GpsLocation> _parser = new pb::MessageParser<GpsLocation>(() => new GpsLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GpsLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation(GpsLocation other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation Clone() {
      return new GpsLocation(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 1;
    private int latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private int longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GpsLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GpsLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Longitude);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GpsLocation other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 21: {
            Longitude = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Node endpoints that can be contacted by a client.
  /// IP address is represented as a byte array which must contain 4 bytes for Ipv4 addresses and
  /// 16 bytes for an Ipv6 address.
  /// Port must be a simple TCP port which should be uint16, but there is no appropriate data type
  /// in ProtoBuf so it is represented as uint32.
  /// </summary>
  public sealed partial class NodeContact : pb::IMessage<NodeContact> {
    private static readonly pb::MessageParser<NodeContact> _parser = new pb::MessageParser<NodeContact>(() => new NodeContact());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeContact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContact(NodeContact other) : this() {
      ipAddress_ = other.ipAddress_;
      nodePort_ = other.nodePort_;
      clientPort_ = other.clientPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContact Clone() {
      return new NodeContact(this);
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private pb::ByteString ipAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_port" field.</summary>
    public const int NodePortFieldNumber = 2;
    private uint nodePort_;
    /// <summary>
    /// Port where remote node interface (for nodes of the same network) is available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodePort {
      get { return nodePort_; }
      set {
        nodePort_ = value;
      }
    }

    /// <summary>Field number for the "client_port" field.</summary>
    public const int ClientPortFieldNumber = 3;
    private uint clientPort_;
    /// <summary>
    /// Port where client interface (for end users) is available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientPort {
      get { return clientPort_; }
      set {
        clientPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeContact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeContact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (NodePort != other.NodePort) return false;
      if (ClientPort != other.ClientPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (NodePort != 0) hash ^= NodePort.GetHashCode();
      if (ClientPort != 0) hash ^= ClientPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IpAddress);
      }
      if (NodePort != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NodePort);
      }
      if (ClientPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpAddress);
      }
      if (NodePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodePort);
      }
      if (ClientPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeContact other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.NodePort != 0) {
        NodePort = other.NodePort;
      }
      if (other.ClientPort != 0) {
        ClientPort = other.ClientPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IpAddress = input.ReadBytes();
            break;
          }
          case 16: {
            NodePort = input.ReadUInt32();
            break;
          }
          case 24: {
            ClientPort = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Publicly known identity of a node, created after the similar "profile" entity of the profile server,
  /// extended the GPS location of the node.
  /// </summary>
  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      nodeId_ = other.nodeId_;
      Contact = other.contact_ != null ? other.Contact.Clone() : null;
      Location = other.location_ != null ? other.Location.Clone() : null;
      services_ = other.services_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private pb::ByteString nodeId_ = pb::ByteString.Empty;
    /// <summary>
    /// TODO do we also need a public key here?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contact" field.</summary>
    public const int ContactFieldNumber = 2;
    private global::Iop.Locnet.NodeContact contact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeContact Contact {
      get { return contact_; }
      set {
        contact_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private global::Iop.Locnet.GpsLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GpsLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Iop.Locnet.ServiceInfo> _repeated_services_codec
        = pb::FieldCodec.ForMessage(258, global::Iop.Locnet.ServiceInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.ServiceInfo> services_ = new pbc::RepeatedField<global::Iop.Locnet.ServiceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.ServiceInfo> Services {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (!object.Equals(Contact, other.Contact)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if(!services_.Equals(other.services_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (contact_ != null) hash ^= Contact.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= services_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodeId);
      }
      if (contact_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contact);
      }
      if (location_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Location);
      }
      services_.WriteTo(output, _repeated_services_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeId);
      }
      if (contact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contact);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      size += services_.CalculateSize(_repeated_services_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.contact_ != null) {
        if (contact_ == null) {
          contact_ = new global::Iop.Locnet.NodeContact();
        }
        Contact.MergeFrom(other.Contact);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Iop.Locnet.GpsLocation();
        }
        Location.MergeFrom(other.Location);
      }
      services_.Add(other.services_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NodeId = input.ReadBytes();
            break;
          }
          case 18: {
            if (contact_ == null) {
              contact_ = new global::Iop.Locnet.NodeContact();
            }
            input.ReadMessage(contact_);
            break;
          }
          case 26: {
            if (location_ == null) {
              location_ = new global::Iop.Locnet.GpsLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 258: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  /// There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  /// with body size 4660 bytes would be:
  ///
  ///   0D 34 12 00 00
  ///
  /// where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  /// this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4660 decimal.
  /// Thus the total number of bytes sent over the wire for this message would be 4665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    /// Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Locnet.Message body_;
    /// <summary>
    /// Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Locnet.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Locnet.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Locnet.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Locnet.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Locnet.Request subBuilder = new global::Iop.Locnet.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.Response subBuilder = new global::Iop.Locnet.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests use semantic versioning (major,minor,patch) represented as a 3 byte array.
  /// For more details see the Profile Server protocol definition.
  /// NOTE this type also could be part of an IopCommon.proto file.
  ///
  /// The Location-based Network provides three interfaces, each used by a specific type of clients.
  /// One interface is used by local services (e.g. the Profile Server) running on the same host
  /// to expose their availability and check the neighbourhood.
  /// Another interface is used for communication between nodes to build the network.
  /// The third interface is for "end users" (i.e. client programs) to locate nodes and services
  /// based on geographical information.
  /// The different operation set for each interface is collected under a specific RequestType here.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.LocalService:
          LocalService = other.LocalService.Clone();
          break;
        case RequestTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode.Clone();
          break;
        case RequestTypeOneofCase.Client:
          Client = other.Client.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_service" field.</summary>
    public const int LocalServiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.LocalServiceRequest LocalService {
      get { return requestTypeCase_ == RequestTypeOneofCase.LocalService ? (global::Iop.Locnet.LocalServiceRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LocalService;
      }
    }

    /// <summary>Field number for the "remote_node" field.</summary>
    public const int RemoteNodeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RemoteNodeRequest RemoteNode {
      get { return requestTypeCase_ == RequestTypeOneofCase.RemoteNode ? (global::Iop.Locnet.RemoteNodeRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.RemoteNode;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ClientRequest Client {
      get { return requestTypeCase_ == RequestTypeOneofCase.Client ? (global::Iop.Locnet.ClientRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Client;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      LocalService = 2,
      RemoteNode = 3,
      Client = 4,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(LocalService, other.LocalService)) return false;
      if (!object.Equals(RemoteNode, other.RemoteNode)) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) hash ^= LocalService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) hash ^= RemoteNode.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Client) hash ^= Client.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
        output.WriteRawTag(26);
        output.WriteMessage(RemoteNode);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Client) {
        output.WriteRawTag(34);
        output.WriteMessage(Client);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteNode);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Client) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.LocalService:
          LocalService = other.LocalService;
          break;
        case RequestTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode;
          break;
        case RequestTypeOneofCase.Client:
          Client = other.Client;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Locnet.LocalServiceRequest subBuilder = new global::Iop.Locnet.LocalServiceRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
              subBuilder.MergeFrom(LocalService);
            }
            input.ReadMessage(subBuilder);
            LocalService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.RemoteNodeRequest subBuilder = new global::Iop.Locnet.RemoteNodeRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
              subBuilder.MergeFrom(RemoteNode);
            }
            input.ReadMessage(subBuilder);
            RemoteNode = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.ClientRequest subBuilder = new global::Iop.Locnet.ClientRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Client) {
              subBuilder.MergeFrom(Client);
            }
            input.ReadMessage(subBuilder);
            Client = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// There must a response for every request. Responses are divided by the interface just like requests.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.LocalService:
          LocalService = other.LocalService.Clone();
          break;
        case ResponseTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode.Clone();
          break;
        case ResponseTypeOneofCase.Client:
          Client = other.Client.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Locnet.Status status_ = 0;
    /// <summary>
    /// Status code marking whether the request was successfully served or an error occured.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    /// NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    /// In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_service" field.</summary>
    public const int LocalServiceFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.LocalServiceResponse LocalService {
      get { return responseTypeCase_ == ResponseTypeOneofCase.LocalService ? (global::Iop.Locnet.LocalServiceResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.LocalService;
      }
    }

    /// <summary>Field number for the "remote_node" field.</summary>
    public const int RemoteNodeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RemoteNodeResponse RemoteNode {
      get { return responseTypeCase_ == ResponseTypeOneofCase.RemoteNode ? (global::Iop.Locnet.RemoteNodeResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RemoteNode;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ClientResponse Client {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Client ? (global::Iop.Locnet.ClientResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Client;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      LocalService = 4,
      RemoteNode = 5,
      Client = 6,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(LocalService, other.LocalService)) return false;
      if (!object.Equals(RemoteNode, other.RemoteNode)) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) hash ^= LocalService.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) hash ^= RemoteNode.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) hash ^= Client.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
        output.WriteRawTag(42);
        output.WriteMessage(RemoteNode);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
        output.WriteRawTag(50);
        output.WriteMessage(Client);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteNode);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.LocalService:
          LocalService = other.LocalService;
          break;
        case ResponseTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode;
          break;
        case ResponseTypeOneofCase.Client:
          Client = other.Client;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Locnet.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 34: {
            global::Iop.Locnet.LocalServiceResponse subBuilder = new global::Iop.Locnet.LocalServiceResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
              subBuilder.MergeFrom(LocalService);
            }
            input.ReadMessage(subBuilder);
            LocalService = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.RemoteNodeResponse subBuilder = new global::Iop.Locnet.RemoteNodeResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
              subBuilder.MergeFrom(RemoteNode);
            }
            input.ReadMessage(subBuilder);
            RemoteNode = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.ClientResponse subBuilder = new global::Iop.Locnet.ClientResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
              subBuilder.MergeFrom(Client);
            }
            input.ReadMessage(subBuilder);
            Client = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Distinct operations of the local service interface.
  /// </summary>
  public sealed partial class LocalServiceRequest : pb::IMessage<LocalServiceRequest> {
    private static readonly pb::MessageParser<LocalServiceRequest> _parser = new pb::MessageParser<LocalServiceRequest>(() => new LocalServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest(LocalServiceRequest other) : this() {
      switch (other.LocalServiceRequestTypeCase) {
        case LocalServiceRequestTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService.Clone();
          break;
        case LocalServiceRequestTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService.Clone();
          break;
        case LocalServiceRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case LocalServiceRequestTypeOneofCase.NeighbourhoodChanged:
          NeighbourhoodChanged = other.NeighbourhoodChanged.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest Clone() {
      return new LocalServiceRequest(this);
    }

    /// <summary>Field number for the "register_service" field.</summary>
    public const int RegisterServiceFieldNumber = 1;
    /// <summary>
    /// These requests are sent as usual from the client to the server asking to perform an operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RegisterServiceRequest RegisterService {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService ? (global::Iop.Locnet.RegisterServiceRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.RegisterService;
      }
    }

    /// <summary>Field number for the "deregister_service" field.</summary>
    public const int DeregisterServiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.DeregisterServiceRequest DeregisterService {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService ? (global::Iop.Locnet.DeregisterServiceRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.DeregisterService;
      }
    }

    /// <summary>Field number for the "get_neighbour_nodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest GetNeighbourNodes {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "neighbourhood_changed" field.</summary>
    public const int NeighbourhoodChangedFieldNumber = 4;
    /// <summary>
    /// This is an unique, exceptional request. If the client previously sent
    /// a get_neighbour_nodes request to the server and set the keep_alive flag,
    /// the server is supposed to keep the connection alive and notify the client
    /// about changes in its neigbhourhood by sending the following request to the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NeighbourhoodChangedNotificationRequest NeighbourhoodChanged {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.NeighbourhoodChanged ? (global::Iop.Locnet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.NeighbourhoodChanged;
      }
    }

    private object localServiceRequestType_;
    /// <summary>Enum of possible cases for the "LocalServiceRequestType" oneof.</summary>
    public enum LocalServiceRequestTypeOneofCase {
      None = 0,
      RegisterService = 1,
      DeregisterService = 2,
      GetNeighbourNodes = 3,
      NeighbourhoodChanged = 4,
    }
    private LocalServiceRequestTypeOneofCase localServiceRequestTypeCase_ = LocalServiceRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequestTypeOneofCase LocalServiceRequestTypeCase {
      get { return localServiceRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalServiceRequestType() {
      localServiceRequestTypeCase_ = LocalServiceRequestTypeOneofCase.None;
      localServiceRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegisterService, other.RegisterService)) return false;
      if (!object.Equals(DeregisterService, other.DeregisterService)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(NeighbourhoodChanged, other.NeighbourhoodChanged)) return false;
      if (LocalServiceRequestTypeCase != other.LocalServiceRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) hash ^= RegisterService.GetHashCode();
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) hash ^= DeregisterService.GetHashCode();
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.NeighbourhoodChanged) hash ^= NeighbourhoodChanged.GetHashCode();
      hash ^= (int) localServiceRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
        output.WriteRawTag(18);
        output.WriteMessage(DeregisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.NeighbourhoodChanged) {
        output.WriteRawTag(34);
        output.WriteMessage(NeighbourhoodChanged);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeregisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.NeighbourhoodChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeighbourhoodChanged);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalServiceRequest other) {
      if (other == null) {
        return;
      }
      switch (other.LocalServiceRequestTypeCase) {
        case LocalServiceRequestTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService;
          break;
        case LocalServiceRequestTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService;
          break;
        case LocalServiceRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case LocalServiceRequestTypeOneofCase.NeighbourhoodChanged:
          NeighbourhoodChanged = other.NeighbourhoodChanged;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.RegisterServiceRequest subBuilder = new global::Iop.Locnet.RegisterServiceRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
              subBuilder.MergeFrom(RegisterService);
            }
            input.ReadMessage(subBuilder);
            RegisterService = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.DeregisterServiceRequest subBuilder = new global::Iop.Locnet.DeregisterServiceRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
              subBuilder.MergeFrom(DeregisterService);
            }
            input.ReadMessage(subBuilder);
            DeregisterService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceLocalRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.NeighbourhoodChangedNotificationRequest subBuilder = new global::Iop.Locnet.NeighbourhoodChangedNotificationRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.NeighbourhoodChanged) {
              subBuilder.MergeFrom(NeighbourhoodChanged);
            }
            input.ReadMessage(subBuilder);
            NeighbourhoodChanged = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalServiceResponse : pb::IMessage<LocalServiceResponse> {
    private static readonly pb::MessageParser<LocalServiceResponse> _parser = new pb::MessageParser<LocalServiceResponse>(() => new LocalServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse(LocalServiceResponse other) : this() {
      switch (other.LocalServiceResponseTypeCase) {
        case LocalServiceResponseTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService.Clone();
          break;
        case LocalServiceResponseTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService.Clone();
          break;
        case LocalServiceResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated:
          NeighbourhoodUpdated = other.NeighbourhoodUpdated.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse Clone() {
      return new LocalServiceResponse(this);
    }

    /// <summary>Field number for the "register_service" field.</summary>
    public const int RegisterServiceFieldNumber = 1;
    /// <summary>
    /// Responses sent back to the client from the server as usual.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RegisterServiceResponse RegisterService {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService ? (global::Iop.Locnet.RegisterServiceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.RegisterService;
      }
    }

    /// <summary>Field number for the "deregister_service" field.</summary>
    public const int DeregisterServiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.DeregisterServiceResponse DeregisterService {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService ? (global::Iop.Locnet.DeregisterServiceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.DeregisterService;
      }
    }

    /// <summary>Field number for the "get_neighbour_nodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceResponse GetNeighbourNodes {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "neighbourhood_updated" field.</summary>
    public const int NeighbourhoodUpdatedFieldNumber = 4;
    /// <summary>
    /// For each neigbhourhood change notification, the client must send this response as an acknowledgement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NeighbourhoodChangedNotificationResponse NeighbourhoodUpdated {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated ? (global::Iop.Locnet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated;
      }
    }

    private object localServiceResponseType_;
    /// <summary>Enum of possible cases for the "LocalServiceResponseType" oneof.</summary>
    public enum LocalServiceResponseTypeOneofCase {
      None = 0,
      RegisterService = 1,
      DeregisterService = 2,
      GetNeighbourNodes = 3,
      NeighbourhoodUpdated = 4,
    }
    private LocalServiceResponseTypeOneofCase localServiceResponseTypeCase_ = LocalServiceResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponseTypeOneofCase LocalServiceResponseTypeCase {
      get { return localServiceResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalServiceResponseType() {
      localServiceResponseTypeCase_ = LocalServiceResponseTypeOneofCase.None;
      localServiceResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegisterService, other.RegisterService)) return false;
      if (!object.Equals(DeregisterService, other.DeregisterService)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(NeighbourhoodUpdated, other.NeighbourhoodUpdated)) return false;
      if (LocalServiceResponseTypeCase != other.LocalServiceResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) hash ^= RegisterService.GetHashCode();
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) hash ^= DeregisterService.GetHashCode();
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated) hash ^= NeighbourhoodUpdated.GetHashCode();
      hash ^= (int) localServiceResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
        output.WriteRawTag(18);
        output.WriteMessage(DeregisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated) {
        output.WriteRawTag(34);
        output.WriteMessage(NeighbourhoodUpdated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeregisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeighbourhoodUpdated);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalServiceResponse other) {
      if (other == null) {
        return;
      }
      switch (other.LocalServiceResponseTypeCase) {
        case LocalServiceResponseTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService;
          break;
        case LocalServiceResponseTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService;
          break;
        case LocalServiceResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated:
          NeighbourhoodUpdated = other.NeighbourhoodUpdated;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.RegisterServiceResponse subBuilder = new global::Iop.Locnet.RegisterServiceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
              subBuilder.MergeFrom(RegisterService);
            }
            input.ReadMessage(subBuilder);
            RegisterService = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.DeregisterServiceResponse subBuilder = new global::Iop.Locnet.DeregisterServiceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
              subBuilder.MergeFrom(DeregisterService);
            }
            input.ReadMessage(subBuilder);
            DeregisterService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.NeighbourhoodChangedNotificationResponse subBuilder = new global::Iop.Locnet.NeighbourhoodChangedNotificationResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.NeighbourhoodUpdated) {
              subBuilder.MergeFrom(NeighbourhoodUpdated);
            }
            input.ReadMessage(subBuilder);
            NeighbourhoodUpdated = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Register a local service (e.g. the Profile Server) with the location-based network
  /// so as clients can detect its existence and contact it.
  /// </summary>
  public sealed partial class RegisterServiceRequest : pb::IMessage<RegisterServiceRequest> {
    private static readonly pb::MessageParser<RegisterServiceRequest> _parser = new pb::MessageParser<RegisterServiceRequest>(() => new RegisterServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest(RegisterServiceRequest other) : this() {
      Service = other.service_ != null ? other.Service.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest Clone() {
      return new RegisterServiceRequest(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private global::Iop.Locnet.ServiceInfo service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ServiceInfo Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Service, other.Service)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (service_ != null) hash ^= Service.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (service_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Iop.Locnet.ServiceInfo();
        }
        Service.MergeFrom(other.Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (service_ == null) {
              service_ = new global::Iop.Locnet.ServiceInfo();
            }
            input.ReadMessage(service_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterServiceResponse : pb::IMessage<RegisterServiceResponse> {
    private static readonly pb::MessageParser<RegisterServiceResponse> _parser = new pb::MessageParser<RegisterServiceResponse>(() => new RegisterServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse(RegisterServiceResponse other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse Clone() {
      return new RegisterServiceResponse(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Iop.Locnet.GpsLocation location_;
    /// <summary>
    /// GPS location of the LOC node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GpsLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterServiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Iop.Locnet.GpsLocation();
        }
        Location.MergeFrom(other.Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Iop.Locnet.GpsLocation();
            }
            input.ReadMessage(location_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Remove a previously registered entry of a service.
  /// </summary>
  public sealed partial class DeregisterServiceRequest : pb::IMessage<DeregisterServiceRequest> {
    private static readonly pb::MessageParser<DeregisterServiceRequest> _parser = new pb::MessageParser<DeregisterServiceRequest>(() => new DeregisterServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest(DeregisterServiceRequest other) : this() {
      serviceType_ = other.serviceType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest Clone() {
      return new DeregisterServiceRequest(this);
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private global::Iop.Locnet.ServiceType serviceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ServiceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serviceType_ = (global::Iop.Locnet.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeregisterServiceResponse : pb::IMessage<DeregisterServiceResponse> {
    private static readonly pb::MessageParser<DeregisterServiceResponse> _parser = new pb::MessageParser<DeregisterServiceResponse>(() => new DeregisterServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse(DeregisterServiceResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse Clone() {
      return new DeregisterServiceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterServiceResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Get the list of neighbouring nodes by distance.
  /// If the keep_alive flag is set, the server must keep the connection alive and notify the client
  /// about changes in its neigbhourhood by sending NeighbourhoodChangeRequests to the client.
  /// </summary>
  public sealed partial class GetNeighbourNodesByDistanceLocalRequest : pb::IMessage<GetNeighbourNodesByDistanceLocalRequest> {
    private static readonly pb::MessageParser<GetNeighbourNodesByDistanceLocalRequest> _parser = new pb::MessageParser<GetNeighbourNodesByDistanceLocalRequest>(() => new GetNeighbourNodesByDistanceLocalRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNeighbourNodesByDistanceLocalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceLocalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceLocalRequest(GetNeighbourNodesByDistanceLocalRequest other) : this() {
      keepAliveAndSendUpdates_ = other.keepAliveAndSendUpdates_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceLocalRequest Clone() {
      return new GetNeighbourNodesByDistanceLocalRequest(this);
    }

    /// <summary>Field number for the "keep_alive_and_send_updates" field.</summary>
    public const int KeepAliveAndSendUpdatesFieldNumber = 1;
    private bool keepAliveAndSendUpdates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepAliveAndSendUpdates {
      get { return keepAliveAndSendUpdates_; }
      set {
        keepAliveAndSendUpdates_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNeighbourNodesByDistanceLocalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNeighbourNodesByDistanceLocalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeepAliveAndSendUpdates != other.KeepAliveAndSendUpdates) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeepAliveAndSendUpdates != false) hash ^= KeepAliveAndSendUpdates.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeepAliveAndSendUpdates != false) {
        output.WriteRawTag(8);
        output.WriteBool(KeepAliveAndSendUpdates);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeepAliveAndSendUpdates != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNeighbourNodesByDistanceLocalRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeepAliveAndSendUpdates != false) {
        KeepAliveAndSendUpdates = other.KeepAliveAndSendUpdates;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KeepAliveAndSendUpdates = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response is a list of node data about all neighbours.
  /// </summary>
  public sealed partial class GetNeighbourNodesByDistanceResponse : pb::IMessage<GetNeighbourNodesByDistanceResponse> {
    private static readonly pb::MessageParser<GetNeighbourNodesByDistanceResponse> _parser = new pb::MessageParser<GetNeighbourNodesByDistanceResponse>(() => new GetNeighbourNodesByDistanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNeighbourNodesByDistanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse(GetNeighbourNodesByDistanceResponse other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse Clone() {
      return new GetNeighbourNodesByDistanceResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodes_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNeighbourNodesByDistanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNeighbourNodesByDistanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNeighbourNodesByDistanceResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Atomic change notification element: a neigbhour node is either added, updated or deleted.
  /// </summary>
  public sealed partial class NeighbourhoodChange : pb::IMessage<NeighbourhoodChange> {
    private static readonly pb::MessageParser<NeighbourhoodChange> _parser = new pb::MessageParser<NeighbourhoodChange>(() => new NeighbourhoodChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighbourhoodChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChange(NeighbourhoodChange other) : this() {
      switch (other.ChangeTypeCase) {
        case ChangeTypeOneofCase.AddedNodeInfo:
          AddedNodeInfo = other.AddedNodeInfo.Clone();
          break;
        case ChangeTypeOneofCase.UpdatedNodeInfo:
          UpdatedNodeInfo = other.UpdatedNodeInfo.Clone();
          break;
        case ChangeTypeOneofCase.RemovedNodeId:
          RemovedNodeId = other.RemovedNodeId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChange Clone() {
      return new NeighbourhoodChange(this);
    }

    /// <summary>Field number for the "added_node_info" field.</summary>
    public const int AddedNodeInfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo AddedNodeInfo {
      get { return changeTypeCase_ == ChangeTypeOneofCase.AddedNodeInfo ? (global::Iop.Locnet.NodeInfo) changeType_ : null; }
      set {
        changeType_ = value;
        changeTypeCase_ = value == null ? ChangeTypeOneofCase.None : ChangeTypeOneofCase.AddedNodeInfo;
      }
    }

    /// <summary>Field number for the "updated_node_info" field.</summary>
    public const int UpdatedNodeInfoFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo UpdatedNodeInfo {
      get { return changeTypeCase_ == ChangeTypeOneofCase.UpdatedNodeInfo ? (global::Iop.Locnet.NodeInfo) changeType_ : null; }
      set {
        changeType_ = value;
        changeTypeCase_ = value == null ? ChangeTypeOneofCase.None : ChangeTypeOneofCase.UpdatedNodeInfo;
      }
    }

    /// <summary>Field number for the "removed_node_id" field.</summary>
    public const int RemovedNodeIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RemovedNodeId {
      get { return changeTypeCase_ == ChangeTypeOneofCase.RemovedNodeId ? (pb::ByteString) changeType_ : pb::ByteString.Empty; }
      set {
        changeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        changeTypeCase_ = ChangeTypeOneofCase.RemovedNodeId;
      }
    }

    private object changeType_;
    /// <summary>Enum of possible cases for the "ChangeType" oneof.</summary>
    public enum ChangeTypeOneofCase {
      None = 0,
      AddedNodeInfo = 1,
      UpdatedNodeInfo = 2,
      RemovedNodeId = 3,
    }
    private ChangeTypeOneofCase changeTypeCase_ = ChangeTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTypeOneofCase ChangeTypeCase {
      get { return changeTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeType() {
      changeTypeCase_ = ChangeTypeOneofCase.None;
      changeType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighbourhoodChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighbourhoodChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AddedNodeInfo, other.AddedNodeInfo)) return false;
      if (!object.Equals(UpdatedNodeInfo, other.UpdatedNodeInfo)) return false;
      if (RemovedNodeId != other.RemovedNodeId) return false;
      if (ChangeTypeCase != other.ChangeTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (changeTypeCase_ == ChangeTypeOneofCase.AddedNodeInfo) hash ^= AddedNodeInfo.GetHashCode();
      if (changeTypeCase_ == ChangeTypeOneofCase.UpdatedNodeInfo) hash ^= UpdatedNodeInfo.GetHashCode();
      if (changeTypeCase_ == ChangeTypeOneofCase.RemovedNodeId) hash ^= RemovedNodeId.GetHashCode();
      hash ^= (int) changeTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (changeTypeCase_ == ChangeTypeOneofCase.AddedNodeInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(AddedNodeInfo);
      }
      if (changeTypeCase_ == ChangeTypeOneofCase.UpdatedNodeInfo) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdatedNodeInfo);
      }
      if (changeTypeCase_ == ChangeTypeOneofCase.RemovedNodeId) {
        output.WriteRawTag(26);
        output.WriteBytes(RemovedNodeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (changeTypeCase_ == ChangeTypeOneofCase.AddedNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddedNodeInfo);
      }
      if (changeTypeCase_ == ChangeTypeOneofCase.UpdatedNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedNodeInfo);
      }
      if (changeTypeCase_ == ChangeTypeOneofCase.RemovedNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RemovedNodeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighbourhoodChange other) {
      if (other == null) {
        return;
      }
      switch (other.ChangeTypeCase) {
        case ChangeTypeOneofCase.AddedNodeInfo:
          AddedNodeInfo = other.AddedNodeInfo;
          break;
        case ChangeTypeOneofCase.UpdatedNodeInfo:
          UpdatedNodeInfo = other.UpdatedNodeInfo;
          break;
        case ChangeTypeOneofCase.RemovedNodeId:
          RemovedNodeId = other.RemovedNodeId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.NodeInfo subBuilder = new global::Iop.Locnet.NodeInfo();
            if (changeTypeCase_ == ChangeTypeOneofCase.AddedNodeInfo) {
              subBuilder.MergeFrom(AddedNodeInfo);
            }
            input.ReadMessage(subBuilder);
            AddedNodeInfo = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.NodeInfo subBuilder = new global::Iop.Locnet.NodeInfo();
            if (changeTypeCase_ == ChangeTypeOneofCase.UpdatedNodeInfo) {
              subBuilder.MergeFrom(UpdatedNodeInfo);
            }
            input.ReadMessage(subBuilder);
            UpdatedNodeInfo = subBuilder;
            break;
          }
          case 26: {
            RemovedNodeId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A list of changes to be sent in a single bulk notification.
  /// </summary>
  public sealed partial class NeighbourhoodChangedNotificationRequest : pb::IMessage<NeighbourhoodChangedNotificationRequest> {
    private static readonly pb::MessageParser<NeighbourhoodChangedNotificationRequest> _parser = new pb::MessageParser<NeighbourhoodChangedNotificationRequest>(() => new NeighbourhoodChangedNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighbourhoodChangedNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationRequest(NeighbourhoodChangedNotificationRequest other) : this() {
      changes_ = other.changes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationRequest Clone() {
      return new NeighbourhoodChangedNotificationRequest(this);
    }

    /// <summary>Field number for the "changes" field.</summary>
    public const int ChangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NeighbourhoodChange> _repeated_changes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NeighbourhoodChange.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NeighbourhoodChange> changes_ = new pbc::RepeatedField<global::Iop.Locnet.NeighbourhoodChange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NeighbourhoodChange> Changes {
      get { return changes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighbourhoodChangedNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighbourhoodChangedNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changes_.Equals(other.changes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changes_.WriteTo(output, _repeated_changes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changes_.CalculateSize(_repeated_changes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighbourhoodChangedNotificationRequest other) {
      if (other == null) {
        return;
      }
      changes_.Add(other.changes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            changes_.AddEntriesFrom(input, _repeated_changes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NeighbourhoodChangedNotificationResponse : pb::IMessage<NeighbourhoodChangedNotificationResponse> {
    private static readonly pb::MessageParser<NeighbourhoodChangedNotificationResponse> _parser = new pb::MessageParser<NeighbourhoodChangedNotificationResponse>(() => new NeighbourhoodChangedNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighbourhoodChangedNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationResponse(NeighbourhoodChangedNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighbourhoodChangedNotificationResponse Clone() {
      return new NeighbourhoodChangedNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighbourhoodChangedNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighbourhoodChangedNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighbourhoodChangedNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RemoteNodeRequest : pb::IMessage<RemoteNodeRequest> {
    private static readonly pb::MessageParser<RemoteNodeRequest> _parser = new pb::MessageParser<RemoteNodeRequest>(() => new RemoteNodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteNodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest(RemoteNodeRequest other) : this() {
      switch (other.RemoteNodeRequestTypeCase) {
        case RemoteNodeRequestTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetNodeCount:
          GetNodeCount = other.GetNodeCount.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest Clone() {
      return new RemoteNodeRequest(this);
    }

    /// <summary>Field number for the "accept_colleague" field.</summary>
    public const int AcceptColleagueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest AcceptColleague {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.AcceptColleague;
      }
    }

    /// <summary>Field number for the "renew_colleague" field.</summary>
    public const int RenewColleagueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest RenewColleague {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.RenewColleague;
      }
    }

    /// <summary>Field number for the "accept_neighbour" field.</summary>
    public const int AcceptNeighbourFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest AcceptNeighbour {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.AcceptNeighbour;
      }
    }

    /// <summary>Field number for the "renew_neighbour" field.</summary>
    public const int RenewNeighbourFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest RenewNeighbour {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.RenewNeighbour;
      }
    }

    /// <summary>Field number for the "get_node_count" field.</summary>
    public const int GetNodeCountFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeCountRequest GetNodeCount {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeCount ? (global::Iop.Locnet.GetNodeCountRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetNodeCount;
      }
    }

    /// <summary>Field number for the "get_random_nodes" field.</summary>
    public const int GetRandomNodesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetRandomNodesRequest GetRandomNodes {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes ? (global::Iop.Locnet.GetRandomNodesRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetRandomNodes;
      }
    }

    /// <summary>Field number for the "get_closest_nodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceRequest GetClosestNodes {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetClosestNodes;
      }
    }

    /// <summary>Field number for the "get_node_info" field.</summary>
    public const int GetNodeInfoFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeInfoRequest GetNodeInfo {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeInfo ? (global::Iop.Locnet.GetNodeInfoRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetNodeInfo;
      }
    }

    private object remoteNodeRequestType_;
    /// <summary>Enum of possible cases for the "RemoteNodeRequestType" oneof.</summary>
    public enum RemoteNodeRequestTypeOneofCase {
      None = 0,
      AcceptColleague = 1,
      RenewColleague = 2,
      AcceptNeighbour = 3,
      RenewNeighbour = 4,
      GetNodeCount = 5,
      GetRandomNodes = 6,
      GetClosestNodes = 7,
      GetNodeInfo = 8,
    }
    private RemoteNodeRequestTypeOneofCase remoteNodeRequestTypeCase_ = RemoteNodeRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequestTypeOneofCase RemoteNodeRequestTypeCase {
      get { return remoteNodeRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemoteNodeRequestType() {
      remoteNodeRequestTypeCase_ = RemoteNodeRequestTypeOneofCase.None;
      remoteNodeRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteNodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteNodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcceptColleague, other.AcceptColleague)) return false;
      if (!object.Equals(RenewColleague, other.RenewColleague)) return false;
      if (!object.Equals(AcceptNeighbour, other.AcceptNeighbour)) return false;
      if (!object.Equals(RenewNeighbour, other.RenewNeighbour)) return false;
      if (!object.Equals(GetNodeCount, other.GetNodeCount)) return false;
      if (!object.Equals(GetRandomNodes, other.GetRandomNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (!object.Equals(GetNodeInfo, other.GetNodeInfo)) return false;
      if (RemoteNodeRequestTypeCase != other.RemoteNodeRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) hash ^= AcceptColleague.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) hash ^= RenewColleague.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) hash ^= AcceptNeighbour.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) hash ^= RenewNeighbour.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeCount) hash ^= GetNodeCount.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) hash ^= GetRandomNodes.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeInfo) hash ^= GetNodeInfo.GetHashCode();
      hash ^= (int) remoteNodeRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
        output.WriteRawTag(10);
        output.WriteMessage(AcceptColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
        output.WriteRawTag(18);
        output.WriteMessage(RenewColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
        output.WriteRawTag(26);
        output.WriteMessage(AcceptNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
        output.WriteRawTag(34);
        output.WriteMessage(RenewNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeCount) {
        output.WriteRawTag(42);
        output.WriteMessage(GetNodeCount);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
        output.WriteRawTag(50);
        output.WriteMessage(GetRandomNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(58);
        output.WriteMessage(GetClosestNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeInfo) {
        output.WriteRawTag(66);
        output.WriteMessage(GetNodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeCount);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRandomNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteNodeRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RemoteNodeRequestTypeCase) {
        case RemoteNodeRequestTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague;
          break;
        case RemoteNodeRequestTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague;
          break;
        case RemoteNodeRequestTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour;
          break;
        case RemoteNodeRequestTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour;
          break;
        case RemoteNodeRequestTypeOneofCase.GetNodeCount:
          GetNodeCount = other.GetNodeCount;
          break;
        case RemoteNodeRequestTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes;
          break;
        case RemoteNodeRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
        case RemoteNodeRequestTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
              subBuilder.MergeFrom(AcceptColleague);
            }
            input.ReadMessage(subBuilder);
            AcceptColleague = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
              subBuilder.MergeFrom(RenewColleague);
            }
            input.ReadMessage(subBuilder);
            RenewColleague = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
              subBuilder.MergeFrom(AcceptNeighbour);
            }
            input.ReadMessage(subBuilder);
            AcceptNeighbour = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
              subBuilder.MergeFrom(RenewNeighbour);
            }
            input.ReadMessage(subBuilder);
            RenewNeighbour = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.GetNodeCountRequest subBuilder = new global::Iop.Locnet.GetNodeCountRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeCount) {
              subBuilder.MergeFrom(GetNodeCount);
            }
            input.ReadMessage(subBuilder);
            GetNodeCount = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.GetRandomNodesRequest subBuilder = new global::Iop.Locnet.GetRandomNodesRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
              subBuilder.MergeFrom(GetRandomNodes);
            }
            input.ReadMessage(subBuilder);
            GetRandomNodes = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Locnet.GetClosestNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Locnet.GetNodeInfoRequest subBuilder = new global::Iop.Locnet.GetNodeInfoRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetNodeInfo) {
              subBuilder.MergeFrom(GetNodeInfo);
            }
            input.ReadMessage(subBuilder);
            GetNodeInfo = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoteNodeResponse : pb::IMessage<RemoteNodeResponse> {
    private static readonly pb::MessageParser<RemoteNodeResponse> _parser = new pb::MessageParser<RemoteNodeResponse>(() => new RemoteNodeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteNodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse(RemoteNodeResponse other) : this() {
      switch (other.RemoteNodeResponseTypeCase) {
        case RemoteNodeResponseTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetNodeCount:
          GetNodeCount = other.GetNodeCount.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse Clone() {
      return new RemoteNodeResponse(this);
    }

    /// <summary>Field number for the "accept_colleague" field.</summary>
    public const int AcceptColleagueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse AcceptColleague {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.AcceptColleague;
      }
    }

    /// <summary>Field number for the "renew_colleague" field.</summary>
    public const int RenewColleagueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse RenewColleague {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.RenewColleague;
      }
    }

    /// <summary>Field number for the "accept_neighbour" field.</summary>
    public const int AcceptNeighbourFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse AcceptNeighbour {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.AcceptNeighbour;
      }
    }

    /// <summary>Field number for the "renew_neighbour" field.</summary>
    public const int RenewNeighbourFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse RenewNeighbour {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.RenewNeighbour;
      }
    }

    /// <summary>Field number for the "get_node_count" field.</summary>
    public const int GetNodeCountFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeCountResponse GetNodeCount {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeCount ? (global::Iop.Locnet.GetNodeCountResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetNodeCount;
      }
    }

    /// <summary>Field number for the "get_random_nodes" field.</summary>
    public const int GetRandomNodesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetRandomNodesResponse GetRandomNodes {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes ? (global::Iop.Locnet.GetRandomNodesResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetRandomNodes;
      }
    }

    /// <summary>Field number for the "get_closest_nodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceResponse GetClosestNodes {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetClosestNodes;
      }
    }

    /// <summary>Field number for the "get_node_info" field.</summary>
    public const int GetNodeInfoFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeInfoResponse GetNodeInfo {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeInfo ? (global::Iop.Locnet.GetNodeInfoResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetNodeInfo;
      }
    }

    private object remoteNodeResponseType_;
    /// <summary>Enum of possible cases for the "RemoteNodeResponseType" oneof.</summary>
    public enum RemoteNodeResponseTypeOneofCase {
      None = 0,
      AcceptColleague = 1,
      RenewColleague = 2,
      AcceptNeighbour = 3,
      RenewNeighbour = 4,
      GetNodeCount = 5,
      GetRandomNodes = 6,
      GetClosestNodes = 7,
      GetNodeInfo = 8,
    }
    private RemoteNodeResponseTypeOneofCase remoteNodeResponseTypeCase_ = RemoteNodeResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponseTypeOneofCase RemoteNodeResponseTypeCase {
      get { return remoteNodeResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemoteNodeResponseType() {
      remoteNodeResponseTypeCase_ = RemoteNodeResponseTypeOneofCase.None;
      remoteNodeResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteNodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteNodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcceptColleague, other.AcceptColleague)) return false;
      if (!object.Equals(RenewColleague, other.RenewColleague)) return false;
      if (!object.Equals(AcceptNeighbour, other.AcceptNeighbour)) return false;
      if (!object.Equals(RenewNeighbour, other.RenewNeighbour)) return false;
      if (!object.Equals(GetNodeCount, other.GetNodeCount)) return false;
      if (!object.Equals(GetRandomNodes, other.GetRandomNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (!object.Equals(GetNodeInfo, other.GetNodeInfo)) return false;
      if (RemoteNodeResponseTypeCase != other.RemoteNodeResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) hash ^= AcceptColleague.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) hash ^= RenewColleague.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) hash ^= AcceptNeighbour.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) hash ^= RenewNeighbour.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeCount) hash ^= GetNodeCount.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) hash ^= GetRandomNodes.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeInfo) hash ^= GetNodeInfo.GetHashCode();
      hash ^= (int) remoteNodeResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
        output.WriteRawTag(10);
        output.WriteMessage(AcceptColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
        output.WriteRawTag(18);
        output.WriteMessage(RenewColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
        output.WriteRawTag(26);
        output.WriteMessage(AcceptNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
        output.WriteRawTag(34);
        output.WriteMessage(RenewNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeCount) {
        output.WriteRawTag(42);
        output.WriteMessage(GetNodeCount);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
        output.WriteRawTag(50);
        output.WriteMessage(GetRandomNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(58);
        output.WriteMessage(GetClosestNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeInfo) {
        output.WriteRawTag(66);
        output.WriteMessage(GetNodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeCount);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRandomNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteNodeResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RemoteNodeResponseTypeCase) {
        case RemoteNodeResponseTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague;
          break;
        case RemoteNodeResponseTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague;
          break;
        case RemoteNodeResponseTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour;
          break;
        case RemoteNodeResponseTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour;
          break;
        case RemoteNodeResponseTypeOneofCase.GetNodeCount:
          GetNodeCount = other.GetNodeCount;
          break;
        case RemoteNodeResponseTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes;
          break;
        case RemoteNodeResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
        case RemoteNodeResponseTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
              subBuilder.MergeFrom(AcceptColleague);
            }
            input.ReadMessage(subBuilder);
            AcceptColleague = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
              subBuilder.MergeFrom(RenewColleague);
            }
            input.ReadMessage(subBuilder);
            RenewColleague = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
              subBuilder.MergeFrom(AcceptNeighbour);
            }
            input.ReadMessage(subBuilder);
            AcceptNeighbour = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
              subBuilder.MergeFrom(RenewNeighbour);
            }
            input.ReadMessage(subBuilder);
            RenewNeighbour = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.GetNodeCountResponse subBuilder = new global::Iop.Locnet.GetNodeCountResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeCount) {
              subBuilder.MergeFrom(GetNodeCount);
            }
            input.ReadMessage(subBuilder);
            GetNodeCount = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.GetRandomNodesResponse subBuilder = new global::Iop.Locnet.GetRandomNodesResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
              subBuilder.MergeFrom(GetRandomNodes);
            }
            input.ReadMessage(subBuilder);
            GetRandomNodes = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Locnet.GetClosestNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Locnet.GetNodeInfoResponse subBuilder = new global::Iop.Locnet.GetNodeInfoResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetNodeInfo) {
              subBuilder.MergeFrom(GetNodeInfo);
            }
            input.ReadMessage(subBuilder);
            GetNodeInfo = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Initiate/Renew a colleage/neighbour relationship between nodes.
  /// The requestor node sends its own node information to the other node in the request.
  /// </summary>
  public sealed partial class BuildNetworkRequest : pb::IMessage<BuildNetworkRequest> {
    private static readonly pb::MessageParser<BuildNetworkRequest> _parser = new pb::MessageParser<BuildNetworkRequest>(() => new BuildNetworkRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildNetworkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest(BuildNetworkRequest other) : this() {
      RequestorNodeInfo = other.requestorNodeInfo_ != null ? other.RequestorNodeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest Clone() {
      return new BuildNetworkRequest(this);
    }

    /// <summary>Field number for the "requestor_node_info" field.</summary>
    public const int RequestorNodeInfoFieldNumber = 1;
    private global::Iop.Locnet.NodeInfo requestorNodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo RequestorNodeInfo {
      get { return requestorNodeInfo_; }
      set {
        requestorNodeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildNetworkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildNetworkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestorNodeInfo, other.RequestorNodeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestorNodeInfo_ != null) hash ^= RequestorNodeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestorNodeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestorNodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestorNodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestorNodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildNetworkRequest other) {
      if (other == null) {
        return;
      }
      if (other.requestorNodeInfo_ != null) {
        if (requestorNodeInfo_ == null) {
          requestorNodeInfo_ = new global::Iop.Locnet.NodeInfo();
        }
        RequestorNodeInfo.MergeFrom(other.RequestorNodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (requestorNodeInfo_ == null) {
              requestorNodeInfo_ = new global::Iop.Locnet.NodeInfo();
            }
            input.ReadMessage(requestorNodeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildNetworkResponse : pb::IMessage<BuildNetworkResponse> {
    private static readonly pb::MessageParser<BuildNetworkResponse> _parser = new pb::MessageParser<BuildNetworkResponse>(() => new BuildNetworkResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildNetworkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse(BuildNetworkResponse other) : this() {
      accepted_ = other.accepted_;
      AcceptorNodeInfo = other.acceptorNodeInfo_ != null ? other.AcceptorNodeInfo.Clone() : null;
      remoteIpAddress_ = other.remoteIpAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse Clone() {
      return new BuildNetworkResponse(this);
    }

    /// <summary>Field number for the "accepted" field.</summary>
    public const int AcceptedFieldNumber = 1;
    private bool accepted_;
    /// <summary>
    /// Whether the remote node agreed to create/renew the requested relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    /// <summary>Field number for the "acceptor_node_info" field.</summary>
    public const int AcceptorNodeInfoFieldNumber = 2;
    private global::Iop.Locnet.NodeInfo acceptorNodeInfo_;
    /// <summary>
    /// If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo AcceptorNodeInfo {
      get { return acceptorNodeInfo_; }
      set {
        acceptorNodeInfo_ = value;
      }
    }

    /// <summary>Field number for the "remote_ip_address" field.</summary>
    public const int RemoteIpAddressFieldNumber = 3;
    private pb::ByteString remoteIpAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RemoteIpAddress {
      get { return remoteIpAddress_; }
      set {
        remoteIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildNetworkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildNetworkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accepted != other.Accepted) return false;
      if (!object.Equals(AcceptorNodeInfo, other.AcceptorNodeInfo)) return false;
      if (RemoteIpAddress != other.RemoteIpAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      if (acceptorNodeInfo_ != null) hash ^= AcceptorNodeInfo.GetHashCode();
      if (RemoteIpAddress.Length != 0) hash ^= RemoteIpAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accepted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accepted);
      }
      if (acceptorNodeInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AcceptorNodeInfo);
      }
      if (RemoteIpAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RemoteIpAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accepted != false) {
        size += 1 + 1;
      }
      if (acceptorNodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptorNodeInfo);
      }
      if (RemoteIpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RemoteIpAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildNetworkResponse other) {
      if (other == null) {
        return;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
      if (other.acceptorNodeInfo_ != null) {
        if (acceptorNodeInfo_ == null) {
          acceptorNodeInfo_ = new global::Iop.Locnet.NodeInfo();
        }
        AcceptorNodeInfo.MergeFrom(other.AcceptorNodeInfo);
      }
      if (other.RemoteIpAddress.Length != 0) {
        RemoteIpAddress = other.RemoteIpAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Accepted = input.ReadBool();
            break;
          }
          case 18: {
            if (acceptorNodeInfo_ == null) {
              acceptorNodeInfo_ = new global::Iop.Locnet.NodeInfo();
            }
            input.ReadMessage(acceptorNodeInfo_);
            break;
          }
          case 26: {
            RemoteIpAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get the total count of network nodes known by the remote node.
  /// </summary>
  public sealed partial class GetNodeCountRequest : pb::IMessage<GetNodeCountRequest> {
    private static readonly pb::MessageParser<GetNodeCountRequest> _parser = new pb::MessageParser<GetNodeCountRequest>(() => new GetNodeCountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeCountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountRequest(GetNodeCountRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountRequest Clone() {
      return new GetNodeCountRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeCountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeCountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeCountRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetNodeCountResponse : pb::IMessage<GetNodeCountResponse> {
    private static readonly pb::MessageParser<GetNodeCountResponse> _parser = new pb::MessageParser<GetNodeCountResponse>(() => new GetNodeCountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeCountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountResponse(GetNodeCountResponse other) : this() {
      nodeCount_ = other.nodeCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeCountResponse Clone() {
      return new GetNodeCountResponse(this);
    }

    /// <summary>Field number for the "node_count" field.</summary>
    public const int NodeCountFieldNumber = 1;
    private uint nodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeCount {
      get { return nodeCount_; }
      set {
        nodeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeCountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeCountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeCount != other.NodeCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeCount != 0) hash ^= NodeCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeCountResponse other) {
      if (other == null) {
        return;
      }
      if (other.NodeCount != 0) {
        NodeCount = other.NodeCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NodeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for a list of random nodes.
  /// </summary>
  public sealed partial class GetRandomNodesRequest : pb::IMessage<GetRandomNodesRequest> {
    private static readonly pb::MessageParser<GetRandomNodesRequest> _parser = new pb::MessageParser<GetRandomNodesRequest>(() => new GetRandomNodesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomNodesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest(GetRandomNodesRequest other) : this() {
      maxNodeCount_ = other.maxNodeCount_;
      includeNeighbours_ = other.includeNeighbours_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest Clone() {
      return new GetRandomNodesRequest(this);
    }

    /// <summary>Field number for the "max_node_count" field.</summary>
    public const int MaxNodeCountFieldNumber = 1;
    private uint maxNodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNodeCount {
      get { return maxNodeCount_; }
      set {
        maxNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "include_neighbours" field.</summary>
    public const int IncludeNeighboursFieldNumber = 2;
    private bool includeNeighbours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNeighbours {
      get { return includeNeighbours_; }
      set {
        includeNeighbours_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomNodesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomNodesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNodeCount != other.MaxNodeCount) return false;
      if (IncludeNeighbours != other.IncludeNeighbours) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxNodeCount != 0) hash ^= MaxNodeCount.GetHashCode();
      if (IncludeNeighbours != false) hash ^= IncludeNeighbours.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxNodeCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomNodesRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxNodeCount != 0) {
        MaxNodeCount = other.MaxNodeCount;
      }
      if (other.IncludeNeighbours != false) {
        IncludeNeighbours = other.IncludeNeighbours;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxNodeCount = input.ReadUInt32();
            break;
          }
          case 16: {
            IncludeNeighbours = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomNodesResponse : pb::IMessage<GetRandomNodesResponse> {
    private static readonly pb::MessageParser<GetRandomNodesResponse> _parser = new pb::MessageParser<GetRandomNodesResponse>(() => new GetRandomNodesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomNodesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse(GetRandomNodesResponse other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse Clone() {
      return new GetRandomNodesResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodes_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomNodesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomNodesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomNodesResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// List the nodes that are closest to a specific location, useful for exploring the map.
  /// </summary>
  public sealed partial class GetClosestNodesByDistanceRequest : pb::IMessage<GetClosestNodesByDistanceRequest> {
    private static readonly pb::MessageParser<GetClosestNodesByDistanceRequest> _parser = new pb::MessageParser<GetClosestNodesByDistanceRequest>(() => new GetClosestNodesByDistanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestNodesByDistanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest(GetClosestNodesByDistanceRequest other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      maxRadiusKm_ = other.maxRadiusKm_;
      maxNodeCount_ = other.maxNodeCount_;
      includeNeighbours_ = other.includeNeighbours_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest Clone() {
      return new GetClosestNodesByDistanceRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Iop.Locnet.GpsLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GpsLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "max_radius_km" field.</summary>
    public const int MaxRadiusKmFieldNumber = 2;
    private float maxRadiusKm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRadiusKm {
      get { return maxRadiusKm_; }
      set {
        maxRadiusKm_ = value;
      }
    }

    /// <summary>Field number for the "max_node_count" field.</summary>
    public const int MaxNodeCountFieldNumber = 3;
    private uint maxNodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNodeCount {
      get { return maxNodeCount_; }
      set {
        maxNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "include_neighbours" field.</summary>
    public const int IncludeNeighboursFieldNumber = 4;
    private bool includeNeighbours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNeighbours {
      get { return includeNeighbours_; }
      set {
        includeNeighbours_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestNodesByDistanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestNodesByDistanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (MaxRadiusKm != other.MaxRadiusKm) return false;
      if (MaxNodeCount != other.MaxNodeCount) return false;
      if (IncludeNeighbours != other.IncludeNeighbours) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (MaxRadiusKm != 0F) hash ^= MaxRadiusKm.GetHashCode();
      if (MaxNodeCount != 0) hash ^= MaxNodeCount.GetHashCode();
      if (IncludeNeighbours != false) hash ^= IncludeNeighbours.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (MaxRadiusKm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxRadiusKm);
      }
      if (MaxNodeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (MaxRadiusKm != 0F) {
        size += 1 + 4;
      }
      if (MaxNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestNodesByDistanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Iop.Locnet.GpsLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.MaxRadiusKm != 0F) {
        MaxRadiusKm = other.MaxRadiusKm;
      }
      if (other.MaxNodeCount != 0) {
        MaxNodeCount = other.MaxNodeCount;
      }
      if (other.IncludeNeighbours != false) {
        IncludeNeighbours = other.IncludeNeighbours;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Iop.Locnet.GpsLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 21: {
            MaxRadiusKm = input.ReadFloat();
            break;
          }
          case 24: {
            MaxNodeCount = input.ReadUInt32();
            break;
          }
          case 32: {
            IncludeNeighbours = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetClosestNodesByDistanceResponse : pb::IMessage<GetClosestNodesByDistanceResponse> {
    private static readonly pb::MessageParser<GetClosestNodesByDistanceResponse> _parser = new pb::MessageParser<GetClosestNodesByDistanceResponse>(() => new GetClosestNodesByDistanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestNodesByDistanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse(GetClosestNodesByDistanceResponse other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse Clone() {
      return new GetClosestNodesByDistanceResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodes_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestNodesByDistanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestNodesByDistanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestNodesByDistanceResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientRequest : pb::IMessage<ClientRequest> {
    private static readonly pb::MessageParser<ClientRequest> _parser = new pb::MessageParser<ClientRequest>(() => new ClientRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest(ClientRequest other) : this() {
      switch (other.ClientRequestTypeCase) {
        case ClientRequestTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo.Clone();
          break;
        case ClientRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case ClientRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest Clone() {
      return new ClientRequest(this);
    }

    /// <summary>Field number for the "get_node_info" field.</summary>
    public const int GetNodeInfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeInfoRequest GetNodeInfo {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNodeInfo ? (global::Iop.Locnet.GetNodeInfoRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetNodeInfo;
      }
    }

    /// <summary>Field number for the "get_neighbour_nodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest GetNeighbourNodes {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "get_closest_nodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceRequest GetClosestNodes {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetClosestNodes;
      }
    }

    private object clientRequestType_;
    /// <summary>Enum of possible cases for the "ClientRequestType" oneof.</summary>
    public enum ClientRequestTypeOneofCase {
      None = 0,
      GetNodeInfo = 1,
      GetNeighbourNodes = 2,
      GetClosestNodes = 3,
    }
    private ClientRequestTypeOneofCase clientRequestTypeCase_ = ClientRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequestTypeOneofCase ClientRequestTypeCase {
      get { return clientRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientRequestType() {
      clientRequestTypeCase_ = ClientRequestTypeOneofCase.None;
      clientRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetNodeInfo, other.GetNodeInfo)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (ClientRequestTypeCase != other.ClientRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNodeInfo) hash ^= GetNodeInfo.GetHashCode();
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) clientRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNodeInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(GetNodeInfo);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(18);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeInfo);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientRequest other) {
      if (other == null) {
        return;
      }
      switch (other.ClientRequestTypeCase) {
        case ClientRequestTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo;
          break;
        case ClientRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case ClientRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.GetNodeInfoRequest subBuilder = new global::Iop.Locnet.GetNodeInfoRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNodeInfo) {
              subBuilder.MergeFrom(GetNodeInfo);
            }
            input.ReadMessage(subBuilder);
            GetNodeInfo = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceClientRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetClosestNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientResponse : pb::IMessage<ClientResponse> {
    private static readonly pb::MessageParser<ClientResponse> _parser = new pb::MessageParser<ClientResponse>(() => new ClientResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse(ClientResponse other) : this() {
      switch (other.ClientResponseTypeCase) {
        case ClientResponseTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo.Clone();
          break;
        case ClientResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case ClientResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse Clone() {
      return new ClientResponse(this);
    }

    /// <summary>Field number for the "get_node_info" field.</summary>
    public const int GetNodeInfoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNodeInfoResponse GetNodeInfo {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNodeInfo ? (global::Iop.Locnet.GetNodeInfoResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetNodeInfo;
      }
    }

    /// <summary>Field number for the "get_neighbour_nodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceResponse GetNeighbourNodes {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "get_closest_nodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceResponse GetClosestNodes {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetClosestNodes;
      }
    }

    private object clientResponseType_;
    /// <summary>Enum of possible cases for the "ClientResponseType" oneof.</summary>
    public enum ClientResponseTypeOneofCase {
      None = 0,
      GetNodeInfo = 1,
      GetNeighbourNodes = 2,
      GetClosestNodes = 3,
    }
    private ClientResponseTypeOneofCase clientResponseTypeCase_ = ClientResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponseTypeOneofCase ClientResponseTypeCase {
      get { return clientResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientResponseType() {
      clientResponseTypeCase_ = ClientResponseTypeOneofCase.None;
      clientResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetNodeInfo, other.GetNodeInfo)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (ClientResponseTypeCase != other.ClientResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNodeInfo) hash ^= GetNodeInfo.GetHashCode();
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) clientResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNodeInfo) {
        output.WriteRawTag(10);
        output.WriteMessage(GetNodeInfo);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(18);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNodeInfo);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ClientResponseTypeCase) {
        case ClientResponseTypeOneofCase.GetNodeInfo:
          GetNodeInfo = other.GetNodeInfo;
          break;
        case ClientResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case ClientResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.GetNodeInfoResponse subBuilder = new global::Iop.Locnet.GetNodeInfoResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNodeInfo) {
              subBuilder.MergeFrom(GetNodeInfo);
            }
            input.ReadMessage(subBuilder);
            GetNodeInfo = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetClosestNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// List the list of other Internet of People services that are accessible for clients on the same node.
  /// </summary>
  public sealed partial class GetNodeInfoRequest : pb::IMessage<GetNodeInfoRequest> {
    private static readonly pb::MessageParser<GetNodeInfoRequest> _parser = new pb::MessageParser<GetNodeInfoRequest>(() => new GetNodeInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoRequest(GetNodeInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoRequest Clone() {
      return new GetNodeInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetNodeInfoResponse : pb::IMessage<GetNodeInfoResponse> {
    private static readonly pb::MessageParser<GetNodeInfoResponse> _parser = new pb::MessageParser<GetNodeInfoResponse>(() => new GetNodeInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoResponse(GetNodeInfoResponse other) : this() {
      NodeInfo = other.nodeInfo_ != null ? other.NodeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeInfoResponse Clone() {
      return new GetNodeInfoResponse(this);
    }

    /// <summary>Field number for the "node_info" field.</summary>
    public const int NodeInfoFieldNumber = 1;
    private global::Iop.Locnet.NodeInfo nodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo NodeInfo {
      get { return nodeInfo_; }
      set {
        nodeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NodeInfo, other.NodeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeInfo_ != null) hash ^= NodeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.nodeInfo_ != null) {
        if (nodeInfo_ == null) {
          nodeInfo_ = new global::Iop.Locnet.NodeInfo();
        }
        NodeInfo.MergeFrom(other.NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeInfo_ == null) {
              nodeInfo_ = new global::Iop.Locnet.NodeInfo();
            }
            input.ReadMessage(nodeInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests for the same service as provided on the Local Service interface.
  /// It's a different request type only because clients are not allowed
  /// to keep the connection alive and wait for neighbourhood notication changes.
  /// </summary>
  public sealed partial class GetNeighbourNodesByDistanceClientRequest : pb::IMessage<GetNeighbourNodesByDistanceClientRequest> {
    private static readonly pb::MessageParser<GetNeighbourNodesByDistanceClientRequest> _parser = new pb::MessageParser<GetNeighbourNodesByDistanceClientRequest>(() => new GetNeighbourNodesByDistanceClientRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNeighbourNodesByDistanceClientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceClientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceClientRequest(GetNeighbourNodesByDistanceClientRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceClientRequest Clone() {
      return new GetNeighbourNodesByDistanceClientRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNeighbourNodesByDistanceClientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNeighbourNodesByDistanceClientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNeighbourNodesByDistanceClientRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
